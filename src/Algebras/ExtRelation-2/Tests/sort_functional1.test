# This file is part of SECONDO.
#
# Copyright (C) 2009, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# An example test spec for the Secondo TestRunner
# run it with : 
#
#  TestRunner -i example.test
#
# By default a temporary database directory will be created. If you
# want to use existing databases run
#
#  TestRunner --no-tmp -i <file>
#
# If one of your tests (say number N ) reports an error you can run
# it directly by
#
# TestRunner -i <file> -num N 
#
# this is useful for debugging

set "ERA:TraceSort" = TRUE;
set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
set "SI:RelStatistics" = TRUE;

##############################################################################
# Setup
##############################################################################

#setup sort_functional1 StandardAlgebra RelationAlgebra ExtRelation2Algebra
restore database tmp_opt from '$(SECONDO_BUILD_DIR)/bin/opt'

##############################################################################
# TestCases
##############################################################################

#--------------------------------------------------  
# sort2 - syntax test (internal case)

#testcase teststep_1
#yields (int 41267)
query plz feed sort2 count;

#--------------------------------------------------  
# sort2Param - syntax test (internal case)

#testcase teststep_2
#yields (int 41267)
query plz feed sort2Param[16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2 - syntax test
# both streams ascending

#testcase teststep_3
#yields (int 41267)
query plz feed sortby2[PLZ asc, Ort asc] count;

#--------------------------------------------------  
# sortby2 - syntax test
# both streams descending

#testcase teststep_4
#yields (int 41267)
query plz feed sortby2[PLZ desc, Ort desc] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A descending, Attribute B ascending

#testcase teststep_5
#yields (int 41267)
query plz feed sortby2[PLZ desc, Ort asc] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A ascending, Attribute B descending

#testcase teststep_6
#yields (int 41267)
query plz feed sortby2[PLZ asc, Ort desc] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A per default ascending, Attribute B descending

#testcase teststep_7
#yields (int 41267)
query plz feed sortby2[PLZ, Ort desc] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A ascending, Attribute B per default ascending

#testcase teststep_8
#yields (int 41267)
query plz feed sortby2[PLZ asc, Ort] count;

#--------------------------------------------------  
# sortby2 - syntax test
# both Attributes per default ascending

#testcase teststep_9
#yields (int 41267)
query plz feed sortby2[PLZ, Ort] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A per default ascending

#testcase teststep_10
#yields (int 41267)
query plz feed sortby2[PLZ] count;

#--------------------------------------------------  
# sortby2Param - syntax test
# both streams ascending

#testcase teststep_11
#yields (int 41267)
query plz feed sortby2Param[PLZ asc, Ort asc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2 - syntax test
# both streams descending

#testcase teststep_12
#yields (int 41267)
query plz feed sortby2Param[PLZ desc, Ort desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A descending, Attribute B ascending

#testcase teststep_13
#yields (int 41267)
query plz feed sortby2Param[PLZ desc, Ort asc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A ascending, Attribute B descending

#testcase teststep_14
#yields (int 41267)
query plz feed sortby2Param[PLZ asc, Ort desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A per default ascending, Attribute B descending

#testcase teststep_15
#yields (int 41267)
query plz feed sortby2Param[PLZ, Ort desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A ascending, Attribute B per default ascending

#testcase teststep_16
#yields (int 41267)
query plz feed sortby2Param[PLZ asc, Ort;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2 - syntax test
# both Attributes per default ascending

#testcase teststep_17
#yields (int 41267)
query plz feed sortby2Param[PLZ, Ort;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2 - syntax test
# Attribute A per default ascending

#testcase teststep_18
#yields (int 41267)
query plz feed sortby2Param[PLZ;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sort2 - syntax error

#testcase teststep_19
#yields error
query plz feed sort2[PLZ asc] count;

#--------------------------------------------------  
# sort2Param - syntax error

#testcase teststep_20
#yields error
query plz feed sort2Param count;

#--------------------------------------------------  
# sort2Param - syntax error

#testcase teststep_21
#yields error
query plz feed sort2Param[16*1024*1024,50] count;

#--------------------------------------------------  
# sortby2 - syntax error
# error in first attribute name

#testcase teststep_22
#yields error
query plz feed sortby2[PL asc, Ort desc] count;

#--------------------------------------------------  
# sortby2 - syntax error
# error in first attribute sorting order specifier

#testcase teststep_23
#yields error
query plz feed sortby2[PLZ ascd, Ort desc] count;

#--------------------------------------------------  
# sortby2 - syntax error
# error in second attribute name

#testcase teststep_24
#yields error
query plz feed sortby2[PLZ asc, Ot desc] count;

#--------------------------------------------------  
# sortby2 - syntax error
# error in second attribute sorting order specifier

#testcase teststep_25
#yields error
query plz feed sortby2[PLZ asc, Ort dsc] count;

#--------------------------------------------------  
# sortby2 - syntax error
# First argument not a tuple stream

#testcase teststep_26
#yields error
query plz sortby2[PLZ asc, Ort desc] count;

#--------------------------------------------------  
# sortby2 - syntax error
# First attribute unknown

#testcase teststep_27
#yields error
query plz feed sortby2[plz asc, Ort desc] count;

#--------------------------------------------------  
# sortby2 - syntax error
# Second attribute unknown

#testcase teststep_28
#yields error
query plz feed sortby2[PLZ asc, ort desc] count;

#--------------------------------------------------  
# sortby2 - syntax error
# plz, ort unknown attribute names

#testcase teststep_29
#yields error
query plz feed sortby2[plz asc, ort desc] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# error in first attribute name

#testcase teststep_30
#yields error
query plz feed sortby2Param[PL asc, Ort desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# error in first attribute sorting order specifier

#testcase teststep_31
#yields error
query plz feed sortby2Param[PLZ ascd, Ort desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# error in second attribute name

#testcase teststep_32
#yields error
query plz feed sortby2Param[PLZ asc, Ot desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# error in second attribute sorting order specifier

#testcase teststep_33
#yields error
query plz feed sortby2Param[PLZ asc, Ort dsc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# First argument not a tuple stream

#testcase teststep_34
#yields error
query plz sortby2Param[PLZ asc, Ort desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# First attribute unknown

#testcase teststep_35
#yields error
query plz feed sortby2Param[plz asc, Ort desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# Second attribute unknown

#testcase teststep_36
#yields error
query plz feed sortby2Param[PLZ asc, ort desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# plz, ort unknown attribute names

#testcase teststep_37
#yields error
query plz feed sortby2Param[plz asc, ort desc;16*1024*1024,50,4096] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# missing FMAX and I/O Buffer size

#testcase teststep_38
#yields error
query plz feed sortby2Param[PLZ, Ort;16*1024*1024] count;

#--------------------------------------------------  
# sortby2Param - syntax error
# missing I/O Buffer size

#testcase teststep_39
#yields error
query plz feed sortby2Param[PLZ, Ort;16*1024*1024,50] count;

#--------------------------------------------------  
# sort2 - usage with head operator (internal case)

#testcase teststep_40
#yields (int 100)
query plz feed sort2 head[100] count;

#--------------------------------------------------  
# sort2 - usage with head operator (internal case)

#testcase teststep_41
#yields success
query plz feed sort2 head[100] consume;

#--------------------------------------------------  
# sort2 - comparison with sort (internal case)

#testcase teststep_42_create_result
#yields success
let result42 = plz feed sort consume;

#testcase teststep_42_compare_result
#yields *result42
query plz feed sort2 consume;

#--------------------------------------------------  
# sort2Param - comparison with sort (external case)
# plz: 41267 tuples (20 byte tuplesize)
# => 0,78 MB
# Max Memory: 10 KBytes
# Max fan-in merge phase: 50 
# I/O Buffer size: 4096 bytes

#testcase teststep_43_create_data
#yields success
let data43 = plz feed extend[ran: randint(10000)] sortby[ran] remove[ran] consume;

#testcase teststep_43_create_result
#yields success
let result43 = plz feed sort consume;

#testcase teststep_43_compare_result
#yields *result43
query data43 feed sort2Param[10240,50,4096] consume;

#testcase teststep_43_delete_data
#yields success
delete data43;

#--------------------------------------------------  
# sort2Param - comparison with sort (external case) 
# with LOBs and intermediate merge phases
# plz: 41267 tuples (20 byte tuplesize)
# => 0,78 MB
# Max Memory: 1024 bytes
# Max fan-in merge phase: 50 
# I/O Buffer size: 4096 bytes

#testcase teststep_44_create_data
#yields success
let data44 = plz feed extend[ran: randint(10000)] sortby[ran] remove[ran] consume;

#testcase teststep_44_create_result
#yields success
let result44 = data44 feed sort consume;

#testcase teststep_44_compare_result
#yields *result44
query data44 feed sort2Param[1024,50,4096] consume;

#testcase teststep_44_delete_data
#yields success
delete data44;

#--------------------------------------------------  
# sortby2 - comparison with sortby (internal case)

#testcase teststep_45_create_result
#yields success
let result45 = plz feed sortby[Ort,PLZ] consume;

#testcase teststep_45_compare_result
#yields *result45
query plz feed sortby2[Ort,PLZ] consume;

#testcase teststep_45_delete_data
#yields success
delete result45;

#--------------------------------------------------  
# sortby2Param - comparison with sortby (external case)
# plz: 41267 tuples (20 byte tuplesize)
# => 0,78 MB
# Max Memory: 10 KBytes
# Max fan-in merge phase: 50 
# I/O Buffer size: 4096 bytes

#testcase teststep_46_create_data
#yields success
let data46 = plz feed extend[ran: randint(10000)] sortby[ran] remove[ran] consume;

#testcase teststep_46_create_result
#yields success
let result46 = plz feed sortby[Ort,PLZ] consume;

#testcase teststep_46_compare_result
#yields *result46
query data46 feed sortby2Param[Ort,PLZ;10240,50,4096] consume;

#testcase teststep_46_delete_result
#yields success
delete result46;

#testcase teststep_46_delete_data
#yields success
delete data46;

#--------------------------------------------------  
# sortby2Param - comparison with sortby (external case) 
# plz: 41267 tuples (20 byte tuplesize)
# => 0,78 MB
# Max Memory: 1024 bytes
# Max fan-in merge phase: 50 
# I/O Buffer size: 4096 bytes

#testcase teststep_47_create_data
#yields success
let data47 = plz feed extend[ran: randint(10000)] sortby[ran] remove[ran] consume;

#testcase teststep_47_create_result
#yields success
let result47 = data47 feed sortby[Ort,PLZ] consume;

#testcase teststep_47_compare_result
#yields *result47
query data47 feed sortby2Param[Ort,PLZ;1024,50,4096] consume;

#testcase teststep_47_delete_result
#yields success
delete result47;

#testcase teststep_47_delete_data
#yields success
delete data47;

#--------------------------------------------------  
# sortby2 - comparison with sortby (internal case)

#testcase teststep_48_create_result
#yields success
let result48 = plz feed sortby[Ort,PLZ] consume;

#testcase teststep_48_compare_result
#yields *result48
query plz feed sortby[Ort desc,PLZ desc] sortby2[Ort,PLZ] consume;

#testcase teststep_48_delete_result
#yields success
delete result48;

#--------------------------------------------------  
# sortby2 - comparison with sortby (internal case)

#testcase teststep_49_create_data
#yields success
let data47 = plz feed extend[ran: randint(10000)] sortby[ran] remove[ran] project[Ort] consume;

#testcase teststep_49_create_result
#yields success
let result49 = plz feed sortby[Ort] consume;

#testcase teststep_49_compare_result
#yields *result49
query plz feed sortby2[Ort] consume;

#testcase teststep_49_delete_result
#yields success
delete result49;

##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database tmp_opt;

