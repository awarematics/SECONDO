# This file is part of SECONDO.
#
# Copyright (C) 2009, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# An example test spec for the Secondo TestRunner
# run it with : 
#
#  TestRunner -i example.test
#
# By default a temporary database directory will be created. If you
# want to use existing databases run
#
#  TestRunner --no-tmp -i <file>
#
# If one of your tests (say number N ) reports an error you can run
# it directly by
#
# TestRunner -i <file> -num N 
#
# this is useful for debugging

set "ERA:TraceSort" = TRUE;
set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
set "SI:RelStatistics" = TRUE;

##############################################################################
# Setup
##############################################################################

#setup sort_functional StandardAlgebra RelationAlgebra ExtRelation2Algebra
restore database tmp_germany from '$(HOME)/secondo-data/Databases/germany' 

##############################################################################
# TestCases
##############################################################################

#--------------------------------------------------  
# sort2Param - comparison with sort (internal case) 
# with LOBs => 1 run

#testcase teststep_1_create_result
#yields success
let result1 = Kreis feed project[Gebiet] sort consume;

#testcase teststep_1_compare_result
#yields *result1
query Kreis feed project[Gebiet] sort2 consume;

#--------------------------------------------------  
# sort2Param - comparison with sort (external case) 
# with LOBs => < 50 runs
# Kreis: 439 tuples (~56 Kbyte tuplesize)
# => 24 MB
# Max Memory: 1 MByte
# Max fan-in merge phase: 50 
# I/O Buffer size: 4096 bytes

#testcase teststep_2_create_data
#yields success
let data2 = Kreis feed extend[ran: randint(10000)] sortby[ran] remove[ran] consume;

#testcase teststep_2_create_result
#yields success
let result2 = data2 feed project[Gebiet] sort consume;

#testcase teststep_2_compare_result
#yields *result2
query data2 feed project[Gebiet] sort2Param[1024,50,4096] consume;

#--------------------------------------------------  
# sort2Param - comparison with sort (external case)
# with intermediate merg phases and with LOBs
# Kreis: 439 tuples (~56 Kbyte tuplesize)
# => 24 MB
# Max Memory: 1 KByte
# Max fan-in merge phase: 50 
# I/O Buffer size: 4096 bytes

#testcase teststep_3_create_data
#yields success
let data3 = Kreis feed {a} Kreis feed {b} head[5] product project[Gebiet_a] extend[ran: randint(10000)] sortby[ran] remove[ran] consume;

#testcase teststep_3_create_result
#yields success
let result3 = data3 feed sort consume;

#testcase teststep_3_compare_result
#yields *result3
query data3 feed sort2Param[1024,50,4096] consume;

##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database tmp_germany;

