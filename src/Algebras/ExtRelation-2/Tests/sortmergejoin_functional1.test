# This file is part of SECONDO.
#
# Copyright (C) 2009, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# An example test spec for the Secondo TestRunner
# run it with : 
#
#  TestRunner -i example.test
#
# By default a temporary database directory will be created. If you
# want to use existing databases run
#
#  TestRunner --no-tmp -i <file>
#
# If one of your tests (say number N ) reports an error you can run
# it directly by
#
# TestRunner -i <file> -num N 
#
# this is useful for debugging

set "ERA:TraceSort" = TRUE;
set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
set "SI:RelStatistics" = TRUE;

##############################################################################
# Setup
##############################################################################

#setup sortmergejoin_functional1 StandardAlgebra RelationAlgebra ExtRelation2Algebra
restore database tmp_opt from '$(SECONDO_BUILD_DIR)/bin/opt'

##############################################################################
# TestCases
##############################################################################

#--------------------------------------------------  
# sortmergejoin2 - syntax test

#testcase teststep_1
#yields success
query plz feed {a} Orte feed {b} sortmergejoin2[Ort_a, Ort_b] count;

#--------------------------------------------------  
# sortmergejoin2Param - syntax test

#testcase teststep_1
#yields success
query plz feed {a} Orte feed {b} sortmergejoin2Param[Ort_a, Ort_b,16*1024*1024] count;

#--------------------------------------------------  
# sortmergejoin2 - syntax error

#testcase teststep_2
#yields error
query plz feed {a} Orte feed {b} sortmergejoin2 count;

#--------------------------------------------------  
# sortmergejoin2 - syntax error

#testcase teststep_3
#yields error
query plz feed {a} Orte feed {b} sortmergejoin2[] count;

#--------------------------------------------------  
# sortmergejoin2 - syntax error

#testcase teststep_4
#yields error
query plz feed {a} Orte feed {b} sortmergejoin2[Ort_a] count;

#--------------------------------------------------  
# sortmergejoin2 - syntax error

#testcase teststep_5
#yields error
query plz feed {a} Orte feed {b} sortmergejoin2[Ort_a,Ort_b,Ort_c] count;

#--------------------------------------------------  
# sortmergejoin2 - syntax error

#testcase teststep_6
#yields error
query plz feed {a} Orte feed {b} sortmergejoin2[Ort,Ort_b] count;

#--------------------------------------------------  
# sortmergejoin2 - syntax error

#testcase teststep_7
#yields error
query plz feed {a} Orte feed {b} sortmergejoin2[Ort_a,Ort] count;

#--------------------------------------------------  
# sortmergejoin2 - syntax error

#testcase teststep_8
#yields error
query plz feed {a} Orte feed {b} sortmergejoin2[Ort_d,Ort_c] count;

#--------------------------------------------------  
# sortmergejoin2Param - syntax error

#testcase teststep_9
#yields error
query plz feed {a} Orte feed {b} sortmergejoin2Param[Ort_a,Ort_b] count;

#--------------------------------------------------  
# sortmergejoin2Param - syntax error

#testcase teststep_10
#yields error
query plz feed {a} Orte feed {b} sortmergejoin2Param[Ort_a,Ort_b,1024,1024] count;

#--------------------------------------------------  
# sortmergejoin2 - comparison sortmergejoin (internal case)

#testcase teststep_11_create_result
#yields success
let result11 = plz feed {a} Orte feed {b} sortmergejoin[Ort_a, Ort_b] consume;

#testcase teststep_11_compare_result
#yields *result11
query plz feed {a} Orte feed {b} sortmergejoin2[Ort_a, Ort_b] consume;

#--------------------------------------------------  
# sortmergejoin2 - comparison hashjoin (internal case)

# Results must be sorted afterwards because of the
# different algorithms

#testcase teststep_12_create_result
#yields success
let result12 = plz feed {a} Orte feed {b} hashjoin[Ort_a, Ort_b, 1000] sort consume;

#testcase teststep_12_compare_result
#yields *result12
query plz feed {a} Orte feed {b} sortmergejoin2[Ort_a, Ort_b] sort2 consume;

#--------------------------------------------------  
# sortmergejoin2Param - (internal case)

# data13 is a relation with 20 equal tuples 
# (Size: 35 bytes) => 700 bytes; MAX_MEMORY is set to 
# 1024 bytes, so that the internal grpB buffer is filled
# but does not overflow

##testcase teststep_13_create_data
#yields success
let data13 = Orte feed head[1] thousand feed head[20] product remove[no] consume;

##testcase teststep_13_create_result
#yields success
let result13 = plz feed {a} data13 feed {b} sortmergejoin[Ort_a, Ort_b] consume;

##testcase teststep_13_compare_result
#yields *result13
query plz feed {a} data13 feed {b} sortmergejoin2Param[Ort_a, Ort_b, 1024] consume;

##testcase teststep_13_delete_result
#yields success
delete result13;

##testcase teststep_13_delete_data
#yields success
delete data13;

#--------------------------------------------------  
# sortmergejoin2Param - (external case)

# data14 is a relation with 1.000 equal tuples 
# (Size: 35 bytes) => 35000 bytes; 
# data14 is big enough to cause an buffer 
# overflow of the internally used grpB buffer with size
# 1024 bytes (used to collect equal tuples from streamB). 
# The first stream has 41267 tuples each about ~20 byte size. 

##testcase teststep_14_create_data
#yields success
let data14 = Orte feed head[1] thousand feed product remove[no] consume;

##testcase teststep_14_create_result
#yields success
let result14 = plz feed {a} data14 feed {b} sortmergejoin[Ort_a, Ort_b] consume;

##testcase teststep_14_compare_result
#yields *result14
query plz feed {a} data14 feed {b} sortmergejoin2Param[Ort_a, Ort_b, 1024] consume;

##testcase teststep_14_delete_result
#yields success
delete result14;

##testcase teststep_14_delete_data
#yields success
delete data14;

#--------------------------------------------------  
# sortmergejoin2 - usage with head operator

#testcase teststep_15
#yields success
query plz feed {a} Orte feed {b} sortmergejoin2[Ort_a, Ort_b] head[1000] count;

#--------------------------------------------------  
# sortmergejoin2Param - usage with head operator

#testcase teststep_16
#yields success
query plz feed {a} Orte feed {b} sortmergejoin2Param[Ort_a, Ort_b,16*1024*1024] head[1000] count;


##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database tmp_opt;

