# This file is part of SECONDO.
#
# Copyright (C) 2009, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# An example test spec for the Secondo TestRunner
# run it with : 
#
#  TestRunner -i example.test
#
# By default a temporary database directory will be created. If you
# want to use existing databases run
#
#  TestRunner --no-tmp -i <file>
#
# If one of your tests (say number N ) reports an error you can run
# it directly by
#
# TestRunner -i <file> -num N 
#
# this is useful for debugging

set "ERA:TraceSort" = TRUE;
set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
set "SI:RelStatistics" = TRUE;

##############################################################################
# Setup
##############################################################################

#setup sortmergejoin_functional2 StandardAlgebra RelationAlgebra ExtRelation2Algebra
restore database tmp_germany from '$(HOME)/secondo-data/Databases/germany' 

##############################################################################
# TestCases
##############################################################################


#--------------------------------------------------  
# sortmergejoin2 - comparison sortmergejoin (internal case)
# with LOB data

#testcase teststep_1_create_data
#yields success
let data1 = Kreis feed project[Gebiet] consume;

#testcase teststep_1_create_result
#yields success
let result1 = data1 feed {a} data1 feed {b} sortmergejoin[Gebiet_a, Gebiet_b] consume;

#testcase teststep_1_compare_result
#yields *result1
query data1 feed {a} data1 feed {b} sortmergejoin2[Gebiet_a, Gebiet_b] consume;

#testcase teststep_1_delete_data
#yields success
delete data1;

#--------------------------------------------------  
# sortmergejoin2 - comparison hashjoin (external case)

# relation Kreis has 439 tuples, each ~85 Bytes ExtSize => ~36 KByte total

#testcase teststep_2a_create_data
#yields success
let data2a = Kreis feed project[Gebiet] consume;

#testcase teststep_2b_create_data
#yields success
let data2b = data2a feed head[1] {b} data2a feed {c} product remove[Gebiet_c] consume;

#testcase teststep_2_create_result
#yields success
let result2 = data2a feed {a} data2b feed sortmergejoin[Gebiet_a, Gebiet_b] consume;

#testcase teststep_2_compare_result
#yields *result2
query data2a feed {a} data2b feed sortmergejoin2Param[Gebiet_a, Gebiet_b, 32*1024] consume;

#testcase teststep_2a_delete_data
#yields success
delete data2a;

#testcase teststep_2b_delete_data
#yields success
delete data2b;

#testcase teststep_2_delete_result
#yields success
delete result2;


##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database tmp_germany;

