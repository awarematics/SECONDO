# This file is part of SECONDO.
#
# Copyright (C) 2009, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# An example test spec for the Secondo TestRunner
# run it with : 
#
#  TestRunner -i example.test
#
# By default a temporary database directory will be created. If you
# want to use existing databases run
#
#  TestRunner --no-tmp -i <file>
#
# If one of your tests (say number N ) reports an error you can run
# it directly by
#
# TestRunner -i <file> -num N 
#
# this is useful for debugging

set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
set "SI:RelStatistics" = TRUE;

##############################################################################
# Setup
##############################################################################

#setup tuplebuffer_functional2 StandardAlgebra RelationAlgebra ExtRelation2Algebra
restore database tmp_germany from '$(HOME)/secondo-data/Databases/germany' 

##############################################################################
# TestCases
##############################################################################


#--------------------------------------------------  
# tuplebuffer - (internal case, 32 MB buffer size)

#testcase teststep_1_create_result
#yields success
let result1 = Kreis feed consume;

#testcase teststep_1_compare_result
#yields *result1
query Kreis feed tuplebuffer[32*1024] consume;

#testcase teststep_1_delete_result
#yields success
delete result1;

#--------------------------------------------------  
# tuplebuffer - (mixed case, 16 MB buffer size)
# relation Kreis has about 24 MB size, 439 tuples
# with extSize ~88 Byte => 38632 bytes extSize
# => 16 MB stored in memory, 8 MB stored on disc

#testcase teststep_2_create_result
#yields success
let result2 = Kreis feed consume;

#testcase teststep_2_compare_result
#yields *result2
query Kreis feed tuplebuffer[32] consume;

#testcase teststep_2_delete_result
#yields success
delete result2;

#--------------------------------------------------  
# tuplebuffer - (external case, 0 KByte buffer size)

#testcase teststep_3_create_result
#yields success
let result3 = Kreis feed consume;

#testcase teststep_3_compare_result
#yields *result3
query Kreis feed tuplebuffer[0] consume;

#testcase teststep_3_delete_result
#yields success
delete result3;


##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database tmp_germany;

