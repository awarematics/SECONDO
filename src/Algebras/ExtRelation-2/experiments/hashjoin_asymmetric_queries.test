# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#--------------------------------------------------  
# Enable Flags
#--------------------------------------------------  

set "ERA:TraceHybridHashJoin" = TRUE;
set "ERA:HybridHashJoinNoSubpartitioning" = FALSE;
#set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
#set "SI:RelStatistics" = TRUE;
set "SMI:NoTransactions" = TRUE;

#--------------------------------------------------  
# Create and open database DB_TMP
#--------------------------------------------------  

#setup hashjoin_subpartitioning StandardAlgebra RelationAlgebra ExtRelation2Algebra

create database db_tmp;
open database db_tmp;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 5 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A50x5';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B50x5';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_5_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 50MB_join_5_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 45 MB x 10 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A45x10';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B45x10';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 45MB_join_10_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 45MB_join_10_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 40 MB x 15 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A40x15';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B40x15';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 40MB_join_15_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 40MB_join_15_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 35 MB x 20 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A35x20';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B35x20';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 35MB_join_20_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 35MB_join_20_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 30 MB x 25 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A30x25';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B30x25';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 30MB_join_25_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 30MB_join_25_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 27,5 MB x 27,5 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A27.5x27.5';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B27.5x27.5';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 27.5MB_join_27.5_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 27.5MB_join_27.5_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 30 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A25x30';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B25x30';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 25MB_join_30_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 25MB_join_30_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 20 MB x 35 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A20x35';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B20x35';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 20MB_join_35_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 20MB_join_35_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 15 MB x 40 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A15x40';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B15x40';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 15MB_join_40_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 15MB_join_40_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 10 MB x 45 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A10x45';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B10x45';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 10MB_join_45_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 10MB_join_45_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 5 MB x 50 MB (512 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL512A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512A5x50';

#testcase create_relation_B
#yields success
restore REL512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_512B5x50';

#testcase create_relation_A
#yields success
let relA = REL512A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL512B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 5MB_join_50_MB_standard_512
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 5MB_join_50_MB_hybrid_512
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL512A;

#testcase delete_relation_B
#yields success
delete REL512B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 5 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A50x5';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B50x5';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_5_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 50MB_join_5_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 45 MB x 10 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A45x10';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B45x10';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 45MB_join_10_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 45MB_join_10_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 40 MB x 15 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A40x15';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B40x15';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 40MB_join_15_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 40MB_join_15_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 35 MB x 20 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A35x20';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B35x20';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 35MB_join_20_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 35MB_join_20_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 30 MB x 25 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A30x25';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B30x25';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 30MB_join_25_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 30MB_join_25_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 27,5 MB x 27,5 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A27.5x27.5';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B27.5x27.5';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 27.5MB_join_27.5_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 27.5MB_join_27.5_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 30 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A25x30';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B25x30';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 25MB_join_30_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 25MB_join_30_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 20 MB x 35 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A20x35';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B20x35';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 20MB_join_35_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 20MB_join_35_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 15 MB x 40 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A15x40';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B15x40';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 15MB_join_40_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 15MB_join_40_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 10 MB x 45 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A10x45';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B10x45';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 10MB_join_45_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 10MB_join_45_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 5 MB x 50 MB (256 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256A5x50';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_256B5x50';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 5MB_join_50_MB_standard_256
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 5MB_join_50_MB_hybrid_256
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 5 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A50x5';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B50x5';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_5_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 50MB_join_5_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 45 MB x 10 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A45x10';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B45x10';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 45MB_join_10_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 45MB_join_10_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 40 MB x 15 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A40x15';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B40x15';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 40MB_join_15_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 40MB_join_15_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 35 MB x 20 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A35x20';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B35x20';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 35MB_join_20_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 35MB_join_20_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 30 MB x 25 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A30x25';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B30x25';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 30MB_join_25_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 30MB_join_25_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 27,5 MB x 27,5 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A27.5x27.5';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B27.5x27.5';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 27.5MB_join_27.5_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 27.5MB_join_27.5_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 30 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A25x30';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B25x30';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 25MB_join_30_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 25MB_join_30_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 20 MB x 35 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A20x35';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B20x35';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 20MB_join_35_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 20MB_join_35_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 15 MB x 40 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A15x40';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B15x40';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 15MB_join_40_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 15MB_join_40_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 10 MB x 45 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A10x45';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B10x45';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 10MB_join_45_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 10MB_join_45_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

#--------------------------------------------------  
# Hybrid Hash-Join with 5 MB x 50 MB (64 Byte)
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL64A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64A5x50';

#testcase create_relation_B
#yields success
restore REL64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_asymmetric_queries_64B5x50';

#testcase create_relation_A
#yields success
let relA = REL64A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL64B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 5MB_join_50_MB_standard_64
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 5MB_join_50_MB_hybrid_64
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL64A;

#testcase delete_relation_B
#yields success
delete REL64B;

##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database db_tmp;
