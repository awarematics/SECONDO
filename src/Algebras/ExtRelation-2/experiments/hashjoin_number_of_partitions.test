# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#--------------------------------------------------  
# Enable Flags
#--------------------------------------------------  

set "ERA:TraceHybridHashJoin" = TRUE;
#set "ERA:HybridHashJoinNoSubpartitioning" = TRUE;
#set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
#set "SI:RelStatistics" = TRUE;
set "SMI:NoTransactions" = TRUE;

#--------------------------------------------------  
# Create and open database DB_TMP
#--------------------------------------------------  

#setup hashjoin_number_of_partitions StandardAlgebra RelationAlgebra ExtRelation2Algebra

create database db_tmp;

open database db_tmp;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 2 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_A25x2';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_B25x2';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hybridhashjoin_25x2_optimum_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,2,1024*1024,-1] count;

#testcase hybridhashjoin_25x2_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation
#yields success
delete REL256A;

#testcase delete_relation
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 5 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_A25x5';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_B25x5';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hybridhashjoin_25x5_optimum_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,5,1024*1024,-1] count;

#testcase hybridhashjoin_25x5_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation
#yields success
delete REL256A;

#testcase delete_relation
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 10 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_A25x10';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_B25x10';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hybridhashjoin_25x10_optimum_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,10,1024*1024,-1] count;

#testcase hybridhashjoin_25x10_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation
#yields success
delete REL256A;

#testcase delete_relation
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 15 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_A25x15';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_B25x15';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hybridhashjoin_25x15_optimum_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,15,1024*1024,-1] count;

#testcase hybridhashjoin_25x15_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation
#yields success
delete REL256A;

#testcase delete_relation
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 20 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_A25x20';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_B25x20';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hybridhashjoin_25x20_optimum_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,20,1024*1024,-1] count;

#testcase hybridhashjoin_25x20_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation
#yields success
delete REL256A;

#testcase delete_relation
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 25 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_A25x25';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_B25x25';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hybridhashjoin_25x25_optimum_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,25,1024*1024,-1] count;

#testcase hybridhashjoin_25x25_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation
#yields success
delete REL256A;

#testcase delete_relation
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 30 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_A25x30';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/REL256_B25x30';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hybridhashjoin_25x30_optimum_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,30,1024*1024,-1] count;

#testcase hybridhashjoin_25x30_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation
#yields success
delete REL256A;

#testcase delete_relation
#yields success
delete REL256B;

##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database db_tmp;
