# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#--------------------------------------------------  
# Enable Flags
#--------------------------------------------------  

set "ERA:TraceHybridHashJoin" = TRUE;
#set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
#set "SI:RelStatistics" = TRUE;
set "SMI:NoTransactions" = TRUE;

#--------------------------------------------------  
# Create and open database DB_TMP
#--------------------------------------------------  

#setup hashjoin_subpartitioning StandardAlgebra RelationAlgebra ExtRelation2Algebra

create database db_tmp;
open database db_tmp;

#--------------------------------------------------  
# Selectivity 1%
#--------------------------------------------------  

#testcase create_relation
#yields success
restore RELPAIR_SEL1A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL1A';

#testcase create_relation
#yields success
restore RELPAIR_SEL1B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL1B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL1A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL1B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel1
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel1
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 5%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL5A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL5A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL5B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL5B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL5A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL5B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel5
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel5
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 10%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL10A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL10A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL10B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL10B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL10A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL10B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel10
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel10
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 20%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL20A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL20A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL20B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL20B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL20A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL20B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel20
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel20
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 30%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL30A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL30A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL30B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL30B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL30A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL30B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel30
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel30
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 40%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL40A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL40A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL40B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL40B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL40A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL40B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel40
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel40
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 50%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL50A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL50A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL50B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL50B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL50A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL50B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel50
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel50
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 60%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL60A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL60A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL60B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL60B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL60A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL60B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel60
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel60
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 70%
#------------------------------------extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] --------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL70A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL70A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL70B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL70B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL70A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL70B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel70
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel70
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 80%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL80A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL80A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL80B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL80B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL80A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL80B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel80
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel80
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 90%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL90A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL90A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL90B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL90B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL90A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL90B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel90
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel90
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#--------------------------------------------------  
# Selectivity 100%
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore RELPAIR_SEL100A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL100A';

#testcase create_relation_B
#yields success
restore RELPAIR_SEL100B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/RELPAIR_SEL100B';

#testcase create_relation_A
#yields success
let relA = RELPAIR_SEL100A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = RELPAIR_SEL100B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase hashjoin_sel100
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase hybridhashjoin_sel100
#yields success
query relA feed relB feed hybridhashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;


##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database db_tmp;
