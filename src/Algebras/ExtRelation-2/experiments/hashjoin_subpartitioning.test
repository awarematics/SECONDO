# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#--------------------------------------------------  
# Enable Flags
#--------------------------------------------------  

set "ERA:TraceHybridHashJoin" = TRUE;
#set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
#set "SI:RelStatistics" = TRUE;
set "SMI:NoTransactions" = TRUE;

#--------------------------------------------------  
# Create and open database DB_TMP
#--------------------------------------------------  

#setup hashjoin_subpartitioning StandardAlgebra RelationAlgebra ExtRelation2Algebra

create database db_tmp;
open database db_tmp;

#--------------------------------------------------  
# Create relations with 25 MB data and 256 Byte 
# tuples and selectivity 0.001 %
#--------------------------------------------------  

#testcase create_relation
#yields success
restore REL_256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_subpartitioning_REL256A';

#testcase create_relation
#yields success
restore REL_256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_subpartitioning_REL256B';

#testcase create_relation_A
#yields success
let relA = REL_256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;-1,64*1024*1024,-1] remove[ran] consume; 

#testcase create_relation_B
#yields success
let relB = REL_256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;-1,64*1024*1024,-1] remove[ran] consume; 

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 25 MB, 64 KByte Mem
#--------------------------------------------------  

#testcase disable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = TRUE;

#testcase 64_KByte_Memory_no_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,64*1024,-1] count;

#testcase enable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = FALSE;

#testcase 64_KByte_Memory_with_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,64*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 25 MB, 128 KByte Mem
#--------------------------------------------------  

#testcase disable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = TRUE;

#testcase 128_KByte_Memory_no_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,128*1024,-1] count;

#testcase enable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = FALSE;

#testcase 128_KByte_Memory_with_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,128*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 25 MB, 256 KByte Mem
#--------------------------------------------------  

#testcase disable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = TRUE;

#testcase 256_KByte_Memory_no_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,256*1024,-1] count;

#testcase enable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = FALSE;

#testcase 256_KByte_Memory_with_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,256*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 25 MB, 512 KByte Mem
#--------------------------------------------------  

#testcase disable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = TRUE;

#testcase 512_KByte_Memory_no_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,512*1024,-1] count;

#testcase enable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = FALSE;

#testcase 512_KByte_Memory_with_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,512*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 25 MB, 768 KByte Mem
#--------------------------------------------------  

#testcase disable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = TRUE;

#testcase 768_KByte_Memory_no_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,768*1024,-1] count;

#testcase enable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = FALSE;

#testcase 768_KByte_Memory_with_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,768*1024,-1] count;

#--------------------------------------------------  
# Hybrid Hash-Join with 25 MB x 25 MB, 1024 KByte Mem
#--------------------------------------------------  

#testcase disable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = TRUE;

#testcase 1024_KByte_Memory_no_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

#testcase enable_subpartitioning
#yields success
set "ERA:HybridHashJoinNoSubpartitioning" = FALSE;

#testcase 1024_KByte_Memory_with_subpartitioning
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,1024*1024,-1] count;

##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database db_tmp;
