# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#--------------------------------------------------  
# Enable Flags
#--------------------------------------------------  

set "ERA:TraceHybridHashJoin" = TRUE;
#set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
#set "SI:RelStatistics" = TRUE;
set "SMI:NoTransactions" = TRUE;

#--------------------------------------------------  
# Create and open database DB_TMP
#--------------------------------------------------  

#setup hashjoin_switch_intern_extern StandardAlgebra RelationAlgebra ExtRelation2Algebra

create database db_tmp;
open database db_tmp;

#--------------------------------------------------  
# Create relations with 50 MB data 
#--------------------------------------------------  

#testcase create_relation
#yields success
restore R50MB_T256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R50MB_T256B';

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 10 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x10';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x10';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_10MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase 50MB_join_10MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 12 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x12';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x12';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_12MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_12MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 14 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x14';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x14';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_14MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_14MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 16 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x16';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x16';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_16MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_16MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 18 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x18';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x18';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_18MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_18MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 20 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x20';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x20';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_20MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_20MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 22 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x22';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x22';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_22MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_22MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 24 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x24';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x24';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_24MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_24MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 26 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x26';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x26';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_26MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_26MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 28 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x28';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x28';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_28MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_28MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 30 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x30';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x30';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_30MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_30MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

#--------------------------------------------------  
# Hybrid Hash-Join with 50 MB x 32 MB
#--------------------------------------------------  

#testcase create_relation_A
#yields success
restore REL256A from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_A50x32';

#testcase create_relation_B
#yields success
restore REL256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/hashjoin_switch_intern_extern_B50x32';

#testcase create_relation_A
#yields success
let relA = REL256A feed {a} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase create_relation_B
#yields success
let relB = REL256B feed {b} extend[ran: randint(50000)] sortby2Param[ran;64*1024*1024,-1,-1] remove[ran] consume;

#testcase 50MB_join_32MB_16_partitions
#yields success
query relA feed relB feed hybridhashjoinParam[Flob_a,Flob_b;1000,-1,-1,-1] count;

#testcase 50MB_join_32MB_standard
#yields success
query relA feed relB feed hashjoin[Flob_a,Flob_b;1000] count;

#testcase delete_relation_A
#yields success
delete relA;

#testcase delete_relation_B
#yields success
delete relB;

#testcase delete_relation_A
#yields success
delete REL256A;

#testcase delete_relation_B
#yields success
delete REL256B;

##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database db_tmp;
