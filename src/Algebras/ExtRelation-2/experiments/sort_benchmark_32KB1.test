# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#--------------------------------------------------  
# Enable Flags
#--------------------------------------------------  

set "ERA:TraceSort" = TRUE;
#set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
#set "SI:RelStatistics" = TRUE;
set "SMI:NoTransactions" = TRUE;

#--------------------------------------------------  
# Create and open database DB_R1G
#--------------------------------------------------  

#setup sort_benchmark_32KB StandardAlgebra RelationAlgebra ExtRelation2Algebra

create database db_R1G;
open database db_R1G;

#--------------------------------------------------  
# Sort 1 MB data
#--------------------------------------------------  

#testcase create relation
#yields success
restore R1MB_T32KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R1MB_T32KB';

#testcase Old sort algorithm - time for run generation
#yields success
query R1MB_T32KB feed sort head[1] count;

#testcase Old sort algorithm - total time
#yields success
query R1MB_T32KB feed sort count;

#testcase New sort2 algorithm
#yields success
query R1MB_T32KB feed sort2 count;

#testcase Old sortby algorithm - time for run generation
#yields success
query R1MB_T32KB feed sortby[Flob asc, Nr asc] head[1] count;

#testcase Old sortby algorithm - total time
#yields success
query R1MB_T32KB feed sortby[Flob asc, Nr asc] count;

#testcase New sortby algorithm
#yields success
query R1MB_T32KB feed sortby2[Flob asc, Nr asc] count;

#testcase Delete relation
#yields success
delete R1MB_T32KB;

#--------------------------------------------------  
# Sort 10 MB data
#--------------------------------------------------  

#testcase create relation
#yields success
restore R10MB_T32KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R10MB_T32KB';

#testcase Old sort algorithm - time for run generation
#yields success
query R10MB_T32KB feed sort head[1] count;

#testcase Old sort algorithm - total time
#yields success
query R10MB_T32KB feed sort count;

#testcase New sort2 algorithm
#yields success
query R10MB_T32KB feed sort2 count;

#testcase Old sortby algorithm - time for run generation
#yields success
query R10MB_T32KB feed sortby[Flob asc, Nr asc] head[1] count;

#testcase Old sortby algorithm - total time
#yields success
query R10MB_T32KB feed sortby[Flob asc, Nr asc] count;

#testcase New sortby2 algorithm
#yields success
query R10MB_T32KB feed sortby2[Flob asc, Nr asc] count;

#testcase Delete relation
#yields success
delete R10MB_T32KB;

#--------------------------------------------------  
# Sort 32 MB data
#--------------------------------------------------  

#testcase create relation
#yields success
restore R50MB_T32KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R50MB_T32KB';

#testcase create relation
#yields success
let R32MB_T32KB = R50MB_T32KB feed head[1024] consume;

#testcase Old sort algorithm - time for run generation
#yields success
query R32MB_T32KB feed sort head[1] count;

#testcase Old sort algorithm - total time
#yields success
query R32MB_T32KB feed sort count;

#testcase New sort2 algorithm
#yields success
query R32MB_T32KB feed sort2 count;

#testcase Old sortby algorithm - time for run generation
#yields success
query R32MB_T32KB feed sortby[Flob asc, Nr asc] head[1] count;

#testcase Old sortby algorithm - total time
#yields success
query R32MB_T32KB feed sortby[Flob asc, Nr asc] count;

#testcase New sortby algorithm
#yields success
query R32MB_T32KB feed sortby2[Flob asc, Nr asc] count;

#testcase Delete relation
#yields success
delete R32MB_T32KB;

#testcase Delete relation
#yields success
delete R50MB_T32KB;

#--------------------------------------------------  
# Sort 50 MB data
#--------------------------------------------------  

#testcase create relation
#yields success
restore R50MB_T32KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R50MB_T32KB';

#testcase Old sort algorithm - time for run generation
#yields success
query R50MB_T32KB feed sort head[1] count;

#testcase Old sort algorithm - total time
#yields success
query R50MB_T32KB feed sort count;

#testcase New sort2 algorithm
#yields success
query R50MB_T32KB feed sort2 count;

#testcase Old sortby algorithm - time for run generation
#yields success
query R50MB_T32KB feed sortby[Flob asc, Nr asc] head[1] count;

#testcase Old sortby algorithm - total time
#yields success
query R50MB_T32KB feed sortby[Flob asc, Nr asc] count;

#testcase New sortby2 algorithm
#yields success
query R50MB_T32KB feed sortby2[Flob asc, Nr asc] count;

#testcase Delete relation
#yields success
delete R50MB_T32KB;

#--------------------------------------------------  
# Sort 100 MB data
#--------------------------------------------------  

#testcase create relation
#yields success
restore R100MB_T32KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T32KB';

#testcase Old sort algorithm - time for run generation
#yields success
query R100MB_T32KB feed sort head[1] count;

#testcase Old sort algorithm - total time
#yields success
query R100MB_T32KB feed sort count;

#testcase New sort2 algorithm
#yields success
query R100MB_T32KB feed sort2 count;

#testcase Old sortby algorithm - time for run generation
#yields success
query R100MB_T32KB feed sortby[Flob asc, Nr asc] head[1] count;

#testcase Old sortby algorithm - total time
#yields success
query R100MB_T32KB feed sortby[Flob asc, Nr asc] count;

#testcase New sortby2 algorithm
#yields success
query R100MB_T32KB feed sortby2[Flob asc, Nr asc] count;

#testcase Delete relation
#yields success
delete R100MB_T32KB;

#--------------------------------------------------  
# Sort 200 MB data
#--------------------------------------------------  

#testcase create relation
#yields success
restore R100MB_T32KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T32KB';

#testcase create relation
#yields success
let R200MB_T32KB = R100MB_T32KB feed R100MB_T32KB feed head[2] project[Nr] {a} product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;512*1024*1024,-1,-1] remove[ran] consume;

#testcase Old sort algorithm - time for run generation
#yields success
query R200MB_T32KB feed sort head[1] count;

#testcase Old sort algorithm - total time
#yields success
query R200MB_T32KB feed sort count;

#testcase New sort2 algorithm
#yields success
query R200MB_T32KB feed sort2 count;

#testcase Old sortby algorithm - time for run generation
#yields success
query R200MB_T32KB feed sortby[Flob asc, Nr asc] head[1] count;

#testcase Old sortby algorithm - total time
#yields success
query R200MB_T32KB feed sortby[Flob asc, Nr asc] count;

#testcase New sortby2 algorithm
#yields success
query R200MB_T32KB feed sortby2[Flob asc, Nr asc] count;

#testcase Delete relation
#yields success
delete R200MB_T32KB;

#testcase Delete relation
#yields success
delete R100MB_T32KB;

#--------------------------------------------------  
# Sort 300 MB data
#--------------------------------------------------  

#testcase create relation
#yields success
restore R100MB_T32KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T32KB';

#testcase create relation
#yields success
let R300MB_T32KB = R100MB_T32KB feed R100MB_T32KB feed head[3] project[Nr] {a} product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;512*1024*1024,-1,-1] remove[ran] consume;

#testcase Old sort algorithm - time for run generation
#yields success
query R300MB_T32KB feed sort head[1] count;

#testcase Old sort algorithm - total time
#yields success
query R300MB_T32KB feed sort count;

#testcase New sort2 algorithm
#yields success
query R300MB_T32KB feed sort2 count;

#testcase Old sortby algorithm - time for run generation
#yields success
query R300MB_T32KB feed sortby[Flob asc, Nr asc] head[1] count;

#testcase Old sortby algorithm - total time
#yields success
query R300MB_T32KB feed sortby[Flob asc, Nr asc] count;

#testcase New sortby2 algorithm
#yields success
query R300MB_T32KB feed sortby2[Flob asc, Nr asc] count;

#testcase Delete relation
#yields success
delete R300MB_T32KB;

#testcase Delete relation
#yields success
delete R100MB_T32KB;

#--------------------------------------------------  
# Close and delete database
#--------------------------------------------------  

#teardown
close database;
delete database db_R1G;
