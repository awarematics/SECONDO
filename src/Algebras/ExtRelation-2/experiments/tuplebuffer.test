# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#--------------------------------------------------  
# Enable Flags
#--------------------------------------------------  

set "ERA:TraceSort" = TRUE;
#set "SI:PrintCounters" = TRUE;
set "SI:PrintCmdTimes" = TRUE;
set "SI:NoQueryTimers" = TRUE;
set "SI:NoCommandEcho" = TRUE;
#set "SI:RelStatistics" = TRUE;
set "SMI:NoTransactions" = TRUE;

#--------------------------------------------------  
# Create and open database DB_R1G
#--------------------------------------------------  

#setup tuplebuffer2 StandardAlgebra RelationAlgebra ExtRelation2Algebra

create database db_R1G;
open database db_R1G;

#--------------------------------------------------  
# Create relation with 1 GB data and 64 Byte tuples
#--------------------------------------------------  

#testcase create_relation
#yields success
restore R100MB_T64B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T64B';

#testcase create_relation
#yields success
let ten = R100MB_T64B feed head[10] project [Nr] {a} consume; 

#testcase create_relation
#yields success
let R1G_T64B = R100MB_T64B feed ten feed product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;512*1024*1024,-1,-1] remove[ran] consume;

#--------------------------------------------------  
# Perform tests on this relation
#--------------------------------------------------  

#testcase tuplesize_R1G_T64B
#yields (real 64.0)
query R1G_T64B feed head[1] tuplesize;

#--------------------------------------------------  

#testcase tuplebuffer_small_tuplesize_write_1
#yields success
query R1G_T64B feed tuplebuffer[16*1024] head[1] count;

#testcase tuplebuffer_small_tuplesize_total_1
#yields success
query R1G_T64B feed tuplebuffer[16*1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_1
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 0] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_1
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 0] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_2
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 1024] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_2
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_3
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 2048] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_3
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 2048] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_4
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 4096] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_4
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 4096] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_5
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 8192] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_5
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 8192] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_6
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 16384] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_6
#yields success
query R1G_T64B feed tuplebuffer2[16*1024, 16384] count;

#--------------------------------------------------  
# Create relation with 1 GB data and 128 Byte tuples
#--------------------------------------------------  

#testcase create_relation
#yields success
restore R100MB_T128B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T128B';

#testcase create_relation
#yields success
let R1G_T128B = R100MB_T128B feed ten feed product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;512*1024*1024,-1,-1] remove[ran] consume;

#--------------------------------------------------  
# Perform tests on this relation
#--------------------------------------------------  

#testcase tuplesize_R1G_T128B
#yields (real 128.0)
query R1G_T128B feed head[1] tuplesize;

#--------------------------------------------------  

#testcase tuplebuffer_small_tuplesize_write_1
#yields success
query R1G_T128B feed tuplebuffer[16*1024] head[1] count;

#testcase tuplebuffer_small_tuplesize_total_1
#yields success
query R1G_T128B feed tuplebuffer[16*1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_1
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 0] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_1
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 0] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_2
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 1024] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_2
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_3
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 2048] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_3
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 2048] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_4
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 4096] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_4
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 4096] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_5
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 8192] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_5
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 8192] count;

#--------------------------------------------------  

#testcase tuplebuffer2_small_tuplesize_write_6
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 16384] head[1] count;

#testcase tuplebuffer2_small_tuplesize_total_6
#yields success
query R1G_T128B feed tuplebuffer2[16*1024, 16384] count;

#--------------------------------------------------  
# Create relation with 1 GB data and 256 Byte tuples
#--------------------------------------------------  

#testcase create_relation
#yields success
restore R100MB_T256B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T256B';

#testcase create_relation
#yields success
let R1G_T256B = R100MB_T256B feed ten feed product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;512*1024*1024,-1,-1] remove[ran] consume;

#--------------------------------------------------  
# Perform tests on this relation
#--------------------------------------------------  

#testcase tuplesize_R1G_T256B
#yields (real 256.0)
query R1G_T256B feed head[1] tuplesize;

#--------------------------------------------------  

#testcase tuplebuffer_medium_tuplesize_write_1
#yields success
query R1G_T256B feed tuplebuffer[16*1024] head[1] count;

#testcase tuplebuffer_medium_tuplesize_total_1
#yields success
query R1G_T256B feed tuplebuffer[16*1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_1
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 0] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_1
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 0] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_2
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 1024] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_2
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_3
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 2048] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_3
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 2048] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_4
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 4096] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_4
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 4096] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_5
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 8192] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_5
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 8192] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_6
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 16384] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_6
#yields success
query R1G_T256B feed tuplebuffer2[16*1024, 16384] count;

#--------------------------------------------------  
# Create relation with 1 GB data and 512 Byte tuples
#--------------------------------------------------  

#testcase create_relation
#yields success
restore R100MB_T512B from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T512B';

#testcase create_relation
#yields success
let R1G_T512B = R100MB_T512B feed ten feed product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;512*1024*1024,-1,-1] remove[ran] consume;

#--------------------------------------------------  
# Perform tests on this relation
#--------------------------------------------------  

#testcase tuplesize_R1G_T512B
#yields (real 512.0)
query R1G_T512B feed head[1] tuplesize;

#--------------------------------------------------  

#testcase tuplebuffer_medium_tuplesize_write_1
#yields success
query R1G_T512B feed tuplebuffer[16*1024] head[1] count;

#testcase tuplebuffer_medium_tuplesize_total_1
#yields success
query R1G_T512B feed tuplebuffer[16*1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_1
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 0] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_1
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 0] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_2
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 1024] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_2
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_3
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 2048] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_3
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 2048] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_4
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 4096] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_4
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 4096] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_5
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 8192] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_5
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 8192] count;

#--------------------------------------------------  

#testcase tuplebuffer2_medium_tuplesize_write_6
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 16384] head[1] count;

#testcase tuplebuffer2_medium_tuplesize_total_6
#yields success
query R1G_T512B feed tuplebuffer2[16*1024, 16384] count;

#--------------------------------------------------  
# Create relation with 1 GB data and 1024 Byte tuples
#--------------------------------------------------  

#testcase create_relation
#yields success
restore R100MB_T1KB from '$(SECONDO_BUILD_DIR)/Algebras/ExtRelation-2/experiments/R100MB_T1KB';

#testcase create_relation
#yields success
let R1G_T1KB = R100MB_T1KB feed ten feed product remove[Nr_a] extend[ran: randint(50000)] sortby2Param[ran asc;512*1024*1024,-1,-1] remove[ran] consume;

#--------------------------------------------------  
# Perform tests on this relation
#--------------------------------------------------  

#testcase tuplesize_R1G_T1KB
#yields (real 1024.0)
query R1G_T1KB feed head[1] tuplesize;

#--------------------------------------------------  

#testcase tuplebuffer_big_tuplesize_write_1
#yields success
query R1G_T1KB feed tuplebuffer[16*1024] head[1] count;

#testcase tuplebuffer_big_tuplesize_total_1
#yields success
query R1G_T1KB feed tuplebuffer[16*1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_big_tuplesize_write_1
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 0] head[1] count;

#testcase tuplebuffer2_big_tuplesize_total_1
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 0] count;

#--------------------------------------------------  

#testcase tuplebuffer2_big_tuplesize_write_2
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 1024] head[1] count;

#testcase tuplebuffer2_big_tuplesize_total_2
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 1024] count;

#--------------------------------------------------  

#testcase tuplebuffer2_big_tuplesize_write_3
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 2048] head[1] count;

#testcase tuplebuffer2_big_tuplesize_total_3
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 2048] count;

#--------------------------------------------------  

#testcase tuplebuffer2_big_tuplesize_write_4
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 4096] head[1] count;

#testcase tuplebuffer2_big_tuplesize_total_4
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 4096] count;

#--------------------------------------------------  

#testcase tuplebuffer2_big_tuplesize_write_5
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 8192] head[1] count;

#testcase tuplebuffer2_big_tuplesize_total_5
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 8192] count;

#--------------------------------------------------  

#testcase tuplebuffer2_big_tuplesize_write_6
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 16384] head[1] count;

#testcase tuplebuffer2_big_tuplesize_total_6
#yields success
query R1G_T1KB feed tuplebuffer2[16*1024, 16384] count;

##############################################################################
# TearDown
##############################################################################

#teardown
close database;
delete database db_R1G;
