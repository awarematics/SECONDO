Database : berlintest
Restore  : No

Operator : <
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" < 'TestB'
Result   : TRUE

Operator : <
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' < 'TestB'
Result   : TRUE

Operator : <
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' < "TestB"
Result   : TRUE

Operator : <=
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" <= 'TestB'
Result   : TRUE

Operator : <=
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' <= 'TestB'
Result   : TRUE

Operator : <=
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' <= "TestB"
Result   : TRUE

Operator : =
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" = 'TestB'
Result   : FALSE

Operator : =
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' = 'TestB'
Result   : FALSE

Operator : =
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' = "TestB"
Result   : FALSE

Operator : >=
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" >= 'TestB'
Result   : FALSE

Operator : >=
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' >= 'TestB'
Result   : FALSE

Operator : >=
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' >= "TestB"
Result   : FALSE

Operator : >
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" > 'TestB'
Result   : FALSE

Operator : >
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' > 'TestB'
Result   : FALSE

Operator : >
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' > "TestB"
Result   : FALSE

Operator : #
Number   : 1
Signature: string x text -> bool
Example  : query "TestA" # 'TestB'
Result   : TRUE

Operator : #
Number   : 2
Signature: text x text -> bool
Example  : query 'TestA' # 'TestB'
Result   : TRUE

Operator : #
Number   : 3
Signature: text x string -> bool
Example  : query 'TestA' # "TestB"
Result   : TRUE

Operator : contains
Number   : 1
Signature: text x text -> bool
Example  : query 'hello world' contains 'hell'
Result   : TRUE

Operator : contains
Number   : 2
Signature: text x text -> bool
Example  : query 'hello world' contains 'o w'
Result   : TRUE

Operator : contains
Number   : 3
Signature: text x text -> bool
Example  : query 'hello world' contains 'ld'
Result   : TRUE

Operator : contains
Number   : 4
Signature: text x text -> bool
Example  : query 'hello world' contains 'lox'
Result   : FALSE

Operator : contains
Number   : 5
Signature: text x string -> bool
Example  : query 'hello world' contains "lox"
Result   : FALSE

Operator : contains
Number   : 6
Signature: text x string -> bool
Example  : query 'hello world' contains " wo"
Result   : TRUE

Operator : contains
Number   : 7
Signature: string x text -> bool
Example  : query "hello world" contains " wo"
Result   : TRUE

Operator : contains
Number   : 8
Signature: string x text -> bool
Example  : query "hello world" contains "lox"
Result   : FALSE

Operator : contains
Number   : 9
Signature: string x string -> bool
Example  : query "hello world" contains " wo"
Result   : TRUE

Operator : contains
Number   : 10
Signature: string x string -> bool
Example  : query "hello world" contains "lox"
Result   : FALSE

Operator : contains
Number   : 11
Signature: string x string -> bool
Example  : query [const string value undef] contains "lox"
Result   : (bool undefined)

Operator : contains
Number   : 12
Signature: string x text -> bool
Example  : query "hello world" contains [const text value undef]
Result   : (bool undefined)

Operator : contains
Number   : 13
Signature: string x text -> bool
Example  : query [const string value undef] contains 'lox'
Result   : (bool undefined)

Operator : contains
Number   : 14
Signature: text x text -> bool
Example  : query [const text value undef] contains [const text value undef]
Result   : (bool undefined)

Operator : dice
Number   : 1
Signature: int x text x text -> real
Example  : query dice(1, 'abc', 'bac')
Result   : 0.5

Operator : keywords
Number   : 1
Signature: text -> stream(string)
Example  : query 'two keys' keywords count
Result   :  2

Operator : length
Number   : 1
Signature: text -> int
Example  : query length('hello')
Result   : 5

Operator : sentences
Number   : 1
Signature: text -> stream(text)
Example  : query 'First sentence. Second sentence.' sentences count
Result   : 2

Operator : getcatalog
Number   : 1
Signature: -> stream(tuple((ObjectName string)(Type text)(TypeExpr text)))
Example  : query getcatalog() count >= 9
Result   : TRUE
Remark   : We have 9 system tables at least.

Operator : substr
Number   : 1
Signature: text x int x int -> string
Example  : query substr('123456789A123456789B123456789C', 10, 20)
Result   : "A123456789B"

Operator : subtext
Number   : 1
Signature: text x int x int -> text
Example  : query subtext('123456789A123456789B123456789C', 10, 20)
Result   : 'A123456789B'

Operator : isempty
Number   : 1
Signature: text -> bool
Example  : query isempty('')
Result   : TRUE


Operator : trim
Number   : 1
Signature: text -> text
Example  : query trim('   hello you   ')
Result   : 'hello you'

Operator : +
Number   : 1
Signature: text x text -> text
Example  : query ('Hello' + ' world!')
Result   : 'Hello world!'

Operator : +
Number   : 2
Signature: text x string -> text
Example  :query ('Hello' + " world!")
Result   : 'Hello world!'

Operator : +
Number   : 3
Signature: string x text -> text
Example  : query ("Hello" + ' world!')
Result   : 'Hello world!'

Operator : find
Number   : 1
Signature: text x text -> stream(int)
Example  : query find('12345678901234567890123456789012345678901234567890', '12345678901234567890123456789012345678901234567890') count
Result   : 1

Operator : find
Number   : 2
Signature: text x text -> stream(int)
Example  : query find('12345678901234567890123456789012345678901234567890', '1234567890') count
Result   : 5

Operator : find
Number   : 3
Signature: text x string -> stream(int)
Example  : query find('12345678901234567890123456789012345678901234567890', "1234567890") count
Result   : 5

Operator : find
Number   : 4
Signature: string x text -> stream(int)
Example  : query find("12345678901234567890123456789012345678901234567890", '1234567890') count
Result   : 4

Operator : find
Number   : 5
Signature: string x string -> stream(int)
Example  : query find("12345678901234567890123456789012345678901234567890", "1234567890") count
Result   : 4

Operator : evaluate
Number   : 1
Signature: text -> stream(tuple((CmdStr text) (Success bool) (Evaluable bool) (Defined bool) (IsFunction bool) (ResultType text) (Result text) (ErrorMessage text) (ElapsedTimeReal real) (ElapsedTimeCPU real)))
Example  : query evaluate('ten feed filter[.No > 5] count') filter[.Result = '5'] count = 1
Result   : TRUE

Operator : evaluate
Number   : 2
Signature: text x bool -> stream(tuple((CmdStr text) (Success bool) (Evaluable bool) (Defined bool) (IsFunction bool) (ResultType text) (Result text) (ErrorMessage text) (ElapsedTimeReal real) (ElapsedTimeCPU real)))
Example  : query evaluate('(count (feed ten))', TRUE) filter[.Result = '10'] count = 1
Result   : TRUE


Operator : replace
Number   : 1
Signature: text x text x string -> text
Example  : query replace('abab','a',"c")
Result   : 'cbcb'

Operator : replace
Number   : 2
Signature: text x string x text -> text
Example  : query replace('abab',"a",'c')
Result   : 'cbcb'

Operator : replace
Number   : 3
Signature: text x string x string -> text
Example  : query replace('abab',"a","c")
Result   : 'cbcb'

Operator : replace
Number   : 4
Signature: string x text x text -> text
Example  : query replace("abab",'a','c')
Result   : 'cbcb'

Operator : replace
Number   : 5
Signature: string x text x string -> text
Example  : query replace("abab",'a',"c")
Result   : 'cbcb'

Operator : replace
Number   : 6
Signature: string x string x text -> text
Example  : query replace("abab","a",'c')
Result   : 'cbcb'

Operator : replace
Number   : 7
Signature: string x string x string -> text
Example  : query replace("abab","a","c")
Result   : 'cbcb'

Operator : replace
Number   : 8
Signature: text x text x text -> text
Example  : query replace('abab','a','c')
Result   : 'cbcb'

Operator : replace
Number   : 9
Signature: text x int x int x text -> text
Example  : query replace('abab',2,3,'c')
Result   : 'acb'

Operator : replace
Number   : 10
Signature: text x int x int x string -> text
Example  : query replace('abab',2,2,"c")
Result   : 'acab'

Operator : replace
Number   : 11
Signature: string x int x int x text -> text
Example  : query replace("abab",5,10,'c')
Result   : 'abab'

Operator : replace
Number   : 12
Signature: string x int x int x string -> text
Example  : query replace("abab",4,4,"bcdef")
Result   : 'ababcdef'

Operator : getTypeNL
Number   : 1
Signature: Expr -> text
Example  : query (4 * 6) feed transformstream getTypeNL
Result   : '(stream (tuple ((Elem int))))'

Operator : getValueNL
Number   : 1
Signature: Object -> text
Example  : query (4 * 6) getValueNL
Result   : '24'

Operator : getValueNL
Number   : 2
Signature: stream(DATA) -> stream(text)
Example  : query intstream(1,10) getValueNL transformstream aggregateB[Elem; fun(T1: text, T2: text) (T1 + ' ' + T2); '']
Result   : '1 2 3 4 5 6 7 8 9 10'

Operator : getValueNL
Number   : 3
Signature: stream(tuple(X)) -> stream(text)
Example  : query ten feed getValueNL transformstream aggregateB[Elem; fun(T1: text, T2: text) (T1 + T2); '']
Result   : '(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)'

Operator : toupper
Number   : 1
Signature: text -> text
Example  : query toupper('Hello World!')
Result   : 'HELLO WORLD!'

Operator : tolower
Number   : 1
Signature: text -> text
Example  : query tolower('Hello World!')
Result   : 'hello world!'

Operator : chartext
Number   : 1
Signature: int -> text
Example  : query chartext(39)
Result   : '\''

Operator : tostring
Number   : 1
Signature: text -> string
Example  : query tostring('I"m so tired...')
Result   : "I'm so tired..."

Operator : totext
Number   : 1
Signature: string -> text
Example  : query totext("I'm so tired...")
Result   : 'I\'m so tired...'

Operator : toObject
Number   : 1
Signature: {string|text} x T -> T, where T in DATA
Example  : query toObject("42", 1)
Result   : 42

Operator : isDBObject
Number   : 1
Signature: string -> bool
Example  : query isDBObject("blablabla")
Result   : FALSE

Operator : isDBObject
Number   : 2
Signature: string -> bool
Example  : query isDBObject("train1")
Result   : TRUE

Operator : sendtextUDP
Number   : 1
Signature: {string|text}^n -> text, 3<=n<=5
Example  : query sendtextUDP("Hello World!", '132.176.69.64', '5678', "", "4321") = "OK. 12 bytes sent."
Result   : (platform (linux (bool TRUE)) (linux64 (bool TRUE)) (win32 (bool TRUE)) (mac_osx bug))

Operator : receivetextUDP
Number   : 1
Signature: {string|text} x {string|text} x real -> stream(tuple((Ok bool)(Msg text)(ErrMsg string)(SenderIP string)(SenderPort string)(SenderIPversion string)))
Example  : query receivetextUDP("",'2626',0.01) extract[ErrMsg] = 'Timeout.'
Result   : TRUE

Operator : receivetextstreamUDP
Number   : 1
Signature: {string|text} x {string|text} x real x real -> stream(tuple((Ok bool)(Msg text)(ErrMsg string)(SenderIP string)(SenderPort string)(SenderIPversion string)))
Example  : query receivetextstreamUDP("",'2626',0.08,5.0) count >= 50
Result   : TRUE


Operator : crypt
Number   : 1
Signature: string -> string
Example  : query length(crypt("Secondo"))
Result   : 13
Remark   : Salt is choosen randomly

Operator : crypt
Number   : 2
Signature: text -> string
Example  : query length(crypt('Secondo'))
Result   : 13
Remark   : Salt is choosen randomly

Operator : crypt
Number   : 3
Signature: string x string -> string
Example  : query crypt("Secondo","1A")
Result   : (platform (linux (string "1AhU2966bcBQA")) (win32 (string "1AhU2966bcBQA")) (linux64 (string "1AhU2966bcBQA")) (mac_osx bug))


Operator : crypt
Number   : 4
Signature: string x text -> string
Example  : query crypt("Secondo",'1A')
Result   : (platform (linux (string "1AhU2966bcBQA")) (win32 (string "1AhU2966bcBQA")) (linux64 (string "1AhU2966bcBQA")) (mac_osx bug))


Operator : crypt
Number   : 5
Signature: text x string -> string
Example  : query crypt('Secondo',"1A")
Result   : (platform (linux (string "1AhU2966bcBQA")) (win32 (string "1AhU2966bcBQA")) (linux64 (string "1AhU2966bcBQA")) (mac_osx bug))


Operator : crypt
Number   : 6
Signature: text x text -> string
Example  : query crypt('Secondo','1A')
Result   : (platform (linux (string "1AhU2966bcBQA")) (win32 (string "1AhU2966bcBQA")) (linux64 (string "1AhU2966bcBQA")) (mac_osx bug))


Operator : md5
Number   : 1
Signature: text  -> string
Example  : query md5('Secondo')
Result   : (string "ee1f0dc1f40c173cb97860902aa302e4")

Operator : md5
Number   : 2
Signature: string  -> string
Example  : query md5("Secondo")
Result   : (string "ee1f0dc1f40c173cb97860902aa302e4")


Operator : checkpw
Number   : 1
Signature: string x string -> bool
Example  : query checkpw("Secondo", crypt("Secondo"))
Result   : (platform (linux (bool TRUE)) (linux64 (bool TRUE)) (win32 (bool TRUE)) (mac_osx bug))


Operator : checkpw
Number   : 2
Signature: string x text -> bool
Example  : query checkpw("Secondo", totext(crypt("Secondo")))
Result   : (platform (linux (bool TRUE)) (linux64 (bool TRUE)) (win32 (bool TRUE)) (mac_osx bug))


Operator : checkpw
Number   : 3
Signature: text x string -> bool
Example  : query checkpw('Secondo', crypt("Secondo"))
Result   : (platform (linux (bool TRUE)) (linux64 (bool TRUE)) (win32 (bool TRUE)) (mac_osx bug))

Operator : checkpw
Number   : 4
Signature: text x text -> bool
Example  : query checkpw('Secondo', totext(crypt("Secondo")))
Result   : (platform (linux (bool TRUE)) (linux64 (bool TRUE)) (win32 (bool TRUE)) (mac_osx bug))


Operator : blowfish_encode
Number   : 1
Signature: string x string -> text
Example  : query blowfish_encode("TopSecret","Secondo")
Result   : (text '580f3f5dc4bb4e73')


Operator : blowfish_encode
Number   : 2
Signature: string x text -> text
Example  : query blowfish_encode("TopSecret",'Secondo')
Result   : (text '580f3f5dc4bb4e73')

Operator : blowfish_encode
Number   : 3
Signature: text x string  -> text
Example  : query blowfish_encode('TopSecret',"Secondo")
Result   : (text '580f3f5dc4bb4e73')


Operator : blowfish_encode
Number   : 4
Signature: text x text  -> text
Example  : query blowfish_encode('TopSecret','Secondo')
Result   : (text '580f3f5dc4bb4e73')


Operator : blowfish_decode
Number   : 1
Signature: string x string -> text
Example  : query blowfish_decode("TopSecret","580f3f5dc4bb4e73")
Result   : (text 'Secondo')

Operator : blowfish_decode
Number   : 2
Signature: string x text -> text
Example  : query blowfish_decode("TopSecret",'580f3f5dc4bb4e73')
Result   : (text 'Secondo')

Operator : blowfish_decode
Number   : 3
Signature: text x string -> text
Example  : query blowfish_decode('TopSecret',"580f3f5dc4bb4e73")
Result   : (text 'Secondo')

Operator : blowfish_decode
Number   : 4
Signature: text x text -> text
Example  : query blowfish_decode('TopSecret','580f3f5dc4bb4e73')
Result   : (text 'Secondo')


Operator : svg2text
Number   : 1
Signature: svg -> text
Example  : query svg2text([const svg value ''])
Result   : (text '')

Operator : text2svg
Number   : 1
Signature: text -> svg
Example  : query text2svg([const text value ''])
Result   : (svg'')

Operator : letObject
Number   : 1
Signature: {string|text} x {string|text} x bool -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query letObject("MyIntThree","3",FALSE)}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))')))

Operator : letObject
Number   : 2
Signature: {string|text} x {string|text} x bool -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query letObject("MyIntThree",'3',FALSE)}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))')))

Operator : letObject
Number   : 3
Signature: {string|text} x {string|text} x bool -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query letObject('MyIntThree','3',FALSE)}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))')))

Operator : letObject
Number   : 4
Signature: {string|text} x {string|text} x bool -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query letObject('MyIntThree',"3",FALSE)}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))')))

Operator : deleteObject
Number   : 1
Signature: {string|text} -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query letObject('MyIntThree',"3",FALSE) | query deleteObject("MyIntThree")}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))') (text '(OBJECT MyIntThree () (int))')))

Operator : deleteObject
Number   : 2
Signature: {string|text} -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query letObject('MyIntThree',"3",FALSE) | query deleteObject('MyIntThree')}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))') (text '(OBJECT MyIntThree () (int))')))

Operator : createObject
Number   : 1
Signature: {string|text} x {string|text} x bool -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query createObject("MyIntThree","int",TRUE)}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))')))

Operator : createObject
Number   : 2
Signature: {string|text} x {string|text} x bool -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query createObject("MyIntThree",'int',TRUE)}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))')))

Operator : createObject
Number   : 3
Signature: {string|text} x {string|text} x bool -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query createObject('MyIntThree',"int",TRUE)}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))')))

Operator : createObject
Number   : 4
Signature: {string|text} x {string|text} x bool -> text
Example  : {query isdefined(deleteObject("MyIntThree")) | query createObject('MyIntThree','int',TRUE)}
Result   : (resultsequence ((bool TRUE) (text '(OBJECT MyIntThree () (int))')))

Operator : getObjectTypeNL
Number   : 1
Signature: {string|text}  -> text
Example  : query getObjectTypeNL("ten")
Result   : (text '(rel (tuple ((No int))))')

Operator : getObjectTypeNL
Number   : 2
Signature: {string|text}  -> text
Example  : query getObjectTypeNL('ten')
Result   : (text '(rel (tuple ((No int))))')

Operator : getObjectValueNL
Number   : 1
Signature: {string|text}  -> text
Example  : query getObjectValueNL("ten")
Result   : (text '((1) (2) (3) (4) (5) (6) (7) (8) (9) (10))')

Operator : getObjectValueNL
Number   : 2
Signature: {string|text}  -> text
Example  : query getObjectValueNL('ten')
Result   : (text '((1) (2) (3) (4) (5) (6) (7) (8) (9) (10))')

Operator : getDatabaseName
Number   : 1
Signature: -> string
Example  : query getDatabaseName()
Result   : "BERLINTEST"


Operator : matchingOperatorNames
Number   : 1
Signature: any -> stream(string)
Example  : query matchingOperators(Trains) count > 4;
Result   : TRUE


Operator : matchingOperators
Number   : 1
Signature: ANY -> stream(tuple([ OperatorName: string, OperatorId: int, AlgebraName : string, AlgebraId: int, ResultType : text,Signature : text, Syntax : text, Meaning : text, Example : text, Remark : text]))
Example  : query matchingOperators(Trains) filter[.OperatorName contains "matchingOp"] count > 1
Result   : TRUE


Operator : sys_getMatchingOperators
Number   : 1
Signature: int x ANY -> stream(tuple([ OperatorName: string, OperatorId: int, AlgebraName : string, AlgebraId: int, ResultType : text, Signature  : text, Syntax : text, Meaning : text, Example : text, Remark : text]))
Example  : query sys_getMatchingOperators(0, "Test") count < 0
Result   : FALSE

Operator : checkOperatorTypeMap
Number   : 1
Signature: string x ANY -> text
Example  : query checkOperatorTypeMap("+",1,1)
Result   : (text 'int')

Operator : checkOperatorTypeMap2
Number   : 1
Signature: string x text -> text
Example  : query checkOperatorTypeMap2("+",'(int int)')
Result   : (text 'int')


Operator : checkOperatorTypeMap2
Number   : 2
Signature: string x string -> text
Example  : query checkOperatorTypeMap2("+","(int int)")
Result   : (text 'int')

Operator : strequal
Number   : 1
Signature: string x string -> bool
Example  : query strequal("hello","HELLO", FALSE)
Result   : TRUE


Operator : strequal
Number   : 2
Signature: string x string -> bool
Example  : query strequal("hello","HELLO", TRUE)
Result   : FALSE

Operator : strequal
Number   : 3
Signature: string x text -> bool
Example  : query strequal("hello",'HELLO', FALSE)
Result   : TRUE


Operator : strequal
Number   : 4
Signature: string x text -> bool
Example  : query strequal("hello",'HELLO', TRUE)
Result   : FALSE

Operator : strequal
Number   : 5
Signature: text x string -> bool
Example  : query strequal('hello',"HELLO", FALSE)
Result   : TRUE


Operator : strequal
Number   : 6
Signature: text x string -> bool
Example  : query strequal('hello',"HELLO", TRUE)
Result   : FALSE

Operator : strequal
Number   : 7
Signature: text x text -> bool
Example  : query strequal('hello','HELLO', FALSE)
Result   : TRUE


Operator : strequal
Number   : 8
Signature: text x text -> bool
Example  : query strequal('hello','HELLO', TRUE)
Result   : FALSE


Operator : strequal
Number   : 9
Signature: text x text -> bool
Example  : query strequal('hello','HELLO', [const bool value undef])
Result   : (bool undefined)

Operator : sys_getAlgebraName
Number   : 1
Signature: int -> string
Example  : query sys_getAlgebraName(1)
Result   : (string "StandardAlgebra")

Operator : sys_getAlgebraName
Number   : 2
Signature: int -> string
Example  : query sys_getAlgebraName(0)
Result   : (string undefined)

Operator : sys_getAlgebraId
Number   : 1
Signature: string -> int
Example  : query sys_getAlgebraId("StandardAlgebra")
Result   : (int 1)

Operator : sys_getAlgebraId
Number   : 2
Signature: text -> int
Example  : query sys_getAlgebraId('RelationAlgebra')
Result   : (int 3)

Operator : sys_getAlgebraId
Number   : 3
Signature: text -> int
Example  : query sys_getAlgebraId('blablabla')
Result   : (int undefined)


Operator : tokenize
Number   : 1
Signature: text x string -> stream(text)
Example  : query tokenize('Hello World', " ") count
Result   : 2


Operator : sendtextstreamTCP
Number   : 1
Signature: stream({string|text}) x {string|text} x {string|text} x {int|real} x {int|real} -> stream(tuple((Ok bool)(Msg text)(ErrMsg string)))
Example  : query plz feed head[3] getValueNL sendtextstreamTCP['localhost',"2134",1,1] count
Result   : 0
Remark   : No maeningful test with only 1 terminal!

Operator : charToText
Number   : 1
Signature: int -> text
Example  : query ('Hello' + charToText( 32 ) + 'world!')
Result   : (text 'Hello world!')

Operator  : attr2text
Number    : 1
Signature : DATA -> text
Example   : query attr2text(32)
Result    : (text '32')

Operator  : isValidID
Number    : 1
Signature : string -> bool
Example   : query isValidID("query")
Result    : FALSE

Operator  : isValidID
Number    : 2
Signature : string x bool -> bool
Example   : query isValidID("mehringdamm", TRUE)
Result    : FALSE

Operator  : trimAll
Number    : 1
Signature : stream(string) -> stream(string)
Example   : query strassen feed projecttransformstream[Name] trimAll  count = strassen count
Result    : TRUE


Operator  : trimAll
Number    : 2
Signature : stream(text) -> stream(text)
Example   : query strassen feed extend [TName :  '   ' + .Name] projecttransformstream[TName] trimAll count  = strassen count
Result    : TRUE


Operator  : trimAll
Number    : 3
Signature : stream(tuple(X)) -> stream(tuple(X))
Example   : query strassen feed count  = strassen count
Result    : TRUE



Operator  : str2real 
Number    : 1
Signature : text -> real
Example   : query str2real('3.14')
Result    : 3.14

Operator  : cn2en 
Number    : 1
Signature : string -> string
Example   : query cn2en('中国')
Result    : 'ZHONG GUO '

Operator  : str2real 
Number    : 2
Signature : string -> real
Example   : query str2real("3.14")
Result    : 3.14


Operator  : str2int 
Number    : 1
Signature : text -> int
Example   : query str2int('3')
Result    : 3


Operator  : str2int 
Number    : 2
Signature : string -> int
Example   : query str2int("3")
Result    : 3


Operator  : recode 
Number    : 1
Signature : text x string x string -> text
Example   : query 'Hello' recode ["latin1", "utf8"]
Result    : unpredictable
Remark    : Operator not available without Recode library


Operator  : recode
Number    : 2
Signature : string x string x string -> string
Example   : query  "Hello" recode ["utf8","latin1"]
Result    : unpredictable
Remark    : Operator not available without Recode library

Operator  : endsWith
Number    : 1 
Signature : string x string -> bool
Example   : query "Hello" endsWith "llo"
Result    : TRUE

Operator  : endsWith
Number    : 2
Signature : string x text -> bool
Example   : query "Hello" endsWith 'llo'
Result    : TRUE


Operator  : endsWith
Number    : 3 
Signature : text x string -> bool
Example   : query 'Hello' endsWith "llo"
Result    : TRUE

Operator  : endsWith
Number    : 4 
Signature : text x text -> bool
Example   : query 'Hello' endsWith 'llo'
Result    : TRUE

Operator  : startsWith
Number    : 1 
Signature : string x string -> bool
Example   : query "Hello" startsWith "llo"
Result    : FALSE

Operator  : startsWith
Number    : 2
Signature : string x text -> bool
Example   : query "Hello" startsWith 'Hell'
Result    : TRUE


Operator  : startsWith
Number    : 3 
Signature : text x string -> bool
Example   : query 'Hello' startsWith "llo"
Result    : FALSE

Operator  : startsWith
Number    : 4 
Signature : text x text -> bool
Example   : query 'Hello' startsWith 'Hell'
Result    : TRUE


Operator  : markText
Number    : 1
Signature : stream(tuple) x ai x aj x text x string x string -> text
Example   : query 6 feed namedtransformstream[A] extend[ B : 5 + .A] markText[A,B,'Hello World',"<start>","<end>"]
Result    : (text 'Hello <start>World<end>')


Operator  : bashModifier
Number    : 1
Signature : string -> string
Example   : query bashModifier("UnKnown")
Result    : ""


Operator  : getBashModifiers
Number    : 1
Signature : -> text
Example   : query getBashModifiers() contains "NORMAL"
Result    : TRUE

Operator  : pointerTest
Number    : 1
Signature : int x int -> int
Example   : query pointerTest(3,8)
Result    : 11


Operator  : getQueryNL
Number    : 1
Signature : text -> text
Example   : query getQueryNL('query ten feed count') startsWith('(query')
Result    : TRUE


Operator  : getOpTreeNL
Number    : 1
Signature : text -> text
Example   : query length(getOpTreeNL('query ten feed count')) > 10
Result    : TRUE

Operator : getOpName
Number   : 1
Signature : int x int -> text
Example   : query getOpName(1,0);
Result    : "+"

Operator : regexmatches
Number   : 1
Signature: text x regex -> bool
Example  : query regexmatches('Secondo',[const regex value '.*cond.*'])
Result   : TRUE

Operator : startsreg
Number   : 1
Signature: text x regex -> bool
Example  : query startsreg('Secondo',[const regex value '.*cond'])
Result   : TRUE

Operator : findPattern
Number   : 1
Signature: text x regex -> stream(tuple((P1 int, P2 int)))
Example  : query findPattern('Secondo',[const regex value 'o']) count
Result   : 2
Remark   : find pattern regex in text with minimum length, the empty word is ignored

Operator : findPattern
Number   : 2
Signature: text x regex x bool -> stream(tuple((P1 int, P2 int)))
Example  : query findPattern('Secondo',[const regex value 'o'],TRUE) count
Result   : 2
Remark   : if the boolean parameter is set to TRUE, pattern with maximum length are searched, the empty word is ignored

Operator : findPattern
Number   : 3
Signature: text x regex x bool x bool -> stream(tuple((P1 int, P2 int)))
Example  : query findPattern('Secondo',[const regex value 'o'],FALSE, TRUE) count
Result   : 2


Operator : createRegEx
Number   : 1
Signature: {text,string} -> regex
Example  : query regexmatches('Secondo',createRegEx('.*cond.*') )
Result   : TRUE

Operator : createRegEx2
Number   : 1
Signature: {text,string} -> regex2
Example  : query regexmatches('Secondo',createRegEx2('.*cond.*') )
Result   : TRUE

Operator  : numOfFlobs
Number    : 1
Signature : DATA -> int
Example   : query numOfFlobs(1)
Result    : 0


Operator  : flobSize 
Number    : 1
Signature : DATA x int -> int
Example   : query flobSize(thecenter,0) > 0 
Result    : TRUE

Operator  : flobMemSize 
Number    : 1
Signature : DATA x int -> int
Example   : query flobMemSize(thecenter,0) > 0 
Result    : FALSE

Operator : sizeOf
Number : 1
Signature : DATA -> int
Example : query sizeOf(1) > 0
Result : TRUE

Operator : tmcheck
Number   : 1 
Signature: text x stream [ x bool]-> stream(tuple([Algname: string, OpName: string, ArgList : text]))
Example : query 'query ten feed filter[.No > 3] count' tmcheck["FTextAlgebra",FALSE]  count
Result   : 0
Remark   : string is the algebra name, if empty or undefined, all algebras are checked, bool argument enables verbose mode

Operator  : getObject
Number    : 1 
Signature : {string, text} -> X
Example   : query getObject("ten") feed count
Result    : 10

Operator: flobInfo
Number : 1
Signature: DATA -> stream(text)
Example  : query flobInfo(msnow) count
Result   : 2

Operator  : correctFileId
Number    : 1
Signature : -> bool
Example   : query correctFileId()
Result    : TRUE

Operator : charCodes
Number   : 1
Signature : string x string -> stream(longint)
Example   : query charCodes("abc","ASCII") count
Result    : 3

Operator : charCodes
Number   : 2
Signature : text x string -> stream(longint)
Example   : query charCodes('abc',"UTF-8") count
Result    : 3

Operator : morseWav
Number   : 1
Signature : text x text -> bool
Example   : query morseWav('abcd','abcd.wav',40,440);
Result    : TRUE

Operator : morseWav
Number   : 2
Signature : string x text -> bool
Example   : query morseWav("abcd",'abcd.wav',40,440);
Result    : TRUE

Operator : computeRegEx
Number   : 1 
Signature : regex -> text
Example   : query computeRegEx( [const regex value "a"] )
Result    : (text 'a')

Operator : computeRegEx
Number   : 2 
Signature : regex2 -> text
Example   : query computeRegEx( [const regex2 value "a"] )
Result    : (text 'a')

Operator  : letObject2
Number    : 1
Signature : {string,text} x any -> bool
Example   : query letObject2("BGrenzenLine", 3 + 4)
Result    : FALSE

Operator : globalMemory
Number : 1
Signature : -> longint
Example  : query globalMemory() > 0
Result   : TRUE

Operator : fileExtension 
Number : 1
Signature : string -> string
Example  : query fileExtension("Secondo.exe")
Result   : "exe"

Operator : fileExtension 
Number : 2 
Signature : text -> test
Example  : query fileExtension('/home/user/secondo/secondo')
Result   : 'secondo'


Operator : maskBackslash 
Number : 1
Signature : T -> T for T in {string,text}
Example  : query "bin\\tmp" maskBackslash
Result   : "bin\\\\tmp"




