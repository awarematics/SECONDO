#!/bin/bash

bin=`dirname "$0"`
bin=`cd "$bin"; pwd`
source $bin/ps-functions

ADDPAR="" # Additional startup parameters for each slave
SLONLY=false
# Process the parameters
declare -i numOfArgs=$#
let numOfArgs++

while [ $numOfArgs -ne $OPTIND ]; do
  
  getopts "hso" optKey
  if [ "$optKey" == "?" ]; then
    optKey="h"
  fi

  case $optKey in
    h)
      echo -en "\nUsage of ${0##*/}:\n\n"
      echo -en "Switch off all Secondo Monitors inside the cluster.\n"
      echo -en "Machine's IP addresses are listed in the file\n$PARALLEL_SECONDO_SLAVES \n$PARALLEL_SECONDO_MASTER\n\n"
      echo -en "  -h Print this message and exit. \n\n"
      echo -en "  -s Switch off the monitors only on Slave nodes. \n\n"
      echo -en "  -o Switch off Monitors based on node's Own configuration \n"
      echo -en "     $HOME/.parasecrc \n\n"
      exit 0;;
    s)
      SLONLY=true
      ;;
    o)
      ADDPAR=" -o"
      ;;
  esac
done

aJobs=()
Status="/tmp/.ps-stop-AllMonitors.${USER}.data"
cat /dev/null > $Status

function stopNodeMonitors
{
  IPAddr=$1
  ssh $IPAddr "ps-stopMonitors ${ADDPAR}" >/dev/null
  if [ $? -ne 0 ]; then
    echo -e "Switch OFF Monitor on $IPAddr ... ... FAIL." >> $Status
  else
    echo -e "Switch OFF Monitor on $IPAddr ... ... Done." >> $Status
  fi
}

if $SLONLY ; then
  IPLIST=($(get_slaveIPs))
else
  IPLIST=($(get_slaveIPs -m))
fi
NDNUM=${#IPLIST[*]}

for ((NDIDX=0;NDIDX<$NDNUM;));do
  IPAddr=${IPLIST[$NDIDX]}
    
  for((token=1;token<=$PS_PIPE_Width;token++)); do
    if [ $NDIDX -gt $NDNUM ]; then
      break
    fi
    
    if [ ! "${aJobs[$token]}" ] || ! kill -0 ${aJobs[$token]} 2>/dev/null; then
      stopNodeMonitors $IPAddr &
      aJobs[$token]=$!
      let NDIDX++
      break
    fi
  done    
done

for ((token=1;token<=$PS_PIPE_Width;));do
  if ! kill -0 ${aJobs[$token]} 2>/dev/null; then
    let token++
  fi
done

cat $Status | sort | cat -n
RT=$(grep "FAIL" $Status | wc -l)
exit $RT
