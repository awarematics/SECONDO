Determination of cost function for windowintersects
===================================================

Database berlintest. Used relations Trains and UnitTrains.

We need to determine constants 

- ms per search
- ms per result tuple

1. Build a 3D R-tree index on UnitTrains using SecondoTTYNT.

	let UnitTrains_UTrip_sptmpuni = UnitTrains creatertree[UTrip]

2. Query with few results (small query boxes)

	query UnitTrains feed head[562] loopjoin[UnitTrains_UTrip_sptmpuni 
UnitTrains windowintersects[.UTrip] {second}] count

returns 2078 tuples

time (elapsed): 0.53, 0.52, 0.46 => 0.5 seconds


3. Query with many results (large query boxes)

	 query Trains feed loopjoin[UnitTrains_UTrip_sptmpuni UnitTrains 
windowintersects[bbox(.Trip)] {second}] count

returns 2273496 tuples
 
time (elapsed): 3:29 min (209 seconds),  3:43min (223.217sec), 3:29min 
(208.692sec) => 210 seconds


4. Time per result tuple

The two queries have the same amount of searches (562). The time for the large 
query can be completely counted towards the result tuples since the time for 
searches is less than 0.5 seconds.

Time per result tuple: 210 seconds / 2273496 = 0.09237 ms per tuple => 0.092 ms/
tuple



5. Empty loopjoin cost

let emptyrel =  ten feed filter[.no > 100] consume

	query UnitTrains feed loopjoin[emptyrel feed] count

returns 0 tuples

elapsed time:  1.1843sec, 1.17287sec, 1.18933sec => 1.18 seconds


6. Time for searches

	query UnitTrains feed loopjoin[UnitTrains_UTrip_sptmpuni UnitTrains 
windowintersects[.UTrip] {second}] count

returns 191678 tuples

elapsed time: 41.93, 42.14, 43.44 => 42 seconds

UnitTrains has 51544 tuples


7. Time per search

We subtract the time for the empty loopjoin: 42 - 1.18 = 41 seconds

The time for returning the result tuples is 191678 * 0.092 = 17634 ms

The remaining time for searches is 41 - 17.6 = 23.4 seconds

Hence the time per search is 23400 ms / 51544 = 0.45 ms per search.


8. Final result

windowintersects requires

- 0.45 ms per search
- 0.092 ms per result tuple

These results hold for a 3d R-tree with two levels, 1259 nodes, and 51544 leaf 
entries. They might be refined building a larger R-tree.


Determination of cost function for windowintersectsS
====================================================

(a) windowintersectsS (Standard)

We repeat the queries from above, modified for windowintersectsS:

1. Query with many results (large query boxes)

	 query Trains feed loopjoin[UnitTrains_UTrip_sptmpuni 
windowintersectsS[bbox(.Trip)] {second}] count

returns 2273496 tuples (containing tuple identifiers)

elapsed time: 47.88, 42.68, 42.94 seconds => 43 seconds

Hence we have 43000 / 2273496 = 0.01891 ms per result tuple => 0.019 ms/tuple

2. Result

windowintersectsS requires

- 0.019 ms per result tuple




(b) windowintersectsS (DoubleLayer)

1. create an R-tree which uses double indexing using SecondoTTYNT

	let UnitTrains_UTrip_double = Trains feed addid filter[seqinit(0)] 
projectextendstream[TID; Unit: units(.Trip)] 
extend[Grp: seqnext()] extend[low: .Grp, high: .Grp] creatertree[Unit]

(name not chosen correctly should better be Trains_Trip_unit_double or similar)


2. Query with many results (large boxes)

	query Trains feed loopjoin[UnitTrains_UTrip_double 
windowintersectsS[bbox(.Trip)] {second}] count

returns 2273496 tuples containing triples (TID, low, high).

elapsed time: 45.42, 43.85, 44.73 => 45 seconds

Hence we have 45000 / 2273496 = 0.0197933051 ms per tuple => 0.020 ms/tuple

3. Result

- 0.02 ms/tuple



Determination of cost function for gettuples
============================================

1. Query

	query Trains feed head[300] loopjoin[UnitTrains_UTrip_sptmpuni 
windowintersectsS[bbox(.Trip)] {second}] count

returns 1224789 tuples

elapsed 23.08, 22.83, 21.80 => 23 seconds


2. Extended query

	query Trains feed head[300] loopjoin[UnitTrains_UTrip_sptmpuni 
windowintersectsS[bbox(.Trip)] UnitTrains gettuples {second}] count

returns 1224789 tuples

elapsed time: 114.9, 111.17, 109.23 => 110 seconds


3. To determine the contribution of tuplesize, we create a larger version of 
UnitTrains

	let UnitTrains2 = UnitTrains feed extend[UTrip2: .UTrip] consume

Original tuples in UnitTrains have tuplesize 131. Attribute UTrip has 
size 104, so the tuplesize in UnitTrains2 is 235.

We build the same index as for UnitTrains:

	let UnitTrains2_UTrip_sptmpuni = UnitTrains2 creatertree[UTrip]


4. We repeat query 1 on this relation and index. Running times should 
be the same as before.

	query Trains feed head[300] loopjoin[UnitTrains2_UTrip_sptmpuni 
windowintersectsS[bbox(.Trip)] {second}] count

returns 1224789 tuples

elapsed time: 24.84, 26.04, 24.71 => 25 seconds



5. We repeat query 2, now with larger tuple sizes in relation UnitTrains2.

	query Trains feed head[300] loopjoin[UnitTrains2_UTrip_sptmpuni 
windowintersectsS[bbox(.Trip)] UnitTrains2 gettuples {second}] count

returns 1224789 tuples

elapsed time 117.12, 119.16, 117.46 => 118 seconds


6. We take the difference of the last query to the one on UnitTrains. 

Time difference is 118 - 110 = 8 seconds.

Hence we have 8000 / (1224789 * 104) = 0.0000628 ms/Byte

- vByte = 0.0000628 ms/Byte

We apply this to the whole size of the tuple of 235 bytes

	0.0000628 * 235 * 1224789 = 18075 ms

Hence the time for query 5 without per Byte cost is 118 - 18.075 =~ 100 seconds.

We subtract the query without gettuples:

	100 - 25 = 75 seconds

Hence the time per tuple is 75000 / 1224789 = 0.0612350372 ms

- uTuple = 0.061 ms/tuple













  

