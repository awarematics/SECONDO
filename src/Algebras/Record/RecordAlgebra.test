# This file is part of SECONDO.
#
# Copyright (C) 2004, University in Hagen, Department of Computer Science, 
# Database Systems for New Applications.
#
# SECONDO is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# SECONDO is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SECONDO; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# An example test spec for the Secondo TestRunner
# run it with : 
#
#  TestRunner -i ~/secondo/Algebras/Record/RecordAlgebra.test 
#
# By default a temporary database directory will be created. If you
# want to use existing databases run
#
#  TestRunner --no-tmp -i <file>
#
# If one of your tests (say number N ) reports an error you can run
# it directly by
#
# TestRunner -i <file> -num N 
#
# this is useful for debugging

# A test specification consists of initial commands, a section of commands
# setting up the test, a sequence of test cases, and a section of commands
# cleaning up. The TestRunner uses directives to specify these sections.
# directives are specified in comment lines, all comment lines beginning with a
# directive are interpreted as commands to the TestRunner, non-comment lines are
# passed to Secondo. The possible directives are SETUP, TESTCASE, YIELDS and
# TEARDOWN (here i have written the directives in upper case to avoid confusion,
# the real directives must be written in lower case). The meanings of those
# directives are explained the following commented examples.


# before the SETUP directive one can place Secondo commands
# which may or may not succeed
delete database recteststream;

# the SETUP directive may specify the name of the test and a
# some algebra modules which are needed for it.
# the SETUP directive must appear exactly once in a test spec

#setup RecordAlgebra

# if a command between the SETUP directive and the first
# TESTCASE directive fails, then the whole test has failed 
# and we immediately skip to the teardown
# (the whole test does not make sense anymore if the 
# SETUP has failed)

create database recteststream;
open database recteststream;

# the conventions for commands are the same as in SecondoTTYBDB

# make sure that commands are always terminated 
# (either by a semicolon or by a newline)
################################################################################################
#
# THIS AREA CONTAINS ALL TESTCASES OF GROUP RECORD RELATED TO THE DOCUMENT
#           /secondo/Algebras/Record/Dokumentation/uebersicht_testfaelle.ods 
#
# IT IS DIVIDED INTO 6 DIFFERENT AREAS:
#
# 1) Record type
# 2) IMEX E00 (attentions: possibly you have to do some additional steps before)
# 3) IMEX NMEA (attentions: possibly you have to do some additional steps before)
# 4) Record Algebra operator createRecord and attr
# 5) Record Algebra operator transformT2Rstream and transformR2Tstream
# 6) DisplayTTY
#
# TESTS FOR THE HOESE-VIEWER CANNOT BE HANDLED BY THE TESTRUNNER AND ARE DOCUMENTED HERE:
#
#
# EACH AREA IS INTRODUCED BY A SHORT DESCRIPTION.
# THE TESTCASES IN EACH AREA ARE IN LINE WITH THE ABOVE MENTIONED TEST DOCUMENT
#
################################################################################################


################################################################################################
#
# Common objects used in Record-Algebra
#
################################################################################################

let recSimple = [const record (Name: string, Age: int, Amount: real) 
                value ("Schulz" 23 28.0)];

let recNested = [const record (Coverage: string, ARCs: record (L1: line, L2: line),
                POINTSs: record (P1: point, P2: point)) value ("NRW"
                (((12.0 58.0 14.0 53.0)) ((12.0 54.0 78.0 11.0)))
                ((11.0 57.0)(15.0 55.0)))];

let relWrong = [const rel(tuple([lowercase: string])) value (("abc") ("def"))];

let relSimple = [const rel(tuple([Name: string, No: int])) value (("Meier" 1) ("Mueller" 2))];

let relWithAttr = [const rel(tuple([Name: string, Info: record (Age: int, Gender: string)]))
                  value (("Meier" (1 "f")) ("Mueller" (2 "m")))];

let TestRel = [const rel(tuple([Num: int])) value ((0) (1) (2) 
              (3) (4) (5) (6) (7) (8) (9))]

################################################################################################


################################################################################################
#
# 1) Record type testcases 
#
################################################################################################


# einfache Datentypen als Elemente
#testcase createRecord1
#yields success
let rec3 = [const record (Name: string, Age: int, Amount: real)
           value ("Schulz" 23 28.0)];

# leerer Record
#testcase recordType2
#yields success
create rec : record (Name: string, Age: int, Amount: real);

# füllen eines leeren Records
#testcase recordType3
#yields success
update rec := [const record(Name: string, Age: int, Amount: real)
            value ("Schulz" 23 28.0)];

# löschen eines Record
#testcase recordType4
#yields success
delete rec;

# leere Elemente
#testcase recordType5
#yields success
let rec5 = [const record (Name: string, Age: int, Amount: real)
            value ("Schulz" NULL 23.9)];


# Anzahl Values entspricht nicht der Anzahl der Elementliste
#testcase recordType6
#yields error
let rec6 = [const record (Name: string, Age: int, Amount: real)
            value ("Schulz" 23)];

################################################################################################
#
# 2) IMEX E00
#    attentions: possibly you have to download the folloing files with cvs to the bin path before
#                lcpoly.e00, ponet.e00, clpoint.e00
#
################################################################################################


#testcase File does not exist - text (e00types)
#yields success
query e00types('XX.e00');

#testcase File does not exist - string (e00types)
#yields success
query e00types("XX.e00");

#testcase File does exist - text (e00types)
#yields success
query e00types('ponet.e00');

#testcase File does exist - string (e00types)
#yields success
query e00types("ponet.e00");

#testcase Not a valid E00-Interchange file | missing EXP/EOS (e00types)
#yields success
query e00types('nmeaTestImport.nmea');

#testcase create types-list
#yields success
let P1 = [const record( CoverageName: string, Line1: record( LineID: int,
NumOfCoordinates:int, LineData: line ), Label1: record( PolygonID: int,
LabelPoint: point ), Polygon1: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon2: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon3: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon4: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon5: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon6: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon7: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon8: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon9: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon10: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon11: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon12: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon13: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon14: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon15: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon16: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon17: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon18: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon19: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon20: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon21: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon22: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon23: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon24: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon25: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon26: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon27: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon28: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon29: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon30: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon31: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon32: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon33: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon34: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon35: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon36: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon37: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon38: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon39: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon40: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon41: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon42: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon43: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon44: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon45: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), Polygon46: record( BoundingBox: rect,
PolygonData: region, Centroid: point , LabelPoint: point ), Polygon47: record(
BoundingBox: rect, PolygonData: region, Centroid: point , LabelPoint: point ),
Polygon48: record( BoundingBox: rect, PolygonData: region, Centroid: point ,
LabelPoint: point ), Polygon49: record( BoundingBox: rect, PolygonData: region,
Centroid: point , LabelPoint: point ), History: text, PRJ: text, TOL: text, TX7:
text, BoundingBox: rect, TIC: text ) value ()];

#testcase create a filled record with e00-data (e00import)
#yields success
let P2 = P1 e00import['ponet.e00'];

#testcase missing first arrgument (e00import)
#yields error
let P2 = e00import['ponet.e00'];

#testcase fileimport with other file - clpoint.e00 (only point-content)
#yields success
let C1 = [const record( CoverageName: string, Label1: record( PolygonID: int, LabelPoint:
point ), Label2: record( PolygonID: int, LabelPoint: point ), Label3: record(
PolygonID: int, LabelPoint: point ), Label4: record( PolygonID: int, LabelPoint:
point ), Label5: record( PolygonID: int, LabelPoint: point ), Label6: record(
PolygonID: int, LabelPoint: point ), Label7: record( PolygonID: int, LabelPoint:
point ), Label8: record( PolygonID: int, LabelPoint: point ), Label9: record(
PolygonID: int, LabelPoint: point ), Label10: record( PolygonID: int,
LabelPoint: point ), Label11: record( PolygonID: int, LabelPoint: point ),
Label12: record( PolygonID: int, LabelPoint: point ), Label13: record(
PolygonID: int, LabelPoint: point ), Label14: record( PolygonID: int,
LabelPoint: point ), Label15: record( PolygonID: int, LabelPoint: point ),
Label16: record( PolygonID: int, LabelPoint: point ), Label17: record(
PolygonID: int, LabelPoint: point ), Label18: record( PolygonID: int,
LabelPoint: point ), Label19: record( PolygonID: int, LabelPoint: point ),
Label20: record( PolygonID: int, LabelPoint: point ), Label21: record(
PolygonID: int, LabelPoint: point ), Label22: record( PolygonID: int,
LabelPoint: point ), Label23: record( PolygonID: int, LabelPoint: point ),
Label24: record( PolygonID: int, LabelPoint: point ), Label25: record(
PolygonID: int, LabelPoint: point ), Label26: record( PolygonID: int,
LabelPoint: point ), Label27: record( PolygonID: int, LabelPoint: point ),
Label28: record( PolygonID: int, LabelPoint: point ), Label29: record(
PolygonID: int, LabelPoint: point ), Label30: record( PolygonID: int,
LabelPoint: point ), Label31: record( PolygonID: int, LabelPoint: point ),
Label32: record( PolygonID: int, LabelPoint: point ), Label33: record(
PolygonID: int, LabelPoint: point ), Label34: record( PolygonID: int,
LabelPoint: point ), Label35: record( PolygonID: int, LabelPoint: point ),
Label36: record( PolygonID: int, LabelPoint: point ), Label37: record(
PolygonID: int, LabelPoint: point ), History: text, PRJ: text, TOL: text,
BoundingBox: rect, TIC: text ) value ()];

#testcase fileimport with other file - clpoint.e00 (e00import)
#yields success
let C2 = C1 e00import['clpoint.e00']

#testcase shoe the imported file content - clpoint.e00
#yields success
query C2;

#testcase types-object in wrong shape (1st-Level: ATOM or record 2nd-Level: ATOM) (e00import)
#yields success
let E1 = [const record( CoverageName: string, Label1: record( PolygonID: int, LabelPoint:
point ), Label2: record( PolygonID: int, LabelPoint: record(POINT1: point ) ), Label3: record(
PolygonID: int, LabelPoint: point )) value ()];

#testcase types-object in wrong shape (1st-Level: ATOM or record 2nd-Level: ATOM) (e00import)
#yields error
let E2 = E1 e00import['clpoint.e00']


################################################################################################
#
# 3) IMEX NMEA (attentions: possibly you have to do some additional steps before)
#
################################################################################################


#testcase File does not exist
#yields success
query nmea0183types('XX.nmea')

#testcase nmeatypes
#yields success
query nmea0183types('nmeaTestImport.nmea')

#testcase create nmeatypes
#yields success
let nmeatypes = [const record(RouteGGA:mpoint,GpsQ:mint,NoSat:mint,DrsID:mint,Hdop:mreal,AntAlt
:mreal,GeoSep:mreal,AgeGPS:mreal,SatIDs1:mint,SatIDs2:mint,SatIDs3:mint,SatIDs4
:mint,SatIDs5:mint,SatIDs6:mint,SatIDs7:mint,SatIDs8:mint,SatIDs9:mint,SatIDs10
:mint,SatIDs11:mint,SatIDs12:mint,PDOP:mreal,HDOP:mreal,VDOP:mreal,SatsInView
:mint,SatNumb1:mint,Elevation1:mint,Azimuth1:mint,SatNumb2:mint,Elevation2:mint
,Azimuth2:mint,SatNumb3:mint,Elevation3:mint,Azimuth3:mint,SatNumb4:mint
,Elevation4:mint,Azimuth4:mint,RouteRMC:mpoint,SpeedRMC:mreal) value ()]


#testcase import nmea data
#yields success
query nmeatypes nmea0183import['nmeaTestImport.nmea',1,1]

#testcase import nmea data and store it in a record
#yields success
let recordNMEA = nmeatypes nmea0183import['nmeaTestImport.nmea',1,1]

#testcase test filter option GPSQuality
#yields success
query nmeatypes nmea0183import['nmeaTestImport.nmea',2,1]

#testcase test filter option NumberOfSatelites
#yields success
query nmeatypes nmea0183import['nmeaTestImport.nmea',1,7]

#testcase File does not exist
#yields success
query nmeatypes nmea0183import['XX.nmea',1,1]


################################################################################################
#
# 4)  Record Algebra operator createRecord and attr
#
################################################################################################

#testcase createRecord without argument
#yields error
query createRecord();

#testcase createRecord with more than one argument
#yields error
query createRecord(Name, "meier");

#testcase createRecord with not unique elementname
#yields error
query createRecord([Name:"meier", Name: "mueller"])

#testcase createRecord with invalid attribute definition
#yields error
query createRecord([string "me"])

#testcase createRecord with a wrong type
#yields error
query createRecord([Name: [const name value "meier"]])

#testcase createRecord with element which is not Kind DATA
#yields error
query createRecord([Name: "meier", Xrect: [const xrectangle value (4 12 2 8)]]);

#testcase create nested record with 2 levels
#yields ((record(Name string)(Data(record(Id string)(No int)))) \
         ("meier"("test" 12)))
query createRecord([Name: "meier", Data: createRecord([Id: "test", No: 12])]);

#testcase create nested record with 3 levels
#yields ((record(Name1 string)(Data1(record(Name2 string)(Data2(record \
         (Name3 string)(No int))))))("ebene1"("ebene2"("ebene3" 2))))
query createRecord([Name1: "ebene1", Data1: createRecord([Name2: "ebene2", 
                   Data2: createRecord([Name3: "ebene3", No: 2])])]);

#testcase create record with not capital element name
#yields error
query createRecord([name: "meier"]);

#testcase attr without argument
#yields error
query attr();

#testcase attr with only one argument
#yields error
query attr(recSimple);

#testcase attr with argument which is not an record1
#yields error
query attr([const string value "record"], name)

#testcase attr with argument which is not an record2
#yields error
query attr(relSimple, Name);

#testcase attr with second argument ist not an identifier
#yields error
query attr(recSimple, [name, "meier"]);

#testcase attr, name of element doesnt exist
#yields error
query attr(recSimple, point);

#testcase attr, Syntax attr(record, elemName)
#yields (string "Schulz")
query attr(recSimple, Name); 

#testcase attr, Syntax attr(., elemName)
#yields ((rel(tuple((Name string)(No int))))(("Meier" 1)))
query relSimple feed transformT2Rstream filter[attr(., No) = 1]transformR2Tstream consume;

#testcase attr, Syntax .elemName
#yields ((rel(tuple((Name string)(No int))))(("Meier" 1)))
query relSimple feed transformT2Rstream filter[.No = 1]transformR2Tstream consume;

#testcase attr, querying elements from nested record
#yields (line((12.0 58.0 14.0 53.0)))
query attr(attr(recNested, ARCs), L1);


################################################################################################
#
# 5)  Record Algebra operator transformT2Rstream and transformR2Tstream
#
################################################################################################

#testcase transformT2Rstream with wrong argument type
#yields error
query relSimple transformT2Rstream;

#testcase transformT2Rstream with wrong argument,
# a relation with lowercase attribute name
#yields error
query relWrong feed transformT2Rstream;

#testcase transformT2Rstream with correct argument
#yields (int 2)
query relSimple feed transformT2Rstream count;

#testcase transformT2Rstream with correct argument and a record as a tuple attribute
#yields (int 2)
query relWithAttr feed transformT2Rstream count;

#testcase transformR2Tstream with wrong argument
#yields error
query recSimple transformR2Tstream;

#testcase transformR2Tstream with correct argument
#yields ((rel (tuple ((Name string) (Age int) (Amount real))))\
    (("Schulz" 23 28.0)))
query recSimple feed transformR2Tstream consume;

#testcase transformR2Tstream with correct argument and some nested records
#yields ((rel(tuple((Coverage string)(ARCs (record (L1 line) (L2 line))) \
        (POINTSs (record (P1 point) (P2 point)))))) (("NRW" \
        (((12.0 58.0 14.0 53.0)) ((12.0 54.0 78.0 11.0))) \
        ((11.0 57.0) (15.0 55.0)))))
query recNested feed transformR2Tstream consume;


#testcase both operators in succession
#yields ((rel (tuple((Name string) (No int)))) (("Meier" 1)))
query relSimple feed filter[.No = 1] transformT2Rstream transformR2Tstream
                              transformT2Rstream transformR2Tstream consume;

#testcase both operators in succession with empty stream
#yields ((rel (tuple((Name string) (No int)))) ())
query relSimple feed filter[.No = 0] transformT2Rstream transformR2Tstream
                              transformT2Rstream transformR2Tstream consume;

#testcase memtest
#yields (int 1000000)
query TestRel feed {p1} TestRel feed {p2} symmproduct TestRel feed {p3} symmproduct TestRel feed {p4} symmproduct TestRel feed {p5} symmproduct  TestRel feed {p6} symmproduct transformT2Rstream transformR2Tstream count;

################################################################################################
#
# 6) DisplayTTY
#
################################################################################################

#testcase createEmptyRecord
#yields success
create recEmpty : record (Name: string, Age: int, Amount: real);

#testcase queryEmptyRecord
#yields error
query recEmpty

#testcase createSimpleRecord
#yields success
let recsimple = [const record(Name:string, Age:int, Amount:real, Married:bool) value ("Schubert" 34 23.454325 TRUE)]

#testcase querySimpleRecord
#yields success
query recsimple;

#testcase createRectRecord
#yields success
let recrect = [const record(Rect:rect, Rect3:rect3, Rect4:rect4, Rect8:rect8) value ((0.0 1.0 0.0 1.0) (1.0 2.0 3.0 4.0 5.0 6.0) (17.0 24.0 12.0 13.0 4.0 6.0 2.0 3.0) (1.0 2.2 2.0 3.2 3.0 4.2 4.0 5.2 5.0 6.2 6.0 7.2 7.0 8.2 8.0 9.2))] 

#testcase queryRectRecord
#yields success
query recrect;

#testcase createPointRecord
#yields success
let recpoint = [const record(Point1: point, Point2:point) value ((120.2 134.4) (5.7 6.9))]

#testcase queryPointRecord
#yields success
query recpoint;

#testcase createDateRecord
#yields success
let recdate = [const record(Datum: date, Datum2:date, Datum3:date, Datum4:date) value ("12.12.2012" "09.11.1989" "05.05.1963" "30.03.2010")]

#testcase queryDateRecord
#yields success
query recdate;

#testcase createTextRecord
#yields success
let rectext = [const record (Testtext:text, Testtext2:text, Testtext3:text) value ('ich bin ein unheimlich langer Text.' 'Bei uns erhalten Sie jede Regelleistung an Zahnersatz ohne Zuzahlung' 'Praxis für Schmerztherapie und Naturheilkunde')]

#testcase queryTextRecord
#yields success
query rectext;

#testcase createHistogram2dRecord
#yields success
let rechist = [const record(Hist:histogram2d, Name:string) value (((-0.8 0.0 1.0)(0.0 1.0)(0.0 5.0)) "test")]

#testcase queryHistogram2dRecord
#yields success
query rechist;

#testcase createTupleRecord
#yields success
let recTuple = [const rel(tuple([Inrec1:record(Name:string, Age:int), Label:string, GeoData:point, Inrec2:record(Name:string, Age:int, Amount:real, Married:bool, Mp:mpoint)])) value ((("Schulz" 22) "meinTupleRecord" (4706.0 11170.0) ("Schulz" 23 28.0 TRUE ((("2003-11-20-06:03" "2003-11-20-06:03:15.685"
TRUE FALSE)(13506.0 11159.0 13336.0 10785.0)) (("2003-11-20-06:03:15.685" "2003-11-20-06:03:52.685" TRUE FALSE)(13336.0 10785.0 14000.0 10000.0))))) (("Maier" 31) "meinZweiterTupelRecord" (5006.0 10170.0) ("Schmit
z" 77 81.4 FALSE ((("2003-11-20-06:03" "2003-11-20-06:03:15.685" TRUE FALSE)(12506.0 10159.0 12336.0 9785.0)) (("2003-11-20-06:03:15.685" "2003-11-20-06:03:52.685" TRUE FALSE)(12336.0 9785.0 13000.0 9000.0))))))]

#testcase queryTupleRecord
#yields success
query recTuple;

#testcase createNmeaRecordStep1
#yields success
query nmea0183types('nmea.csv')

#testcase createNmeaRecordStep2
#yields success
let recNmea = [const record(RouteGGA:mpoint,GpsQ:mint,NoSat:mint,DrsID:mint,Hdop:mreal,AntAlt:mreal,GeoSep:mreal,AgeGPS:mreal,SatIDs1:mint,SatIDs2:mint,SatIDs3:mint,SatIDs4:mint,SatIDs5:mint,SatIDs6:mint,SatIDs7:mint,SatIDs8:mint,SatIDs9:mint,SatIDs10:mint,SatIDs11:mint,SatIDs12:mint,PDOP:mreal,HDOP:mreal,VDOP:mreal,SatsInView:mint,SatNumb1:mint,Elevation1:mint,Azimuth1:mint,SatNumb2:mint,Elevation2:mint,Azimuth2:mint,SatNumb3:mint,Elevation3:mint,Azimuth3:mint,SatNumb4:mint,Elevation4:mint,Azimuth4:mint,RouteRMC:mpoint,SpeedRMC:mreal) value ()]

#testcase queryNmeaRecord
#yields success
query recNmea nmea0183import['nmea.csv',1,1] 

#testcase createEmeaRecord
#yields success
let recemea = [const record (Coverage: string, LAB1: record( CoverageID:int, PolygonID:int, XCoordinate:real, YCoordinate: real, LabData: point), ARC1: record( CoverageL: int, CoverageID: int,FromNode: int, ToNode:int, LeftPolygon: int, RightPolygon: int, CntCoordinates:int, ArcData:line )) value("example" (1 2 2.4212705E+02 8.3893837E+01 (3.4212705E+0115.3893837E+01)) (1 2 5 12 4 6 6((1.4212879E+01 5.3864784E+011.4213489E+01 5.3884834E+01)(2.4212705E+01 6.3893837E+01 1.4208732E+015.3902344E+01)(1.4196489E+01 5.3910194E+01 5.4182546E+01 15.3914932E+01))))]

#testcase queryEmeaRecord
#yields success
query recemea;

#testcase createNestedRecord
#yields success
let nestRec = [const record(Name:string, Test:record(Name:string, Test1:record(Name:string, Test2:record(Name:string, Test3:record(Name:string, Test4:record(Name:string, Test5:record(Name:string, Test6:record(Name:string, Test7:record(Name:string))))))))) value ("record1" ("record2" ("record3" ("record4" ("record5" ("record6" ("record7" ("record8" ("record9")))))))))]

#testcase queryNestedRecord
#yields success
query nestRec;


# the TEARDOWN directive is followed by commands which
# should be executed after the execution of all TESTCASES
#teardown

close database;
delete database recteststream;

