Database : berlintest
Restore  : NO


Operator : stpattern
Number   : 1
Signature: tuple(x) X namedFunlist X constraintList -> bool
Example  : query Trains feed filter[. stpattern[InSnow: .Trip inside msnow, IsClose: distance(.Trip, mehringdamm)<10.0, IsFast: speed(.Trip)>8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),  stconstraint("IsClose","IsFast",vec("bbaa"))  ]] count
Result   : 14

Operator : stpattern2
Number   : 1
Signature: tuple(x) X namedFunlist X constraintList -> bool
Example  : query Trains feed  filter[. stpattern2[InSnow: fun(t1: STREAMELEM, p1: periods) (attr(t1, Trip) atperiods p1) inside msnow, IsClose: fun(t2: STREAMELEM, p2: periods) distance(attr(t2, Trip) atperiods p2, mehringdamm)<10.0,    IsFast: fun(t3: STREAMELEM, p3: periods) speed( attr(t3, Trip) atperiods p3) >8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),    stconstraint("IsClose","IsFast",vec("bbaa"))  ]] count
Result   : 14

Operator : stpatternextend
Number   : 1
Signature: stream(tuple(x)) X namedFunlist X constraintList -> stream(tuple(x, funListNames))
Example  : query Trains feed stpatternextend[InSnow: .Trip inside msnow, IsClose: distance(.Trip, mehringdamm)<10.0, IsFast: speed(.Trip)>8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),  stconstraint("IsClose","IsFast",vec("bbaa"))  ] filter[isdefined(.IsClose)] count
Result   : 14

Operator : stpatternextend2
Number   : 1
Signature: stream(tuple(x)) X namedFunlist X constraintList -> stream(tuple(x, funListNames))
Example  : query Trains feed  stpatternextend2[InSnow: fun(t1: TUPLE, p1: periods) (attr(t1, Trip) atperiods p1) inside msnow, IsClose: fun(t2: TUPLE, p2: periods) distance(attr(t2, Trip) atperiods p2, mehringdamm)<10.0,    IsFast: fun(t3: TUPLE, p3: periods) speed( attr(t3, Trip) atperiods p3) >8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),    stconstraint("IsClose","IsFast",vec("bbaa"))  ] filter[isdefined(.IsClose)] count
Result   : 14

Operator : stpatternextendstream
Number   : 1
Signature: stream(tuple(x)) X namedFunlist X constraintList -> stream(tuple(x, funListNames))
Example  : query Trains feed stpatternextendstream[InSnow: .Trip inside msnow, IsClose: distance(.Trip, mehringdamm)<10.0, IsFast: speed(.Trip)>8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),  stconstraint("IsClose","IsFast",vec("bbaa"))  ] filter[isdefined(.IsClose)] count
Result   : 368

Operator : stpatternextendstream2
Number   : 1
Signature: stream(tuple(x)) X namedFunlist X constraintList -> stream(tuple(x, funListNames))
Example  : query Trains feed  stpatternextendstream2[InSnow: fun(t1: TUPLE, p1: periods) (attr(t1, Trip) atperiods p1) inside msnow, IsClose: fun(t2: TUPLE, p2: periods) distance(attr(t2, Trip) atperiods p2, mehringdamm)<10.0,    IsFast: fun(t3: TUPLE, p3: periods) speed( attr(t3, Trip) atperiods p3) >8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),    stconstraint("IsClose","IsFast",vec("bbaa"))  ] filter[isdefined(.IsClose)] count
Result   : 368

Operator : vec
Number   : 1
Signature: (string string ... ) -> stvector
Example  : query vec("aabb", "abab")
Result   : (stvector(aabb abab))

Operator : stpatternex
Number   : 1
Signature: tuple(x) X namedFunlist X constraintList X bool -> bool
Example  : query Trains feed filter[. stpatternex[InSnow: .Trip inside msnow, IsClose: distance(.Trip, mehringdamm)<10.0, IsFast: speed(.Trip)>8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),  stconstraint("IsClose","IsFast",vec("bbaa"));  (end("IsClose") - start("InSnow")) < [const duration value (1 0)] ]] count
Result   : 14

Operator : stpatternex2
Number   : 1
Signature: tuple(x) X namedFunlist X constraintList -> bool
Example  : query Trains feed  filter[. stpatternex2[InSnow: fun(t1: STREAMELEM, p1: periods) (attr(t1, Trip) atperiods p1) inside msnow, IsClose: fun(t2: STREAMELEM, p2: periods) distance(attr(t2, Trip) atperiods p2, mehringdamm)<10.0,    IsFast: fun(t3: STREAMELEM, p3: periods) speed( attr(t3, Trip) atperiods p3) >8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),    stconstraint("IsClose","IsFast",vec("bbaa")) ;  (end("IsClose") - start("InSnow")) < [const duration value (1 0)] ]] count
Result   : 14

Operator : stpatternexextend
Number   : 1
Signature: stream(tuple(x)) X namedFunlist X constraintList X (fun -> bool) -> stream(tuple(x,funListNames))
Example  : query Trains feed stpatternexextend[InSnow: .Trip inside msnow, IsClose: distance(.Trip, mehringdamm)<10.0, IsFast: speed(.Trip)>8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),  stconstraint("IsClose","IsFast",vec("bbaa")); (end("IsClose") - start("InSnow")) < [const duration value (1 0)]  ] filter[isdefined(.IsClose)] count
Result   : 14

Operator : stpatternexextend2
Number   : 1
Signature: stream(tuple(x)) X namedFunlist X constraintList X (fun -> bool) -> stream(tuple(x,funListNames))
Example  : query Trains feed  stpatternexextend2[InSnow: fun(t1: TUPLE, p1: periods) (attr(t1, Trip) atperiods p1) inside msnow, IsClose: fun(t2: TUPLE, p2: periods) distance(attr(t2, Trip) atperiods p2, mehringdamm)<10.0,    IsFast: fun(t3: TUPLE, p3: periods) speed( attr(t3, Trip) atperiods p3) >8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),    stconstraint("IsClose","IsFast",vec("bbaa")) ; (end("IsClose") - start("InSnow")) < [const duration value (1 0)]  ] filter[isdefined(.IsClose)] count
Result   : 14

Operator : stpatternexextendstream
Number   : 1
Signature: stream(tuple(x)) X namedFunlist X constraintList X (fun -> bool) -> stream(tuple(x,funListNames))
Example  : query Trains feed stpatternexextendstream[InSnow: .Trip inside msnow, IsClose: distance(.Trip, mehringdamm)<10.0, IsFast: speed(.Trip)>8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),  stconstraint("IsClose","IsFast",vec("bbaa")); (end("IsClose") - start("InSnow")) < [const duration value (1 0)]  ] filter[isdefined(.IsClose)] count
Result   : 368

Operator : stpatternexextendstream2
Number   : 1
Signature: stream(tuple(x)) X namedFunlist X constraintList X (fun -> bool) -> stream(tuple(x,funListNames))
Example  : query Trains feed stpatternexextendstream2[InSnow: fun(t1: TUPLE, p1: periods) (attr(t1, Trip) atperiods p1) inside msnow, IsClose: fun(t2: TUPLE, p2: periods) distance(attr(t2, Trip) atperiods p2, mehringdamm)<10.0,    IsFast: fun(t3: TUPLE, p3: periods) speed( attr(t3, Trip) atperiods p3) >8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),    stconstraint("IsClose","IsFast",vec("bbaa")) ; (end("IsClose") - start("InSnow")) < [const duration value (1 0)]  ] filter[isdefined(.IsClose)] count
Result   : 368

Operator : stconstraint
Number   : 1
Signature: string X string X stvector -> bool
Example  : query Trains feed filter[. stpatternex[InSnow: .Trip inside msnow, IsClose: distance(.Trip, mehringdamm)<10.0, IsFast: speed(.Trip)>8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),  stconstraint("IsClose","IsFast",vec("bbaa"));  (end("IsClose") - start("InSnow")) < [const duration value (1 0)] ]] count
Result   : 14

Operator : start
Number   : 1
Signature: string -> instant
Example  : query Trains feed filter[. stpatternex[InSnow: .Trip inside msnow, IsClose: distance(.Trip, mehringdamm)<10.0, IsFast: speed(.Trip)>8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),  stconstraint("IsClose","IsFast",vec("bbaa"));  (end("IsClose") - start("InSnow")) < [const duration value (1 0)] ]] count
Result   : 14

Operator : end
Number   : 1
Signature: string -> instant
Example  : query Trains feed filter[. stpatternex[InSnow: .Trip inside msnow, IsClose: distance(.Trip, mehringdamm)<10.0, IsFast: speed(.Trip)>8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),  stconstraint("IsClose","IsFast",vec("bbaa"));  (end("IsClose") - start("InSnow")) < [const duration value (1 0)] ]] count
Result   : 14

Operator : randommbool
Number   : 1
Signature: instant -> mbool
Example  : query ten feed extend[MB1: randommbool(now())] count 
Result   : 10

Operator : passmbool
Number   : 1
Signature: mbool -> mbool
Example  : query ten feed extend[MB1: randommbool(now())] filter[always(.MB1 = passmbool(.MB1))] count
Result   : 10

Operator : randomdelay
Number   : 1
Signature: mpoint x duration -> mpoint
Example  : query always(randomdelay(train7, create_duration(0, 5000)) = train7)
Result   : FALSE

Operator : computeclosure
Number   : 1
Signature: tuple(x) X namedFunlist X constraintList -> bool
Example  : query Trains feed filter[. computeclosure[InSnow: fun(t1: STREAMELEM, p1: periods) (attr(t1, Trip) atperiods p1) inside msnow, IsClose: fun(t2: STREAMELEM, p2: periods) distance(attr(t2, Trip) atperiods p2, mehringdamm)<10.0,    IsFast: fun(t3: STREAMELEM, p3: periods) speed( attr(t3, Trip) atperiods p3) >8.0 ;  stconstraint("InSnow","IsClose",vec("aabb")),    stconstraint("IsClose","IsFast",vec("bbaa"))] = 1 ] count
Result   : 562

Operator : randomshiftdelay
Number   : 1
Signature: mpoint x duration x real x real -> mpoint
Example  : query randomshiftdelay(train7, create_duration(0, 13000), 20.5, 50.0 ) 
Result   : unpredictable
Remark   : Use of random numbers within operator
