Bemerkungen zu den Operatoren
******************************************

Operator: deftime
*****************
mstring -> periods

mregion -> periods


Operator: rangevalues
*********************
mint -> rint
------------


mbool -> rbool
--------------

mstring -> rstring
------------------

mreal -> rreal
--------------


Operator: locations
*******************
mpoint -> points


Operator: inst
**************
istring -> instant

iregion -> instant


Operator: val
*************
istring -> string

iregion -> region


Operator: atinstant
*******************
mstring x instant -> istring


Operator: atperiods
*******************
mstring x periods -> mstring
----------------------------
Es gab keine grosse Probleme bei der Implementierung dieses Operators. Wie
bei vielen musste man nur eine minimal anpassen.

mregion x periods -> mregion
----------------------------
Alg.:
* Die Durchschnittsmenge von Intervalen wird zwischen den
Intervalen der mregion und den der periods(selbst auch eine Menge
von Intervalen) ermittelt.
* Jedes Intervall der resultierende Intervalmenge wird für die Bildung
einer uregion gebraucht. Um die neue uregion herzustellen, gehen wir so vor:
-> ein einfaches uregion-Objekt wird erstellt,
-> die msegments der ursprünglichen uregion werden auf ein DBArray
kopiert,
-> die msegments dieses DBArray werden mit Hilfe der Methode
MSegmentsData::restrictToInterval entsprechend des mitgegeben Intervals in
ihre Länge angepasst.
-> das DBArray mit den angepassten msegments wird in die uregion eingesetzt.

* Die neu erstellte uregion wird zu der resultierenden
mregion hinzugefügt.

Beim letzten Versuch gab es Probleme bei der Erstellung eines
uregion-Objektes. Gleichzeitig fanden entscheidende Änderungen in der
MovingAlgebra statt. Das Konzept der Erstellung eigenständiger Objekten
einer uregion ist noch unklar. Unklar ist auch die Art und Weise, wie man
die Segmente einer mregion bzw. einer uregion unterbringt.

Operator: initial, final
************************

mstring -> istring

mregion -> iregion

Operator: present
*****************
mint x instant -> bool

mregion x instant -> bool

mstring x periods -> bool

mregion x periods -> bool

Operator: at
************
mint x int -> mint
mbool x bool -> mbool
mstring x string -> mstring
mreal x real -> mreal

mint x rint -> mint
mbool x rbool -> mbool
mstring x rstring -> mstring
mreal x rreal -> mreal

mpoint x points -> mpoint
mpoint x line -> mpoint

mregion x point -> mpoint


Operators: atmin, atmax
***********************
mint -> mint
mbool -> mbool
mstring -> mstring
mreal -> mreal

Operation: passes
*****************
mint x int -> bool
mbool x bool -> bool
mstring x string -> bool
mreal x real -> bool

mpoint x points -> bool
mpoint x line -> bool

mregion x point -> bool
mregion x points -> bool

Operation: derivative_new
*************************
mreal -> mreal


Operation: derivable_new
************************
mreal -> mreal


Operation: speed_new
********************
mpoint -> mreal

Operation: velocity_new
***********************
mpoint -> mpoint


Operation: mdirection
*********************
mpoint -> mreal
---------------
Dieses Operator muss abhängig der Richtung eines mpoint den Winkel zur
X-Achse berechnen. D.h., es werden Winkeln zwischen 0 und
359 Grad erwartet. Es wurde besprochen, dass es schon eine Methode gibt,
Namens "direction" in der SpatialAlgebra, die genau diesen Winkel zwischen
2 point berechnet.

direction: point x point -> real

Die Richtung wird natürlich anhand der Ordnung jedes
point (p0 <= p1) ermittelt. Es muss doch möglich sein, die Start- und
Endpunkte jeder upoint zu extrahieren und als Parameter der Methode
"direction" zu übergeben. Das Ergebnis wäre dann der gesuchte Winkel in
Grad. Leider gibt es keine Methode "direction". Der Operator wird direkt in
der Value Mapping Function implementiert(SpatialAlgebra.cpp Zeile #12850).


