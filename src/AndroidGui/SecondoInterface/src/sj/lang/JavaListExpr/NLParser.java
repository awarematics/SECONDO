
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Oct 31 04:42:02 PDT 2012
//----------------------------------------------------

package sj.lang.JavaListExpr;

import java.io.Reader;
import sj.lang.ListExpr;
import sj.lang.JavaListExpr.NLTokenizer;

/** CUP v0.10k generated parser.
  * @version Wed Oct 31 04:42:02 PDT 2012
  */
public class NLParser extends java_cup10.runtime.lr_parser {

  /** Default constructor. */
  public NLParser() {super();}

  /** Constructor which sets the default scanner. */
  public NLParser(java_cup10.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\002\004\000\002\004\003\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\005\004\000\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\020\004\013\005\005\006\004\007\006\010" +
    "\010\011\014\012\011\001\002\000\024\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\001\002\000\024\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\001\002\000" +
    "\024\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\001\002\000\004\002\000\001" +
    "\002\000\024\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\001\002\000\022\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\001\002\000\004\002\015\001\002\000\024\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\001\002\000\024\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\001\002\000\004\002\001\001\002\000\022\004\013\005" +
    "\005\006\004\007\006\010\010\011\014\012\011\013\020" +
    "\001\002\000\022\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\001\002\000\024\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012" +
    "\uffff\013\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\006\003\006\004\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\016\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$NLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$NLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup10.runtime.Symbol do_action(
    int                        act_num,
    java_cup10.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$NLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // If the tokenizer was not initialized, then the parser was created
    // using the standard constructor (with no parameters), what means that
    // the tokenizer (scaner) must read from the standard input.
    // So, it creates the tokenizer using the standard input as argument.
    if (this.tokenizer == null){
      this.tokenizer = new NLTokenizer(System.in);
    }
  
    }

  /** Scan to get the next Symbol. */
  public java_cup10.runtime.Symbol scan()
    throws java.lang.Exception
    {

    NLToken result = this.tokenizer.nextToken();
    this.linePos = result.linePos;
    this.charPos = result.charPos;
    return result;
  
    }


    // NLTokenizer object to be used as tokenizer in this NLParser object.
    public NLTokenizer tokenizer = null;

    // The number of line of the input where the parser is reading.
    // It considers the first line is line 1.
    public int linePos;
    // The number of character of the input where the parser is reading.
    // It considers the first character as character 1.
    public int charPos;
    // Defines a constructor for this class,which gets the input Reader as
    // argument.
    // The parser class must have the name ~NLParser~.
    public NLParser(Reader inputReader){
      // Calls the code of the predefined constructor.
      this();
      // Creates the tokenizer and setups it to read from the given Reader
      // object.
      this.tokenizer = new NLTokenizer(inputReader);
    }
  
}


