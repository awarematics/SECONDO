
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jun 16 21:55:52 CEST 2012
//----------------------------------------------------

package SQL2Secondo;

import java_cup10.runtime.*;
import SecExceptions.*;
import Ext_Tools.*;
import java.sql.SQLWarning;
import Utilities.WarningContainer;

/** CUP v0.10k generated parser.
  * @version Sat Jun 16 21:55:52 CEST 2012
  */
public class ParsCommand extends java_cup10.runtime.lr_parser {

  /** Default constructor. */
  public ParsCommand() {super();}

  /** Constructor which sets the default scanner. */
  public ParsCommand(java_cup10.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u019e\000\002\033\003\000\002\002\004\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\126\010\000" +
    "\002\126\014\000\002\155\003\000\002\155\005\000\002" +
    "\154\003\000\002\154\003\000\002\135\006\000\002\135" +
    "\004\000\002\137\003\000\002\137\005\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\136\003\000\002\136\005\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\002\000\002\056\004\000\002\056\004\000\002\056\004" +
    "\000\002\056\002\000\002\055\003\000\002\055\005\000" +
    "\002\230\003\000\002\230\003\000\002\230\003\000\002" +
    "\230\003\000\002\230\003\000\002\231\003\000\002\231" +
    "\005\000\002\231\005\000\002\227\003\000\002\227\005" +
    "\000\002\227\005\000\002\226\004\000\002\226\003\000" +
    "\002\225\003\000\002\224\003\000\002\224\003\000\002" +
    "\224\003\000\002\224\003\000\002\224\003\000\002\162" +
    "\003\000\002\162\003\000\002\143\003\000\002\143\003" +
    "\000\002\147\003\000\002\147\003\000\002\150\003\000" +
    "\002\144\003\000\002\144\003\000\002\144\003\000\002" +
    "\146\003\000\002\146\005\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\153\003\000\002\153\005\000\002\153\007\000" +
    "\002\153\011\000\002\163\006\000\002\163\007\000\002" +
    "\163\007\000\002\164\003\000\002\164\003\000\002\164" +
    "\003\000\002\164\003\000\002\060\003\000\002\060\003" +
    "\000\002\061\010\000\002\061\006\000\002\062\005\000" +
    "\002\062\006\000\002\063\006\000\002\063\007\000\002" +
    "\064\004\000\002\064\002\000\002\065\003\000\002\065" +
    "\003\000\002\066\010\000\002\067\003\000\002\067\003" +
    "\000\002\070\003\000\002\070\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\072\010\000\002" +
    "\073\010\000\002\074\003\000\002\074\003\000\002\075" +
    "\004\000\002\076\003\000\002\076\003\000\002\077\003" +
    "\000\002\077\003\000\002\100\006\000\002\100\006\000" +
    "\002\100\006\000\002\101\003\000\002\101\003\000\002" +
    "\102\003\000\002\102\003\000\002\111\005\000\002\111" +
    "\005\000\002\111\005\000\002\111\005\000\002\110\004" +
    "\000\002\110\005\000\002\107\003\000\002\104\003\000" +
    "\002\104\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\115" +
    "\011\000\002\116\006\000\002\117\010\000\002\120\010" +
    "\000\002\121\006\000\002\122\006\000\002\122\005\000" +
    "\002\122\003\000\002\123\003\000\002\123\003\000\002" +
    "\123\003\000\002\124\003\000\002\124\002\000\002\103" +
    "\004\000\002\112\005\000\002\113\003\000\002\114\003" +
    "\000\002\114\003\000\002\106\011\000\002\203\003\000" +
    "\002\203\005\000\002\203\005\000\002\203\005\000\002" +
    "\210\003\000\002\205\004\000\002\204\003\000\002\204" +
    "\003\000\002\211\003\000\002\211\004\000\002\211\004" +
    "\000\002\212\005\000\002\212\002\000\002\206\004\000" +
    "\002\206\002\000\002\207\003\000\002\207\004\000\002" +
    "\213\003\000\002\213\005\000\002\213\005\000\002\213" +
    "\010\000\002\214\003\000\002\214\005\000\002\214\005" +
    "\000\002\214\005\000\002\215\004\000\002\215\003\000" +
    "\002\216\004\000\002\217\006\000\002\217\003\000\002" +
    "\222\003\000\002\222\004\000\002\220\004\000\002\220" +
    "\004\000\002\221\003\000\002\221\003\000\002\221\003" +
    "\000\002\221\003\000\002\221\003\000\002\145\003\000" +
    "\002\133\003\000\002\133\005\000\002\133\007\000\002" +
    "\264\003\000\002\264\003\000\002\270\003\000\002\270" +
    "\007\000\002\270\007\000\002\266\003\000\002\266\003" +
    "\000\002\265\003\000\002\265\007\000\002\265\007\000" +
    "\002\267\003\000\002\267\003\000\002\271\003\000\002" +
    "\271\005\000\002\263\004\000\002\263\004\000\002\263" +
    "\003\000\002\176\004\000\002\176\002\000\002\165\006" +
    "\000\002\165\006\000\002\166\002\000\002\166\004\000" +
    "\002\166\006\000\002\240\004\000\002\240\004\000\002" +
    "\240\003\000\002\170\005\000\002\170\004\000\002\167" +
    "\005\000\002\167\002\000\002\253\005\000\002\250\003" +
    "\000\002\250\005\000\002\247\003\000\002\247\005\000" +
    "\002\245\004\000\002\245\003\000\002\246\003\000\002" +
    "\246\006\000\002\171\003\000\002\171\003\000\002\171" +
    "\003\000\002\244\003\000\002\244\005\000\002\243\005" +
    "\000\002\243\006\000\002\243\006\000\002\243\004\000" +
    "\002\243\007\000\002\243\006\000\002\243\006\000\002" +
    "\243\006\000\002\243\006\000\002\243\007\000\002\243" +
    "\005\000\002\254\003\000\002\254\005\000\002\172\003" +
    "\000\002\172\005\000\002\234\003\000\002\234\005\000" +
    "\002\232\003\000\002\232\003\000\002\232\003\000\002" +
    "\233\003\000\002\233\005\000\002\177\003\000\002\177" +
    "\005\000\002\174\003\000\002\174\003\000\002\174\003" +
    "\000\002\173\003\000\002\173\003\000\002\173\003\000" +
    "\002\173\003\000\002\173\003\000\002\173\003\000\002" +
    "\252\012\000\002\237\003\000\002\237\003\000\002\235" +
    "\004\000\002\235\005\000\002\235\007\000\002\235\011" +
    "\000\002\200\006\000\002\241\004\000\002\251\004\000" +
    "\002\251\002\000\002\256\004\000\002\256\002\000\002" +
    "\202\004\000\002\202\002\000\002\255\004\000\002\261" +
    "\004\000\002\261\002\000\002\260\005\000\002\156\003" +
    "\000\002\156\003\000\002\157\003\000\002\157\003\000" +
    "\002\157\002\000\002\127\005\000\002\160\004\000\002" +
    "\161\005\000\002\161\002\000\002\130\005\000\002\130" +
    "\006\000\002\131\005\000\002\131\007\000\002\131\007" +
    "\000\002\125\003\000\002\125\003\000\002\125\002\000" +
    "\002\132\007\000\002\223\003\000\002\223\005\000\002" +
    "\140\005\000\002\141\003\000\002\141\003\000\002\141" +
    "\003\000\002\175\003\000\002\175\003\000\002\035\004" +
    "\000\002\035\002\000\002\036\003\000\002\036\002\000" +
    "\002\037\003\000\002\037\003\000\002\037\002\000\002" +
    "\040\003\000\002\040\003\000\002\052\003\000\002\052" +
    "\002\000\002\041\003\000\002\041\002\000\002\042\006" +
    "\000\002\042\002\000\002\201\002\000\002\201\004\000" +
    "\002\201\003\000\002\043\003\000\002\043\002\000\002" +
    "\044\004\000\002\044\002\000\002\046\003\000\002\046" +
    "\003\000\002\050\003\000\002\051\003\000\002\051\003" +
    "\000\002\047\005\000\002\047\011\000\002\047\002\000" +
    "\002\045\004\000\002\045\002\000\002\142\003\000\002" +
    "\142\003\000\002\142\002\000\002\053\003\000\002\053" +
    "\002\000\002\242\003\000\002\242\005\000\002\236\003" +
    "\000\002\236\005\000\002\257\003\000\002\257\005\000" +
    "\002\262\003\000\002\262\005\000\002\057\003\000\002" +
    "\057\005\000\002\022\004\000\002\022\002\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\152\003\000\002\152\003\000\002\151\004\000\002" +
    "\151\003\000\002\015\004\000\002\015\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\010\004" +
    "\000\002\012\006\000\002\013\007\000\002\003\006\000" +
    "\002\023\003\000\002\023\002\000\002\031\003\000\002" +
    "\031\004\000\002\007\004\000\002\007\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\006\006\000\002\006\003\000\002\027\006\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\026\005\000\002\025\006" +
    "\000\002\024\004\000\002\024\004\000\002\020\006\000" +
    "\002\017\004\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u027d\000\022\004\007\007\020\010\012\011\022\015" +
    "\015\016\014\214\006\216\011\001\002\000\004\002\u027f" +
    "\001\002\000\004\002\uffff\001\002\000\004\006\u0278\001" +
    "\002\000\014\005\u025e\006\uffe5\125\u025f\220\u025d\221\u025b" +
    "\001\002\000\004\002\001\001\002\000\004\005\u01ff\001" +
    "\002\000\004\223\221\001\002\000\004\002\ufffb\001\002" +
    "\000\004\223\221\001\002\000\004\223\221\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufffe\001\002\000\004" +
    "\223\221\001\002\000\004\002\ufffd\001\002\000\112\012" +
    "\024\034\ufea2\035\ufea2\036\ufea2\037\ufea2\040\ufea2\041\025" +
    "\053\ufea2\063\ufea2\064\ufea2\065\ufea2\067\ufea2\070\ufea2\071" +
    "\ufea2\114\ufea2\115\ufea2\116\ufea2\146\ufea2\152\ufea2\153\ufea2" +
    "\154\ufea2\155\ufea2\157\ufea2\160\ufea2\161\ufea2\175\ufea2\176" +
    "\ufea2\177\ufea2\200\ufea2\201\ufea2\222\ufea2\223\ufea2\224\ufea2" +
    "\225\ufea2\226\ufea2\232\ufea2\001\002\000\004\002\ufffc\001" +
    "\002\000\106\034\ufea3\035\ufea3\036\ufea3\037\ufea3\040\ufea3" +
    "\053\ufea3\063\ufea3\064\ufea3\065\ufea3\067\ufea3\070\ufea3\071" +
    "\ufea3\114\ufea3\115\ufea3\116\ufea3\146\ufea3\152\ufea3\153\ufea3" +
    "\154\ufea3\155\ufea3\157\ufea3\160\ufea3\161\ufea3\175\ufea3\176" +
    "\ufea3\177\ufea3\200\ufea3\201\ufea3\222\ufea3\223\ufea3\224\ufea3" +
    "\225\ufea3\226\ufea3\232\ufea3\001\002\000\106\034\ufea4\035" +
    "\ufea4\036\ufea4\037\ufea4\040\ufea4\053\ufea4\063\ufea4\064\ufea4" +
    "\065\ufea4\067\ufea4\070\ufea4\071\ufea4\114\ufea4\115\ufea4\116" +
    "\ufea4\146\ufea4\152\ufea4\153\ufea4\154\ufea4\155\ufea4\157\ufea4" +
    "\160\ufea4\161\ufea4\175\ufea4\176\ufea4\177\ufea4\200\ufea4\201" +
    "\ufea4\222\ufea4\223\ufea4\224\ufea4\225\ufea4\226\ufea4\232\ufea4" +
    "\001\002\000\106\034\113\035\056\036\103\037\045\040" +
    "\110\053\126\063\121\064\141\065\063\067\031\070\102" +
    "\071\061\114\071\115\052\116\132\146\101\152\072\153" +
    "\106\154\074\155\117\157\111\160\150\161\073\175\151" +
    "\176\136\177\043\200\115\201\144\222\030\223\124\224" +
    "\123\225\137\226\054\232\053\001\002\000\004\146\u01e0" +
    "\001\002\000\104\002\uff64\013\uff64\025\uff64\027\uff64\030" +
    "\uff64\031\uff64\032\uff64\075\uff64\076\uff64\077\uff64\100\uff64" +
    "\101\uff64\102\uff64\103\uff64\104\uff64\105\uff64\106\uff64\110" +
    "\uff64\117\uff64\122\uff64\123\uff64\124\uff64\127\uff64\132\uff64" +
    "\133\uff64\134\uff64\147\uff64\150\uff64\154\uff64\155\uff64\162" +
    "\uff64\223\uff64\231\uff64\001\002\000\004\146\u01db\001\002" +
    "\000\076\002\uffda\013\uffda\025\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda" +
    "\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda\110\uffda\117" +
    "\uffda\122\uffda\123\uffda\124\uffda\127\uffda\132\uffda\133\uffda" +
    "\134\uffda\147\uffda\150\uffda\223\uffda\231\uffda\001\002\000" +
    "\004\025\ufeef\001\002\000\004\025\u01ba\001\002\000\106" +
    "\002\uff55\013\uff55\025\uff55\027\uff55\030\uff55\031\uff55\032" +
    "\uff55\075\uff55\076\uff55\077\uff55\100\uff55\101\uff55\102\uff55" +
    "\103\uff55\104\uff55\105\uff55\106\uff55\110\uff55\117\uff55\122" +
    "\uff55\123\uff55\124\uff55\127\uff55\132\uff55\133\uff55\134\uff55" +
    "\147\uff55\150\uff55\153\uff55\154\uff55\155\uff55\156\uff55\223" +
    "\uff55\231\uff55\001\002\000\102\002\uffde\013\uffde\025\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\075\uffde\076\uffde\077" +
    "\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde" +
    "\106\uffde\110\uffde\117\uffde\122\uffde\123\uffde\124\uffde\127" +
    "\uffde\132\uffde\133\uffde\134\uffde\147\uffde\150\uffde\154\u0180" +
    "\155\u0183\223\uffde\231\uffde\001\002\000\104\002\uff63\013" +
    "\uff63\025\uff63\027\uff63\030\uff63\031\uff63\032\uff63\075\uff63" +
    "\076\uff63\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63\104" +
    "\uff63\105\uff63\106\uff63\110\uff63\117\uff63\122\uff63\123\uff63" +
    "\124\uff63\127\uff63\132\uff63\133\uff63\134\uff63\147\uff63\150" +
    "\uff63\154\uff63\155\uff63\162\uff63\223\uff63\231\uff63\001\002" +
    "\000\106\002\uff85\013\uff85\025\uff85\027\uff85\030\uff85\031" +
    "\uff85\032\uff85\033\uff85\044\uff85\075\uff85\076\uff85\077\uff85" +
    "\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85\106" +
    "\uff85\110\uff85\111\uff85\112\uff85\117\uff85\122\uff85\123\uff85" +
    "\124\uff85\127\uff85\132\uff85\133\uff85\134\uff85\147\uff85\150" +
    "\uff85\223\uff85\231\uff85\001\002\000\102\002\uff66\013\uff66" +
    "\025\uff66\027\uff66\030\uff66\031\uff66\032\uff66\075\uff66\076" +
    "\uff66\077\uff66\100\uff66\101\uff66\102\uff66\103\uff66\104\uff66" +
    "\105\uff66\106\uff66\110\uff66\117\uff66\122\uff66\123\uff66\124" +
    "\uff66\127\uff66\132\uff66\133\uff66\134\uff66\147\uff66\150\uff66" +
    "\154\uff66\155\uff66\223\uff66\231\uff66\001\002\000\104\002" +
    "\uff5c\013\uff5c\025\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c" +
    "\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101\uff5c\102\uff5c\103" +
    "\uff5c\104\uff5c\105\uff5c\106\uff5c\110\uff5c\117\uff5c\122\uff5c" +
    "\123\uff5c\124\uff5c\127\uff5c\132\uff5c\133\uff5c\134\uff5c\147" +
    "\uff5c\150\uff5c\154\uff5c\155\uff5c\162\u01b3\223\uff5c\231\uff5c" +
    "\001\002\000\212\002\uffbd\013\uffbd\025\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\044\uffbd\053\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\075\uffbd\076\uffbd" +
    "\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105" +
    "\uffbd\106\uffbd\110\uffbd\111\uffbd\112\uffbd\117\uffbd\122\uffbd" +
    "\123\uffbd\124\uffbd\127\uffbd\132\uffbd\133\uffbd\134\uffbd\146" +
    "\uffbd\147\uffbd\150\uffbd\152\uffbd\153\uffbd\154\uffbd\155\uffbd" +
    "\156\uffbd\165\uffbd\166\uffbd\167\uffbd\170\uffbd\171\uffbd\172" +
    "\uffbd\175\uffbd\176\uffbd\177\uffbd\200\uffbd\201\uffbd\223\uffbd" +
    "\224\uffbd\225\uffbd\226\uffbd\231\uffbd\232\uffbd\001\002\000" +
    "\102\002\uffd1\013\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\u0144\044\u0143\103\uffd1\104\uffd1\105\uffd1\117" +
    "\uffd1\122\uffd1\127\uffd1\132\uffd1\133\uffd1\134\uffd1\147\uffd1" +
    "\150\uffd1\153\uffd1\154\uffd1\155\uffd1\156\uffd1\165\174\166" +
    "\171\167\167\170\165\171\164\172\163\223\uffd1\231\uffd1" +
    "\001\002\000\004\146\uffb0\001\002\000\102\002\uff6a\013" +
    "\uff6a\025\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\075\uff6a" +
    "\076\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104" +
    "\uff6a\105\uff6a\106\uff6a\110\uff6a\117\uff6a\122\uff6a\123\uff6a" +
    "\124\uff6a\127\uff6a\132\uff6a\133\uff6a\134\uff6a\147\uff6a\150" +
    "\uff6a\154\uff6a\155\uff6a\223\uff6a\231\uff6a\001\002\000\006" +
    "\025\ufe9d\150\u01b1\001\002\000\054\002\uff8f\013\uff8f\025" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\044\u013e\103\uff8f" +
    "\104\uff8f\105\uff8f\117\uff8f\122\uff8f\127\uff8f\132\uff8f\133" +
    "\uff8f\134\uff8f\147\uff8f\150\uff8f\223\uff8f\231\uff8f\001\002" +
    "\000\212\002\uffcc\013\uffcc\025\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\044\uffcc\053\uffcc\063\uffcc\064\uffcc\065\uffcc\066" +
    "\uffcc\067\uffcc\070\uffcc\071\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106" +
    "\uffcc\110\uffcc\111\uffcc\112\uffcc\117\uffcc\122\uffcc\123\uffcc" +
    "\124\uffcc\127\uffcc\132\uffcc\133\uffcc\134\uffcc\146\uffcc\147" +
    "\uffcc\150\uffcc\152\uffcc\153\uffcc\154\uffcc\155\uffcc\156\uffcc" +
    "\165\uffcc\166\uffcc\167\uffcc\170\uffcc\171\uffcc\172\uffcc\175" +
    "\uffcc\176\uffcc\177\uffcc\200\uffcc\201\uffcc\223\uffcc\224\uffcc" +
    "\225\uffcc\226\uffcc\231\uffcc\232\uffcc\001\002\000\076\002" +
    "\uff16\013\uff16\025\uff16\027\uff16\030\uff16\031\uff16\032\uff16" +
    "\075\uff16\076\uff16\077\uff16\100\uff16\101\uff16\102\uff16\103" +
    "\uff16\104\uff16\105\uff16\106\uff16\110\uff16\117\uff16\122\uff16" +
    "\123\uff16\124\uff16\127\uff16\132\uff16\133\uff16\134\uff16\147" +
    "\uff16\150\uff16\223\uff16\231\uff16\001\002\000\224\002\uffc5" +
    "\013\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\044\uffc5" +
    "\053\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5" +
    "\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\110\uffc5\111" +
    "\uffc5\112\uffc5\117\uffc5\122\uffc5\123\uffc5\124\uffc5\125\uffc5" +
    "\127\uffc5\132\uffc5\133\uffc5\134\uffc5\146\uffc5\147\uffc5\150" +
    "\uffc5\152\uffc5\153\uffc5\154\uffc5\155\uffc5\156\uffc5\165\uffc5" +
    "\166\uffc5\167\uffc5\170\uffc5\171\uffc5\172\uffc5\175\uffc5\176" +
    "\uffc5\177\uffc5\200\uffc5\201\uffc5\207\uffc5\210\uffc5\211\uffc5" +
    "\212\uffc5\223\uffc5\224\uffc5\225\uffc5\226\uffc5\231\uffc5\232" +
    "\uffc5\001\002\000\214\002\uffc1\013\uffc1\025\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\044\uffc1\053\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1" +
    "\105\uffc1\106\uffc1\110\uffc1\111\uffc1\112\uffc1\117\uffc1\122" +
    "\uffc1\123\uffc1\124\uffc1\127\uffc1\132\uffc1\133\uffc1\134\uffc1" +
    "\146\uffc1\147\uffc1\150\uffc1\152\uffc1\153\uffc1\154\uffc1\155" +
    "\uffc1\156\uffc1\165\uffc1\166\uffc1\167\uffc1\170\uffc1\171\uffc1" +
    "\172\uffc1\175\uffc1\176\uffc1\177\uffc1\200\uffc1\201\uffc1\202" +
    "\u01af\223\uffc1\224\uffc1\225\uffc1\226\uffc1\231\uffc1\232\uffc1" +
    "\001\002\000\106\002\uffd9\013\uffd9\025\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9" +
    "\101\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\110" +
    "\uffd9\117\uffd9\122\uffd9\123\uffd9\124\uffd9\127\uffd9\132\uffd9" +
    "\133\uffd9\134\uffd9\147\uffd9\150\uffd9\153\351\154\uffd9\155" +
    "\uffd9\156\352\223\uffd9\231\uffd9\001\002\000\004\146\uffb3" +
    "\001\002\000\212\002\uffca\013\uffca\025\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\044\uffca\053\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\070\uffca\071\uffca\075\uffca\076\uffca" +
    "\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105" +
    "\uffca\106\uffca\110\uffca\111\uffca\112\uffca\117\uffca\122\uffca" +
    "\123\uffca\124\uffca\127\uffca\132\uffca\133\uffca\134\uffca\146" +
    "\uffca\147\uffca\150\uffca\152\uffca\153\uffca\154\uffca\155\uffca" +
    "\156\uffca\165\uffca\166\uffca\167\uffca\170\uffca\171\uffca\172" +
    "\uffca\175\uffca\176\uffca\177\uffca\200\uffca\201\uffca\223\uffca" +
    "\224\uffca\225\uffca\226\uffca\231\uffca\232\uffca\001\002\000" +
    "\164\002\uff7f\013\uff7f\025\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040" +
    "\uff7f\044\uff7f\053\uff7f\063\uff7f\064\uff7f\065\uff7f\067\uff7f" +
    "\070\uff7f\071\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f\101" +
    "\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f\110\uff7f" +
    "\111\uff7f\112\uff7f\117\uff7f\122\uff7f\123\uff7f\124\uff7f\127" +
    "\uff7f\132\uff7f\133\uff7f\134\uff7f\146\uff7f\147\uff7f\150\uff7f" +
    "\152\uff7f\175\uff7f\176\uff7f\177\uff7f\200\uff7f\201\uff7f\223" +
    "\uff7f\224\uff7f\225\uff7f\226\uff7f\231\uff7f\232\uff7f\001\002" +
    "\000\004\146\u01a0\001\002\000\102\002\uffdc\013\uffdc\025" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\075\uffdc\076\uffdc" +
    "\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105" +
    "\uffdc\106\uffdc\110\uffdc\117\uffdc\122\uffdc\123\uffdc\124\uffdc" +
    "\127\uffdc\132\uffdc\133\uffdc\134\uffdc\147\uffdc\150\uffdc\154" +
    "\334\155\u019f\223\uffdc\231\uffdc\001\002\000\004\146\ufead" +
    "\001\002\000\212\002\uffcf\013\uffcf\025\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\044\uffcf\053\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105" +
    "\uffcf\106\uffcf\110\uffcf\111\uffcf\112\uffcf\117\uffcf\122\uffcf" +
    "\123\uffcf\124\uffcf\127\uffcf\132\uffcf\133\uffcf\134\uffcf\146" +
    "\uffcf\147\uffcf\150\uffcf\152\uffcf\153\uffcf\154\uffcf\155\uffcf" +
    "\156\uffcf\165\uffcf\166\uffcf\167\uffcf\170\uffcf\171\uffcf\172" +
    "\uffcf\175\uffcf\176\uffcf\177\uffcf\200\uffcf\201\uffcf\223\uffcf" +
    "\224\uffcf\225\uffcf\226\uffcf\231\uffcf\232\uffcf\001\002\000" +
    "\212\002\uffc2\013\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\044\uffc2\053\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\070\uffc2\071\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2" +
    "\110\uffc2\111\uffc2\112\uffc2\117\uffc2\122\uffc2\123\uffc2\124" +
    "\uffc2\127\uffc2\132\uffc2\133\uffc2\134\uffc2\146\uffc2\147\uffc2" +
    "\150\uffc2\152\uffc2\153\uffc2\154\uffc2\155\uffc2\156\uffc2\165" +
    "\uffc2\166\uffc2\167\uffc2\170\uffc2\171\uffc2\172\uffc2\175\uffc2" +
    "\176\uffc2\177\uffc2\200\uffc2\201\uffc2\223\uffc2\224\uffc2\225" +
    "\uffc2\226\uffc2\231\uffc2\232\uffc2\001\002\000\102\002\uffdb" +
    "\013\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb" +
    "\104\uffdb\105\uffdb\106\uffdb\110\uffdb\117\uffdb\122\uffdb\123" +
    "\uffdb\124\uffdb\127\uffdb\132\uffdb\133\uffdb\134\uffdb\147\uffdb" +
    "\150\uffdb\154\356\155\357\223\uffdb\231\uffdb\001\002\000" +
    "\212\002\uffc9\013\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\044\uffc9\053\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\075\uffc9\076\uffc9\077\uffc9\100" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9" +
    "\110\uffc9\111\uffc9\112\uffc9\117\uffc9\122\uffc9\123\uffc9\124" +
    "\uffc9\127\uffc9\132\uffc9\133\uffc9\134\uffc9\146\uffc9\147\uffc9" +
    "\150\uffc9\152\uffc9\153\uffc9\154\uffc9\155\uffc9\156\uffc9\165" +
    "\uffc9\166\uffc9\167\uffc9\170\uffc9\171\uffc9\172\uffc9\175\uffc9" +
    "\176\uffc9\177\uffc9\200\uffc9\201\uffc9\223\uffc9\224\uffc9\225" +
    "\uffc9\226\uffc9\231\uffc9\232\uffc9\001\002\000\076\002\uffdd" +
    "\013\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\075" +
    "\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd" +
    "\104\uffdd\105\uffdd\106\uffdd\110\uffdd\117\uffdd\122\uffdd\123" +
    "\uffdd\124\uffdd\127\uffdd\132\uffdd\133\uffdd\134\uffdd\147\uffdd" +
    "\150\uffdd\223\uffdd\231\uffdd\001\002\000\076\002\uff17\013" +
    "\uff17\025\uff17\027\uff17\030\uff17\031\uff17\032\uff17\075\uff17" +
    "\076\uff17\077\uff17\100\uff17\101\uff17\102\uff17\103\uff17\104" +
    "\uff17\105\uff17\106\uff17\110\uff17\117\uff17\122\uff17\123\uff17" +
    "\124\uff17\127\uff17\132\uff17\133\uff17\134\uff17\147\uff17\150" +
    "\uff17\223\uff17\231\uff17\001\002\000\212\002\uffc3\013\uffc3" +
    "\025\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\044\uffc3\053\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3" +
    "\103\uffc3\104\uffc3\105\uffc3\106\uffc3\110\uffc3\111\uffc3\112" +
    "\uffc3\117\uffc3\122\uffc3\123\uffc3\124\uffc3\127\uffc3\132\uffc3" +
    "\133\uffc3\134\uffc3\146\uffc3\147\uffc3\150\uffc3\152\uffc3\153" +
    "\uffc3\154\uffc3\155\uffc3\156\uffc3\165\uffc3\166\uffc3\167\uffc3" +
    "\170\uffc3\171\uffc3\172\uffc3\175\uffc3\176\uffc3\177\uffc3\200" +
    "\uffc3\201\uffc3\223\uffc3\224\uffc3\225\uffc3\226\uffc3\231\uffc3" +
    "\232\uffc3\001\002\000\120\002\uff5e\013\uff5e\025\uff5e\027" +
    "\uff5e\030\uff5e\031\uff5e\032\uff5e\075\uff5e\076\uff5e\077\uff5e" +
    "\100\uff5e\101\uff5e\102\uff5e\103\uff5e\104\uff5e\105\uff5e\106" +
    "\uff5e\110\uff5e\117\uff5e\122\uff5e\123\uff5e\124\uff5e\125\uff5e" +
    "\127\uff5e\132\uff5e\133\uff5e\134\uff5e\146\153\147\uff5e\150" +
    "\uff5e\154\uff5e\155\uff5e\162\uff5e\207\uff5e\210\uff5e\211\uff5e" +
    "\212\uff5e\223\uff5e\231\uff5e\001\002\000\046\034\ufec6\035" +
    "\ufec6\036\ufec6\037\ufec6\040\ufec6\053\ufec6\146\ufec6\152\ufec6" +
    "\175\ufec6\176\ufec6\177\ufec6\200\ufec6\201\ufec6\223\ufec6\224" +
    "\ufec6\225\ufec6\226\ufec6\232\ufec6\001\002\000\164\002\uff7e" +
    "\013\uff7e\025\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\044\uff7e" +
    "\053\uff7e\063\uff7e\064\uff7e\065\uff7e\067\uff7e\070\uff7e\071" +
    "\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e\102\uff7e" +
    "\103\uff7e\104\uff7e\105\uff7e\106\uff7e\110\uff7e\111\uff7e\112" +
    "\uff7e\117\uff7e\122\uff7e\123\uff7e\124\uff7e\127\uff7e\132\uff7e" +
    "\133\uff7e\134\uff7e\146\uff7e\147\uff7e\150\uff7e\152\uff7e\175" +
    "\uff7e\176\uff7e\177\uff7e\200\uff7e\201\uff7e\223\uff7e\224\uff7e" +
    "\225\uff7e\226\uff7e\231\uff7e\232\uff7e\001\002\000\106\002" +
    "\ufea5\013\ufea5\025\ufea5\027\ufea5\030\ufea5\031\ufea5\032\ufea5" +
    "\033\u019c\044\ufea5\075\ufea5\076\ufea5\077\ufea5\100\ufea5\101" +
    "\ufea5\102\ufea5\103\ufea5\104\ufea5\105\ufea5\106\ufea5\110\ufea5" +
    "\111\ufea5\112\ufea5\117\ufea5\122\ufea5\123\ufea5\124\ufea5\127" +
    "\ufea5\132\ufea5\133\ufea5\134\ufea5\147\ufea5\150\ufea5\223\ufea5" +
    "\231\ufea5\001\002\000\076\002\uff43\013\uff43\025\uff43\027" +
    "\uff43\030\uff43\031\uff43\032\uff43\075\uff43\076\uff43\077\uff43" +
    "\100\uff43\101\uff43\102\uff43\103\uff43\104\uff43\105\uff43\106" +
    "\uff43\110\uff43\117\uff43\122\uff43\123\uff43\124\uff43\127\uff43" +
    "\132\uff43\133\uff43\134\uff43\147\uff43\150\uff43\223\uff43\231" +
    "\uff43\001\002\000\164\002\uff84\013\uff84\025\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\044\uff84\053\uff84\063\uff84\064\uff84" +
    "\065\uff84\067\uff84\070\uff84\071\uff84\075\uff84\076\uff84\077" +
    "\uff84\100\uff84\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84" +
    "\106\uff84\110\uff84\111\uff84\112\uff84\117\uff84\122\uff84\123" +
    "\uff84\124\uff84\127\uff84\132\uff84\133\uff84\134\uff84\146\uff84" +
    "\147\uff84\150\uff84\152\uff84\175\uff84\176\uff84\177\uff84\200" +
    "\uff84\201\uff84\223\uff84\224\uff84\225\uff84\226\uff84\231\uff84" +
    "\232\uff84\001\002\000\070\005\220\011\022\034\113\035" +
    "\056\036\103\037\045\040\110\053\126\054\225\146\302" +
    "\152\072\154\074\155\117\157\111\160\150\161\073\175" +
    "\151\176\136\177\043\200\115\201\144\222\030\223\303" +
    "\224\123\225\137\226\054\232\053\001\002\000\004\146" +
    "\u0196\001\002\000\004\146\uffb2\001\002\000\164\002\uff83" +
    "\013\uff83\025\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033" +
    "\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\044\uff83" +
    "\053\uff83\063\uff83\064\uff83\065\uff83\067\uff83\070\uff83\071" +
    "\uff83\075\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102\uff83" +
    "\103\uff83\104\uff83\105\uff83\106\uff83\110\uff83\111\uff83\112" +
    "\uff83\117\uff83\122\uff83\123\uff83\124\uff83\127\uff83\132\uff83" +
    "\133\uff83\134\uff83\146\uff83\147\uff83\150\uff83\152\uff83\175" +
    "\uff83\176\uff83\177\uff83\200\uff83\201\uff83\223\uff83\224\uff83" +
    "\225\uff83\226\uff83\231\uff83\232\uff83\001\002\000\104\002" +
    "\uff8d\013\uff8d\025\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d" +
    "\044\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102" +
    "\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\110\uff8d\111\uff8d" +
    "\112\uff8d\117\uff8d\122\uff8d\123\uff8d\124\uff8d\127\uff8d\132" +
    "\uff8d\133\uff8d\134\uff8d\147\uff8d\150\uff8d\223\uff8d\231\uff8d" +
    "\001\002\000\004\025\ufef0\001\002\000\110\002\uffd6\013" +
    "\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\066\uffd6" +
    "\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103" +
    "\uffd6\104\uffd6\105\uffd6\106\uffd6\110\uffd6\117\uffd6\122\uffd6" +
    "\123\uffd6\124\uffd6\127\uffd6\132\uffd6\133\uffd6\134\uffd6\147" +
    "\uffd6\150\uffd6\153\uffd6\154\uffd6\155\uffd6\156\uffd6\223\uffd6" +
    "\231\uffd6\001\002\000\004\146\uffb1\001\002\000\116\002" +
    "\uff62\013\uff62\025\uff62\027\uff62\030\uff62\031\uff62\032\uff62" +
    "\075\uff62\076\uff62\077\uff62\100\uff62\101\uff62\102\uff62\103" +
    "\uff62\104\uff62\105\uff62\106\uff62\110\uff62\117\uff62\122\uff62" +
    "\123\uff62\124\uff62\125\uff62\127\uff62\132\uff62\133\uff62\134" +
    "\uff62\147\uff62\150\uff62\154\uff62\155\uff62\162\uff62\207\uff62" +
    "\210\uff62\211\uff62\212\uff62\223\uff62\231\uff62\001\002\000" +
    "\164\002\uff81\013\uff81\025\uff81\027\uff81\030\uff81\031\uff81" +
    "\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040" +
    "\uff81\044\uff81\053\uff81\063\uff81\064\uff81\065\uff81\067\uff81" +
    "\070\uff81\071\uff81\075\uff81\076\uff81\077\uff81\100\uff81\101" +
    "\uff81\102\uff81\103\uff81\104\uff81\105\uff81\106\uff81\110\uff81" +
    "\111\uff81\112\uff81\117\uff81\122\uff81\123\uff81\124\uff81\127" +
    "\uff81\132\uff81\133\uff81\134\uff81\146\uff81\147\uff81\150\uff81" +
    "\152\uff81\175\uff81\176\uff81\177\uff81\200\uff81\201\uff81\223" +
    "\uff81\224\uff81\225\uff81\226\uff81\231\uff81\232\uff81\001\002" +
    "\000\004\146\u0190\001\002\000\212\002\uffc4\013\uffc4\025" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\044\uffc4\053\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\105\uffc4\106\uffc4\110\uffc4\111\uffc4\112\uffc4" +
    "\117\uffc4\122\uffc4\123\uffc4\124\uffc4\127\uffc4\132\uffc4\133" +
    "\uffc4\134\uffc4\146\uffc4\147\uffc4\150\uffc4\152\uffc4\153\uffc4" +
    "\154\uffc4\155\uffc4\156\uffc4\165\uffc4\166\uffc4\167\uffc4\170" +
    "\uffc4\171\uffc4\172\uffc4\175\uffc4\176\uffc4\177\uffc4\200\uffc4" +
    "\201\uffc4\223\uffc4\224\uffc4\225\uffc4\226\uffc4\231\uffc4\232" +
    "\uffc4\001\002\000\212\002\uffbc\013\uffbc\025\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\044\uffbc\053\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc" +
    "\105\uffbc\106\uffbc\110\uffbc\111\uffbc\112\uffbc\117\uffbc\122" +
    "\uffbc\123\uffbc\124\uffbc\127\uffbc\132\uffbc\133\uffbc\134\uffbc" +
    "\146\uffbc\147\uffbc\150\uffbc\152\uffbc\153\uffbc\154\uffbc\155" +
    "\uffbc\156\uffbc\165\uffbc\166\uffbc\167\uffbc\170\uffbc\171\uffbc" +
    "\172\uffbc\175\uffbc\176\uffbc\177\uffbc\200\uffbc\201\uffbc\223" +
    "\uffbc\224\uffbc\225\uffbc\226\uffbc\231\uffbc\232\uffbc\001\002" +
    "\000\012\013\u018e\025\ufeb5\150\ufeb5\223\u018d\001\002\000" +
    "\046\034\ufec5\035\ufec5\036\ufec5\037\ufec5\040\ufec5\053\ufec5" +
    "\146\ufec5\152\ufec5\175\ufec5\176\ufec5\177\ufec5\200\ufec5\201" +
    "\ufec5\223\ufec5\224\ufec5\225\ufec5\226\ufec5\232\ufec5\001\002" +
    "\000\106\002\uff50\013\uff50\025\uff50\027\uff50\030\uff50\031" +
    "\uff50\032\uff50\075\uff50\076\uff50\077\uff50\100\uff50\101\uff50" +
    "\102\uff50\103\uff50\104\uff50\105\uff50\106\uff50\110\uff50\117" +
    "\uff50\122\uff50\123\uff50\124\uff50\127\uff50\132\uff50\133\uff50" +
    "\134\uff50\147\uff50\150\uff50\153\uff50\154\uff50\155\uff50\156" +
    "\uff50\223\uff50\231\uff50\001\002\000\004\146\u0179\001\002" +
    "\000\212\002\uffc8\013\uffc8\025\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\044\uffc8\053\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106" +
    "\uffc8\110\uffc8\111\uffc8\112\uffc8\117\uffc8\122\uffc8\123\uffc8" +
    "\124\uffc8\127\uffc8\132\uffc8\133\uffc8\134\uffc8\146\uffc8\147" +
    "\uffc8\150\uffc8\152\uffc8\153\uffc8\154\uffc8\155\uffc8\156\uffc8" +
    "\165\uffc8\166\uffc8\167\uffc8\170\uffc8\171\uffc8\172\uffc8\175" +
    "\uffc8\176\uffc8\177\uffc8\200\uffc8\201\uffc8\223\uffc8\224\uffc8" +
    "\225\uffc8\226\uffc8\231\uffc8\232\uffc8\001\002\000\224\002" +
    "\uffc7\013\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\044" +
    "\uffc7\053\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101" +
    "\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\110\uffc7" +
    "\111\uffc7\112\uffc7\117\uffc7\122\uffc7\123\uffc7\124\uffc7\125" +
    "\uffc7\127\uffc7\132\uffc7\133\uffc7\134\uffc7\146\uffc7\147\uffc7" +
    "\150\uffc7\152\uffc7\153\uffc7\154\uffc7\155\uffc7\156\uffc7\165" +
    "\uffc7\166\uffc7\167\uffc7\170\uffc7\171\uffc7\172\uffc7\175\uffc7" +
    "\176\uffc7\177\uffc7\200\uffc7\201\uffc7\207\uffc7\210\uffc7\211" +
    "\uffc7\212\uffc7\223\uffc7\224\uffc7\225\uffc7\226\uffc7\231\uffc7" +
    "\232\uffc7\001\002\000\044\013\uffba\025\uffba\033\uffba\044" +
    "\uffba\150\uffba\151\u0171\153\uffba\154\uffba\155\uffba\156\uffba" +
    "\165\uffba\166\uffba\167\uffba\170\uffba\171\uffba\172\uffba\223" +
    "\uffba\001\002\000\106\002\uff59\013\uff59\025\uff59\027\uff59" +
    "\030\uff59\031\uff59\032\uff59\075\uff59\076\uff59\077\uff59\100" +
    "\uff59\101\uff59\102\uff59\103\uff59\104\uff59\105\uff59\106\uff59" +
    "\110\uff59\117\uff59\122\uff59\123\uff59\124\uff59\127\uff59\132" +
    "\uff59\133\uff59\134\uff59\147\uff59\150\uff59\153\342\154\uff59" +
    "\155\uff59\156\343\223\uff59\231\uff59\001\002\000\004\146" +
    "\u0165\001\002\000\212\002\uffd0\013\uffd0\025\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\044\uffd0\053\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0" +
    "\105\uffd0\106\uffd0\110\uffd0\111\uffd0\112\uffd0\117\uffd0\122" +
    "\uffd0\123\uffd0\124\uffd0\127\uffd0\132\uffd0\133\uffd0\134\uffd0" +
    "\146\uffd0\147\uffd0\150\uffd0\152\uffd0\153\uffd0\154\uffd0\155" +
    "\uffd0\156\uffd0\165\uffd0\166\uffd0\167\uffd0\170\uffd0\171\uffd0" +
    "\172\uffd0\175\uffd0\176\uffd0\177\uffd0\200\uffd0\201\uffd0\223" +
    "\uffd0\224\uffd0\225\uffd0\226\uffd0\231\uffd0\232\uffd0\001\002" +
    "\000\100\002\uff8e\013\uff8e\025\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\044\u0163\075\uff8e\076\uff8e\077\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\110" +
    "\uff8e\117\uff8e\122\uff8e\123\uff8e\124\uff8e\127\uff8e\132\uff8e" +
    "\133\uff8e\134\uff8e\147\uff8e\150\uff8e\223\uff8e\231\uff8e\001" +
    "\002\000\104\002\uff8c\013\uff8c\025\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\044\uff8c\075\uff8c\076\uff8c\077\uff8c\100" +
    "\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c" +
    "\110\uff8c\111\uff8c\112\uff8c\117\uff8c\122\uff8c\123\uff8c\124" +
    "\uff8c\127\uff8c\132\uff8c\133\uff8c\134\uff8c\147\uff8c\150\uff8c" +
    "\223\uff8c\231\uff8c\001\002\000\076\002\uff15\013\uff15\025" +
    "\uff15\027\uff15\030\uff15\031\uff15\032\uff15\075\uff15\076\uff15" +
    "\077\uff15\100\uff15\101\uff15\102\uff15\103\uff15\104\uff15\105" +
    "\uff15\106\uff15\110\uff15\117\uff15\122\uff15\123\uff15\124\uff15" +
    "\127\uff15\132\uff15\133\uff15\134\uff15\147\uff15\150\uff15\223" +
    "\uff15\231\uff15\001\002\000\110\002\uffd2\013\uffd2\025\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\066\uffd2\075\uffd2\076" +
    "\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2" +
    "\105\uffd2\106\uffd2\110\uffd2\117\uffd2\122\uffd2\123\uffd2\124" +
    "\uffd2\127\uffd2\132\uffd2\133\uffd2\134\uffd2\147\uffd2\150\uffd2" +
    "\153\uffd2\154\uffd2\155\uffd2\156\uffd2\223\uffd2\231\uffd2\001" +
    "\002\000\212\002\uffce\013\uffce\025\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\044\uffce\053\uffce\063\uffce\064\uffce\065\uffce" +
    "\066\uffce\067\uffce\070\uffce\071\uffce\075\uffce\076\uffce\077" +
    "\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce" +
    "\106\uffce\110\uffce\111\uffce\112\uffce\117\uffce\122\uffce\123" +
    "\uffce\124\uffce\127\uffce\132\uffce\133\uffce\134\uffce\146\uffce" +
    "\147\uffce\150\uffce\152\uffce\153\uffce\154\uffce\155\uffce\156" +
    "\uffce\165\uffce\166\uffce\167\uffce\170\uffce\171\uffce\172\uffce" +
    "\175\uffce\176\uffce\177\uffce\200\uffce\201\uffce\223\uffce\224" +
    "\uffce\225\uffce\226\uffce\231\uffce\232\uffce\001\002\000\004" +
    "\146\u015f\001\002\000\212\002\uffbe\013\uffbe\025\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\044\uffbe\053\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104" +
    "\uffbe\105\uffbe\106\uffbe\110\uffbe\111\uffbe\112\uffbe\117\uffbe" +
    "\122\uffbe\123\uffbe\124\uffbe\127\uffbe\132\uffbe\133\uffbe\134" +
    "\uffbe\146\uffbe\147\uffbe\150\uffbe\152\uffbe\153\uffbe\154\uffbe" +
    "\155\uffbe\156\uffbe\165\uffbe\166\uffbe\167\uffbe\170\uffbe\171" +
    "\uffbe\172\uffbe\175\uffbe\176\uffbe\177\uffbe\200\uffbe\201\uffbe" +
    "\223\uffbe\224\uffbe\225\uffbe\226\uffbe\231\uffbe\232\uffbe\001" +
    "\002\000\224\002\uffc6\013\uffc6\025\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\044\uffc6\053\uffc6\063\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\075\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6" +
    "\106\uffc6\110\uffc6\111\uffc6\112\uffc6\117\uffc6\122\uffc6\123" +
    "\uffc6\124\uffc6\125\uffc6\127\uffc6\132\uffc6\133\uffc6\134\uffc6" +
    "\146\uffc6\147\uffc6\150\uffc6\152\uffc6\153\uffc6\154\uffc6\155" +
    "\uffc6\156\uffc6\165\uffc6\166\uffc6\167\uffc6\170\uffc6\171\uffc6" +
    "\172\uffc6\175\uffc6\176\uffc6\177\uffc6\200\uffc6\201\uffc6\207" +
    "\uffc6\210\uffc6\211\uffc6\212\uffc6\223\uffc6\224\uffc6\225\uffc6" +
    "\226\uffc6\231\uffc6\232\uffc6\001\002\000\212\002\uffcb\013" +
    "\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\044\uffcb\053" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102" +
    "\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\110\uffcb\111\uffcb" +
    "\112\uffcb\117\uffcb\122\uffcb\123\uffcb\124\uffcb\127\uffcb\132" +
    "\uffcb\133\uffcb\134\uffcb\146\uffcb\147\uffcb\150\uffcb\152\uffcb" +
    "\153\uffcb\154\uffcb\155\uffcb\156\uffcb\165\uffcb\166\uffcb\167" +
    "\uffcb\170\uffcb\171\uffcb\172\uffcb\175\uffcb\176\uffcb\177\uffcb" +
    "\200\uffcb\201\uffcb\223\uffcb\224\uffcb\225\uffcb\226\uffcb\231" +
    "\uffcb\232\uffcb\001\002\000\004\146\ufeae\001\002\000\212" +
    "\002\uffcd\013\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\044\uffcd\053\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067" +
    "\uffcd\070\uffcd\071\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\110" +
    "\uffcd\111\uffcd\112\uffcd\117\uffcd\122\uffcd\123\uffcd\124\uffcd" +
    "\127\uffcd\132\uffcd\133\uffcd\134\uffcd\146\uffcd\147\uffcd\150" +
    "\uffcd\152\uffcd\153\uffcd\154\uffcd\155\uffcd\156\uffcd\165\uffcd" +
    "\166\uffcd\167\uffcd\170\uffcd\171\uffcd\172\uffcd\175\uffcd\176" +
    "\uffcd\177\uffcd\200\uffcd\201\uffcd\223\uffcd\224\uffcd\225\uffcd" +
    "\226\uffcd\231\uffcd\232\uffcd\001\002\000\062\034\113\035" +
    "\056\036\103\037\045\040\110\053\126\063\121\064\141" +
    "\065\063\067\031\070\102\071\061\146\160\152\072\175" +
    "\151\176\136\177\043\200\115\201\144\223\157\224\123" +
    "\225\137\226\054\232\053\001\002\000\212\002\uffbb\013" +
    "\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\044\uffbb\053" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102" +
    "\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\110\uffbb\111\uffbb" +
    "\112\uffbb\117\uffbb\122\uffbb\123\uffbb\124\uffbb\127\uffbb\132" +
    "\uffbb\133\uffbb\134\uffbb\146\uffbb\147\uffbb\150\uffbb\152\uffbb" +
    "\153\uffbb\154\uffbb\155\uffbb\156\uffbb\165\uffbb\166\uffbb\167" +
    "\uffbb\170\uffbb\171\uffbb\172\uffbb\175\uffbb\176\uffbb\177\uffbb" +
    "\200\uffbb\201\uffbb\223\uffbb\224\uffbb\225\uffbb\226\uffbb\231" +
    "\uffbb\232\uffbb\001\002\000\164\002\uff82\013\uff82\025\uff82" +
    "\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035" +
    "\uff82\036\uff82\037\uff82\040\uff82\044\uff82\053\uff82\063\uff82" +
    "\064\uff82\065\uff82\067\uff82\070\uff82\071\uff82\075\uff82\076" +
    "\uff82\077\uff82\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82" +
    "\105\uff82\106\uff82\110\uff82\111\uff82\112\uff82\117\uff82\122" +
    "\uff82\123\uff82\124\uff82\127\uff82\132\uff82\133\uff82\134\uff82" +
    "\146\uff82\147\uff82\150\uff82\152\uff82\175\uff82\176\uff82\177" +
    "\uff82\200\uff82\201\uff82\223\uff82\224\uff82\225\uff82\226\uff82" +
    "\231\uff82\232\uff82\001\002\000\046\034\113\035\056\036" +
    "\103\037\045\040\110\053\126\146\160\152\072\175\151" +
    "\176\136\177\043\200\115\201\144\223\157\224\123\225" +
    "\137\226\054\232\053\001\002\000\164\002\uff80\013\uff80" +
    "\025\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\044\uff80\053\uff80" +
    "\063\uff80\064\uff80\065\uff80\067\uff80\070\uff80\071\uff80\075" +
    "\uff80\076\uff80\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80" +
    "\104\uff80\105\uff80\106\uff80\110\uff80\111\uff80\112\uff80\117" +
    "\uff80\122\uff80\123\uff80\124\uff80\127\uff80\132\uff80\133\uff80" +
    "\134\uff80\146\uff80\147\uff80\150\uff80\152\uff80\175\uff80\176" +
    "\uff80\177\uff80\200\uff80\201\uff80\223\uff80\224\uff80\225\uff80" +
    "\226\uff80\231\uff80\232\uff80\001\002\000\120\002\uff5e\013" +
    "\uff5e\025\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\075\uff5e" +
    "\076\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\104" +
    "\uff5e\105\uff5e\106\uff5e\110\uff5e\117\uff5e\122\uff5e\123\uff5e" +
    "\124\uff5e\125\uff5e\127\uff5e\132\uff5e\133\uff5e\134\uff5e\146" +
    "\153\147\uff5e\150\uff5e\154\uff5e\155\uff5e\162\uff5e\207\uff5e" +
    "\210\uff5e\211\uff5e\212\uff5e\223\uff5e\231\uff5e\001\002\000" +
    "\212\002\uffbf\013\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\044\uffbf\053\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\075\uffbf\076\uffbf\077\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf" +
    "\110\uffbf\111\uffbf\112\uffbf\117\uffbf\122\uffbf\123\uffbf\124" +
    "\uffbf\127\uffbf\132\uffbf\133\uffbf\134\uffbf\146\uffbf\147\uffbf" +
    "\150\uffbf\152\uffbf\153\uffbf\154\uffbf\155\uffbf\156\uffbf\165" +
    "\uffbf\166\uffbf\167\uffbf\170\uffbf\171\uffbf\172\uffbf\175\uffbf" +
    "\176\uffbf\177\uffbf\200\uffbf\201\uffbf\223\uffbf\224\uffbf\225" +
    "\uffbf\226\uffbf\231\uffbf\232\uffbf\001\002\000\116\002\uff61" +
    "\013\uff61\025\uff61\027\uff61\030\uff61\031\uff61\032\uff61\075" +
    "\uff61\076\uff61\077\uff61\100\uff61\101\uff61\102\uff61\103\uff61" +
    "\104\uff61\105\uff61\106\uff61\110\uff61\117\uff61\122\uff61\123" +
    "\uff61\124\uff61\125\uff61\127\uff61\132\uff61\133\uff61\134\uff61" +
    "\147\uff61\150\uff61\154\uff61\155\uff61\162\uff61\207\uff61\210" +
    "\uff61\211\uff61\212\uff61\223\uff61\231\uff61\001\002\000\004" +
    "\230\154\001\002\000\004\147\155\001\002\000\124\002" +
    "\uff5f\013\uff5f\025\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f" +
    "\032\uff5f\075\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f\102" +
    "\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\110\uff5f\117\uff5f" +
    "\122\uff5f\123\uff5f\124\uff5f\125\uff5f\127\uff5f\132\uff5f\133" +
    "\uff5f\134\uff5f\147\uff5f\150\uff5f\153\uff5f\154\uff5f\155\uff5f" +
    "\156\uff5f\162\uff5f\207\uff5f\210\uff5f\211\uff5f\212\uff5f\223" +
    "\uff5f\231\uff5f\001\002\000\110\002\uffd3\013\uffd3\025\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\066\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3" +
    "\105\uffd3\106\uffd3\110\uffd3\117\uffd3\122\uffd3\123\uffd3\124" +
    "\uffd3\127\uffd3\132\uffd3\133\uffd3\134\uffd3\147\uffd3\150\uffd3" +
    "\153\uffd3\154\uffd3\155\uffd3\156\uffd3\223\uffd3\231\uffd3\001" +
    "\002\000\214\002\uffba\013\uffba\025\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\044\uffba\053\uffba\063\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\070\uffba\071\uffba\075\uffba\076\uffba\077" +
    "\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba" +
    "\106\uffba\110\uffba\111\uffba\112\uffba\117\uffba\122\uffba\123" +
    "\uffba\124\uffba\127\uffba\132\uffba\133\uffba\134\uffba\146\uffba" +
    "\147\uffba\150\uffba\151\u0157\152\uffba\153\uffba\154\uffba\155" +
    "\uffba\156\uffba\165\uffba\166\uffba\167\uffba\170\uffba\171\uffba" +
    "\172\uffba\175\uffba\176\uffba\177\uffba\200\uffba\201\uffba\223" +
    "\uffba\224\uffba\225\uffba\226\uffba\231\uffba\232\uffba\001\002" +
    "\000\014\005\220\011\022\054\225\146\230\223\221\001" +
    "\002\000\106\002\uff51\013\uff51\025\uff51\027\uff51\030\uff51" +
    "\031\uff51\032\uff51\075\uff51\076\uff51\077\uff51\100\uff51\101" +
    "\uff51\102\uff51\103\uff51\104\uff51\105\uff51\106\uff51\110\uff51" +
    "\117\uff51\122\uff51\123\uff51\124\uff51\127\uff51\132\uff51\133" +
    "\uff51\134\uff51\147\uff51\150\uff51\153\uff51\154\uff51\155\uff51" +
    "\156\uff51\223\uff51\231\uff51\001\002\000\122\002\uffd1\013" +
    "\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\075\uffd1" +
    "\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104" +
    "\uffd1\105\uffd1\106\uffd1\110\uffd1\117\uffd1\122\uffd1\123\uffd1" +
    "\124\uffd1\127\uffd1\132\uffd1\133\uffd1\134\uffd1\147\uffd1\150" +
    "\uffd1\153\uffd1\154\uffd1\155\uffd1\156\uffd1\165\174\166\171" +
    "\167\167\170\165\171\164\172\163\223\uffd1\231\uffd1\001" +
    "\002\000\110\002\ufea7\013\ufea7\025\ufea7\027\ufea7\030\ufea7" +
    "\031\ufea7\032\ufea7\075\ufea7\076\ufea7\077\ufea7\100\ufea7\101" +
    "\ufea7\102\ufea7\103\ufea7\104\ufea7\105\ufea7\106\ufea7\110\ufea7" +
    "\117\ufea7\122\ufea7\123\ufea7\124\ufea7\127\ufea7\132\ufea7\133" +
    "\ufea7\134\ufea7\146\204\147\ufea7\150\ufea7\153\ufea7\154\ufea7" +
    "\155\ufea7\156\ufea7\223\ufea7\231\ufea7\001\002\000\112\002" +
    "\uff44\013\uff44\025\uff44\026\uff44\027\uff44\030\uff44\031\uff44" +
    "\032\uff44\075\uff44\076\uff44\077\uff44\100\uff44\101\uff44\102" +
    "\uff44\103\uff44\104\uff44\105\uff44\106\uff44\110\uff44\117\uff44" +
    "\122\uff44\123\uff44\124\uff44\127\uff44\132\uff44\133\uff44\134" +
    "\uff44\146\uff44\147\uff44\150\uff44\153\uff44\154\uff44\155\uff44" +
    "\156\uff44\223\uff44\231\uff44\001\002\000\112\002\uff45\013" +
    "\uff45\025\uff45\026\uff45\027\uff45\030\uff45\031\uff45\032\uff45" +
    "\075\uff45\076\uff45\077\uff45\100\uff45\101\uff45\102\uff45\103" +
    "\uff45\104\uff45\105\uff45\106\uff45\110\uff45\117\uff45\122\uff45" +
    "\123\uff45\124\uff45\127\uff45\132\uff45\133\uff45\134\uff45\146" +
    "\uff45\147\uff45\150\uff45\153\uff45\154\uff45\155\uff45\156\uff45" +
    "\223\uff45\231\uff45\001\002\000\106\002\uff4f\013\uff4f\025" +
    "\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f\075\uff4f\076\uff4f" +
    "\077\uff4f\100\uff4f\101\uff4f\102\uff4f\103\uff4f\104\uff4f\105" +
    "\uff4f\106\uff4f\110\uff4f\117\uff4f\122\uff4f\123\uff4f\124\uff4f" +
    "\127\uff4f\132\uff4f\133\uff4f\134\uff4f\147\uff4f\150\uff4f\153" +
    "\uff4f\154\uff4f\155\uff4f\156\uff4f\223\uff4f\231\uff4f\001\002" +
    "\000\112\002\uff46\013\uff46\025\uff46\026\uff46\027\uff46\030" +
    "\uff46\031\uff46\032\uff46\075\uff46\076\uff46\077\uff46\100\uff46" +
    "\101\uff46\102\uff46\103\uff46\104\uff46\105\uff46\106\uff46\110" +
    "\uff46\117\uff46\122\uff46\123\uff46\124\uff46\127\uff46\132\uff46" +
    "\133\uff46\134\uff46\146\uff46\147\uff46\150\uff46\153\uff46\154" +
    "\uff46\155\uff46\156\uff46\223\uff46\231\uff46\001\002\000\106" +
    "\002\uff4d\013\uff4d\025\uff4d\027\uff4d\030\uff4d\031\uff4d\032" +
    "\uff4d\075\uff4d\076\uff4d\077\uff4d\100\uff4d\101\uff4d\102\uff4d" +
    "\103\uff4d\104\uff4d\105\uff4d\106\uff4d\110\uff4d\117\uff4d\122" +
    "\uff4d\123\uff4d\124\uff4d\127\uff4d\132\uff4d\133\uff4d\134\uff4d" +
    "\147\uff4d\150\uff4d\153\uff4d\154\uff4d\155\uff4d\156\uff4d\223" +
    "\uff4d\231\uff4d\001\002\000\112\002\uff47\013\uff47\025\uff47" +
    "\026\uff47\027\uff47\030\uff47\031\uff47\032\uff47\075\uff47\076" +
    "\uff47\077\uff47\100\uff47\101\uff47\102\uff47\103\uff47\104\uff47" +
    "\105\uff47\106\uff47\110\uff47\117\uff47\122\uff47\123\uff47\124" +
    "\uff47\127\uff47\132\uff47\133\uff47\134\uff47\146\uff47\147\uff47" +
    "\150\uff47\153\uff47\154\uff47\155\uff47\156\uff47\223\uff47\231" +
    "\uff47\001\002\000\112\002\uff5e\013\uff5e\025\uff5e\026\uff5e" +
    "\027\uff5e\030\uff5e\031\uff5e\032\uff5e\075\uff5e\076\uff5e\077" +
    "\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\104\uff5e\105\uff5e" +
    "\106\uff5e\110\uff5e\117\uff5e\122\uff5e\123\uff5e\124\uff5e\127" +
    "\uff5e\132\uff5e\133\uff5e\134\uff5e\146\153\147\uff5e\150\uff5e" +
    "\153\uff5e\154\uff5e\155\uff5e\156\uff5e\223\uff5e\231\uff5e\001" +
    "\002\000\106\002\ufeac\013\ufeac\025\ufeac\027\ufeac\030\ufeac" +
    "\031\ufeac\032\ufeac\075\ufeac\076\ufeac\077\ufeac\100\ufeac\101" +
    "\ufeac\102\ufeac\103\ufeac\104\ufeac\105\ufeac\106\ufeac\110\ufeac" +
    "\117\ufeac\122\ufeac\123\ufeac\124\ufeac\127\ufeac\132\ufeac\133" +
    "\ufeac\134\ufeac\147\ufeac\150\ufeac\153\ufeac\154\ufeac\155\ufeac" +
    "\156\ufeac\223\ufeac\231\ufeac\001\002\000\112\002\uff48\013" +
    "\uff48\025\uff48\026\uff48\027\uff48\030\uff48\031\uff48\032\uff48" +
    "\075\uff48\076\uff48\077\uff48\100\uff48\101\uff48\102\uff48\103" +
    "\uff48\104\uff48\105\uff48\106\uff48\110\uff48\117\uff48\122\uff48" +
    "\123\uff48\124\uff48\127\uff48\132\uff48\133\uff48\134\uff48\146" +
    "\uff48\147\uff48\150\uff48\153\uff48\154\uff48\155\uff48\156\uff48" +
    "\223\uff48\231\uff48\001\002\000\110\002\uff4a\013\uff4a\025" +
    "\uff4a\026\176\027\uff4a\030\uff4a\031\uff4a\032\uff4a\075\uff4a" +
    "\076\uff4a\077\uff4a\100\uff4a\101\uff4a\102\uff4a\103\uff4a\104" +
    "\uff4a\105\uff4a\106\uff4a\110\uff4a\117\uff4a\122\uff4a\123\uff4a" +
    "\124\uff4a\127\uff4a\132\uff4a\133\uff4a\134\uff4a\147\uff4a\150" +
    "\uff4a\153\uff4a\154\uff4a\155\uff4a\156\uff4a\223\uff4a\231\uff4a" +
    "\001\002\000\016\165\174\166\171\167\167\170\165\171" +
    "\164\172\177\001\002\000\110\002\uff5e\013\uff5e\025\uff5e" +
    "\027\uff5e\030\uff5e\031\uff5e\032\uff5e\075\uff5e\076\uff5e\077" +
    "\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\104\uff5e\105\uff5e" +
    "\106\uff5e\110\uff5e\117\uff5e\122\uff5e\123\uff5e\124\uff5e\127" +
    "\uff5e\132\uff5e\133\uff5e\134\uff5e\146\153\147\uff5e\150\uff5e" +
    "\153\uff5e\154\uff5e\155\uff5e\156\uff5e\223\uff5e\231\uff5e\001" +
    "\002\000\106\002\uff4e\013\uff4e\025\uff4e\027\uff4e\030\uff4e" +
    "\031\uff4e\032\uff4e\075\uff4e\076\uff4e\077\uff4e\100\uff4e\101" +
    "\uff4e\102\uff4e\103\uff4e\104\uff4e\105\uff4e\106\uff4e\110\uff4e" +
    "\117\uff4e\122\uff4e\123\uff4e\124\uff4e\127\uff4e\132\uff4e\133" +
    "\uff4e\134\uff4e\147\uff4e\150\uff4e\153\uff4e\154\uff4e\155\uff4e" +
    "\156\uff4e\223\uff4e\231\uff4e\001\002\000\106\002\uff4c\013" +
    "\uff4c\025\uff4c\027\uff4c\030\uff4c\031\uff4c\032\uff4c\075\uff4c" +
    "\076\uff4c\077\uff4c\100\uff4c\101\uff4c\102\uff4c\103\uff4c\104" +
    "\uff4c\105\uff4c\106\uff4c\110\uff4c\117\uff4c\122\uff4c\123\uff4c" +
    "\124\uff4c\127\uff4c\132\uff4c\133\uff4c\134\uff4c\147\uff4c\150" +
    "\uff4c\153\uff4c\154\uff4c\155\uff4c\156\uff4c\223\uff4c\231\uff4c" +
    "\001\002\000\106\002\uff4b\013\uff4b\025\uff4b\027\uff4b\030" +
    "\uff4b\031\uff4b\032\uff4b\075\uff4b\076\uff4b\077\uff4b\100\uff4b" +
    "\101\uff4b\102\uff4b\103\uff4b\104\uff4b\105\uff4b\106\uff4b\110" +
    "\uff4b\117\uff4b\122\uff4b\123\uff4b\124\uff4b\127\uff4b\132\uff4b" +
    "\133\uff4b\134\uff4b\147\uff4b\150\uff4b\153\uff4b\154\uff4b\155" +
    "\uff4b\156\uff4b\223\uff4b\231\uff4b\001\002\000\106\002\uff49" +
    "\013\uff49\025\uff49\027\uff49\030\uff49\031\uff49\032\uff49\075" +
    "\uff49\076\uff49\077\uff49\100\uff49\101\uff49\102\uff49\103\uff49" +
    "\104\uff49\105\uff49\106\uff49\110\uff49\117\uff49\122\uff49\123" +
    "\uff49\124\uff49\127\uff49\132\uff49\133\uff49\134\uff49\147\uff49" +
    "\150\uff49\153\uff49\154\uff49\155\uff49\156\uff49\223\uff49\231" +
    "\uff49\001\002\000\004\230\205\001\002\000\006\147\207" +
    "\150\206\001\002\000\004\146\210\001\002\000\106\002" +
    "\ufea9\013\ufea9\025\ufea9\027\ufea9\030\ufea9\031\ufea9\032\ufea9" +
    "\075\ufea9\076\ufea9\077\ufea9\100\ufea9\101\ufea9\102\ufea9\103" +
    "\ufea9\104\ufea9\105\ufea9\106\ufea9\110\ufea9\117\ufea9\122\ufea9" +
    "\123\ufea9\124\ufea9\127\ufea9\132\ufea9\133\ufea9\134\ufea9\147" +
    "\ufea9\150\ufea9\153\ufea9\154\ufea9\155\ufea9\156\ufea9\223\ufea9" +
    "\231\ufea9\001\002\000\004\230\211\001\002\000\004\147" +
    "\212\001\002\000\004\147\213\001\002\000\106\002\ufea8" +
    "\013\ufea8\025\ufea8\027\ufea8\030\ufea8\031\ufea8\032\ufea8\075" +
    "\ufea8\076\ufea8\077\ufea8\100\ufea8\101\ufea8\102\ufea8\103\ufea8" +
    "\104\ufea8\105\ufea8\106\ufea8\110\ufea8\117\ufea8\122\ufea8\123" +
    "\ufea8\124\ufea8\127\ufea8\132\ufea8\133\ufea8\134\ufea8\147\ufea8" +
    "\150\ufea8\153\ufea8\154\ufea8\155\ufea8\156\ufea8\223\ufea8\231" +
    "\ufea8\001\002\000\014\002\uff2f\117\uff2f\122\uff2f\132\uff2f" +
    "\147\uff2f\001\002\000\014\002\uff3d\117\uff3d\122\262\132" +
    "\uff3d\147\uff3d\001\002\000\014\002\uff33\117\uff33\122\uff33" +
    "\132\uff33\147\uff33\001\002\000\014\002\uff38\117\uff38\122" +
    "\uff38\132\uff38\147\uff38\001\002\000\004\223\221\001\002" +
    "\000\160\002\uff42\005\uff42\011\uff42\013\uff42\017\uff42\020" +
    "\uff42\021\uff42\025\uff42\027\uff42\030\uff42\031\uff42\032\uff42" +
    "\044\uff42\054\uff42\075\uff42\076\uff42\077\uff42\100\uff42\101" +
    "\uff42\102\uff42\103\uff42\104\uff42\105\uff42\106\uff42\110\uff42" +
    "\111\uff42\112\uff42\117\uff42\122\uff42\123\uff42\124\uff42\125" +
    "\uff42\126\uff42\127\uff42\131\uff42\132\uff42\133\uff42\134\uff42" +
    "\144\uff42\145\uff42\146\uff42\147\uff42\150\uff42\151\u0152\204" +
    "\uff42\207\uff42\210\uff42\211\uff42\212\uff42\213\uff42\214\uff42" +
    "\215\uff42\216\uff42\223\uff42\231\uff42\001\002\000\006\127" +
    "\366\231\365\001\002\000\042\002\ufeb1\013\313\027\ufeb1" +
    "\030\ufeb1\031\ufeb1\032\ufeb1\117\ufeb1\122\ufeb1\127\ufeb1\132" +
    "\ufeb1\133\ufeb1\134\ufeb1\147\ufeb1\150\ufeb1\223\312\231\ufeb1" +
    "\001\002\000\006\013\313\223\312\001\002\000\110\034" +
    "\113\035\056\036\103\037\045\040\110\053\126\063\121" +
    "\064\141\065\063\067\031\070\102\071\061\114\071\115" +
    "\052\116\132\146\271\152\072\154\074\155\117\157\111" +
    "\160\150\161\073\175\151\176\136\177\043\200\115\201" +
    "\144\205\273\206\272\222\030\223\157\224\123\225\137" +
    "\226\054\232\053\001\002\000\012\002\uff3f\117\uff3f\132" +
    "\uff3f\147\uff3f\001\002\000\020\002\uff3e\117\uff3e\122\254" +
    "\127\uff25\132\uff3e\147\uff3e\231\uff25\001\002\000\014\005" +
    "\220\011\022\054\225\146\230\223\221\001\002\000\010" +
    "\117\233\132\235\147\234\001\002\000\020\005\ufeb8\011" +
    "\ufeb8\041\236\054\ufeb8\120\ufeb8\146\ufeb8\223\ufeb8\001\002" +
    "\000\020\005\ufebc\011\ufebc\041\ufebc\054\ufebc\120\ufebc\146" +
    "\ufebc\223\ufebc\001\002\000\212\002\uff20\013\uff20\025\uff20" +
    "\027\uff20\030\uff20\031\uff20\032\uff20\033\uff20\034\uff20\035" +
    "\uff20\036\uff20\037\uff20\040\uff20\044\uff20\053\uff20\063\uff20" +
    "\064\uff20\065\uff20\066\uff20\067\uff20\070\uff20\071\uff20\075" +
    "\uff20\076\uff20\077\uff20\100\uff20\101\uff20\102\uff20\103\uff20" +
    "\104\uff20\105\uff20\106\uff20\110\uff20\111\uff20\112\uff20\117" +
    "\uff20\122\uff20\123\uff20\124\uff20\127\uff20\132\uff20\133\uff20" +
    "\134\uff20\146\uff20\147\uff20\150\uff20\152\uff20\153\uff20\154" +
    "\uff20\155\uff20\156\uff20\165\uff20\166\uff20\167\uff20\170\uff20" +
    "\171\uff20\172\uff20\175\uff20\176\uff20\177\uff20\200\uff20\201" +
    "\uff20\223\uff20\224\uff20\225\uff20\226\uff20\231\uff20\232\uff20" +
    "\001\002\000\020\005\ufebd\011\ufebd\041\ufebd\054\ufebd\120" +
    "\ufebd\146\ufebd\223\ufebd\001\002\000\016\005\ufeb9\011\ufeb9" +
    "\054\ufeb9\120\ufeb9\146\ufeb9\223\ufeb9\001\002\000\016\005" +
    "\uff2d\011\uff2d\054\uff2d\120\241\146\uff2d\223\uff2d\001\002" +
    "\000\014\005\220\011\022\054\225\146\230\223\221\001" +
    "\002\000\016\005\ufeb6\011\ufeb6\054\ufeb6\121\242\146\ufeb6" +
    "\223\ufeb6\001\002\000\004\146\244\001\002\000\014\005" +
    "\uff2e\011\uff2e\054\uff2e\146\uff2e\223\uff2e\001\002\000\004" +
    "\223\245\001\002\000\006\147\ufff1\150\250\001\002\000" +
    "\004\147\247\001\002\000\014\005\ufeb7\011\ufeb7\054\ufeb7" +
    "\146\ufeb7\223\ufeb7\001\002\000\004\223\245\001\002\000" +
    "\004\147\ufff0\001\002\000\014\002\uff3c\117\uff3c\122\262" +
    "\132\uff3c\147\uff3c\001\002\000\020\002\uff3b\117\uff3b\122" +
    "\254\127\uff25\132\uff3b\147\uff3b\231\uff25\001\002\000\020" +
    "\005\ufeb8\011\ufeb8\041\236\054\ufeb8\120\ufeb8\146\ufeb8\223" +
    "\ufeb8\001\002\000\016\005\uff2d\011\uff2d\054\uff2d\120\241" +
    "\146\uff2d\223\uff2d\001\002\000\014\005\220\011\022\054" +
    "\225\146\230\223\221\001\002\000\014\002\uff35\117\uff35" +
    "\122\uff35\132\uff35\147\uff35\001\002\000\014\002\uff36\117" +
    "\uff36\122\uff36\132\uff36\147\uff36\001\002\000\020\002\uff34" +
    "\117\uff34\122\uff34\127\uff25\132\uff34\147\uff34\231\uff25\001" +
    "\002\000\020\005\ufeb8\011\ufeb8\041\236\054\ufeb8\120\ufeb8" +
    "\146\ufeb8\223\ufeb8\001\002\000\016\005\uff2d\011\uff2d\054" +
    "\uff2d\120\241\146\uff2d\223\uff2d\001\002\000\014\005\220" +
    "\011\022\054\225\146\230\223\221\001\002\000\014\002" +
    "\uff37\117\uff37\122\uff37\132\uff37\147\uff37\001\002\000\010" +
    "\117\uff3f\132\uff3f\147\267\001\002\000\014\002\uff32\117" +
    "\uff32\122\uff32\132\uff32\147\uff32\001\002\000\014\002\uff30" +
    "\117\uff30\122\uff30\132\uff30\147\uff30\001\002\000\116\005" +
    "\220\011\022\034\113\035\056\036\103\037\045\040\110" +
    "\053\126\054\225\063\121\064\141\065\063\067\031\070" +
    "\102\071\061\114\071\115\052\116\132\146\302\152\072" +
    "\154\074\155\117\157\111\160\150\161\073\175\151\176" +
    "\136\177\043\200\115\201\144\205\273\206\272\222\030" +
    "\223\303\224\123\225\137\226\054\232\053\001\002\000" +
    "\070\002\uff00\027\uff00\030\uff00\031\uff00\032\uff00\075\uff00" +
    "\076\uff00\077\uff00\100\uff00\101\uff00\102\uff00\103\uff00\104" +
    "\uff00\105\uff00\106\uff00\110\uff00\117\uff00\122\uff00\123\uff00" +
    "\124\uff00\127\uff00\132\uff00\133\uff00\134\uff00\147\uff00\150" +
    "\uff00\231\uff00\001\002\000\070\002\ufeff\027\ufeff\030\ufeff" +
    "\031\ufeff\032\ufeff\075\ufeff\076\ufeff\077\ufeff\100\ufeff\101" +
    "\ufeff\102\ufeff\103\ufeff\104\ufeff\105\ufeff\106\ufeff\110\ufeff" +
    "\117\ufeff\122\ufeff\123\ufeff\124\ufeff\127\ufeff\132\ufeff\133" +
    "\ufeff\134\ufeff\147\ufeff\150\ufeff\231\ufeff\001\002\000\070" +
    "\002\uff01\027\uff01\030\uff01\031\uff01\032\uff01\075\uff01\076" +
    "\uff01\077\uff01\100\uff01\101\uff01\102\uff01\103\uff01\104\uff01" +
    "\105\uff01\106\uff01\110\uff01\117\uff01\122\uff01\123\uff01\124" +
    "\uff01\127\uff01\132\uff01\133\uff01\134\uff01\147\uff01\150\uff01" +
    "\231\uff01\001\002\000\070\002\uff03\027\uff03\030\uff03\031" +
    "\uff03\032\uff03\075\uff03\076\uff03\077\uff03\100\uff03\101\uff03" +
    "\102\uff03\103\uff03\104\uff03\105\uff03\106\uff03\110\uff03\117" +
    "\uff03\122\uff03\123\uff03\124\uff03\127\uff03\132\uff03\133\uff03" +
    "\134\uff03\147\uff03\150\uff03\231\uff03\001\002\000\016\002" +
    "\ufefc\117\ufefc\122\ufefc\132\ufefc\147\ufefc\150\277\001\002" +
    "\000\110\034\113\035\056\036\103\037\045\040\110\053" +
    "\126\063\121\064\141\065\063\067\031\070\102\071\061" +
    "\114\071\115\052\116\132\146\271\152\072\154\074\155" +
    "\117\157\111\160\150\161\073\175\151\176\136\177\043" +
    "\200\115\201\144\205\273\206\272\222\030\223\157\224" +
    "\123\225\137\226\054\232\053\001\002\000\014\002\ufefb" +
    "\117\ufefb\122\ufefb\132\ufefb\147\ufefb\001\002\000\040\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\105\uffdc" +
    "\106\uffdc\110\uffdc\123\uffdc\124\uffdc\147\uffdc\150\uffdc\154" +
    "\334\155\335\001\002\000\070\005\220\011\022\034\113" +
    "\035\056\036\103\037\045\040\110\053\126\054\225\146" +
    "\302\152\072\154\074\155\117\157\111\160\150\161\073" +
    "\175\151\176\136\177\043\200\115\201\144\222\030\223" +
    "\303\224\123\225\137\226\054\232\053\001\002\000\100" +
    "\013\uff42\033\uffba\044\uffba\075\uffba\076\uffba\077\uffba\100" +
    "\uffba\101\uffba\102\uffba\105\uffba\106\uffba\110\uffba\111\uffba" +
    "\123\uffba\124\uffba\127\uff42\147\uffba\150\uffba\151\323\153" +
    "\uffba\154\uffba\155\uffba\156\uffba\165\uffba\166\uffba\167\uffba" +
    "\170\uffba\171\uffba\172\uffba\223\uff42\231\uff42\001\002\000" +
    "\072\013\313\033\uffce\044\uffce\075\uffce\076\uffce\077\uffce" +
    "\100\uffce\101\uffce\102\uffce\105\uffce\106\uffce\110\uffce\111" +
    "\uffce\123\uffce\124\uffce\147\uffce\150\uffce\153\uffce\154\uffce" +
    "\155\uffce\156\uffce\165\uffce\166\uffce\167\uffce\170\uffce\171" +
    "\uffce\172\uffce\223\312\001\002\000\006\147\310\150\307" +
    "\001\002\000\006\147\ufefe\150\ufefe\001\002\000\110\034" +
    "\113\035\056\036\103\037\045\040\110\053\126\063\121" +
    "\064\141\065\063\067\031\070\102\071\061\114\071\115" +
    "\052\116\132\146\101\152\072\154\074\155\117\157\111" +
    "\160\150\161\073\175\151\176\136\177\043\200\115\201" +
    "\144\205\273\206\272\222\030\223\157\224\123\225\137" +
    "\226\054\232\053\001\002\000\070\002\uff02\027\uff02\030" +
    "\uff02\031\uff02\032\uff02\075\uff02\076\uff02\077\uff02\100\uff02" +
    "\101\uff02\102\uff02\103\uff02\104\uff02\105\uff02\106\uff02\110" +
    "\uff02\117\uff02\122\uff02\123\uff02\124\uff02\127\uff02\132\uff02" +
    "\133\uff02\134\uff02\147\uff02\150\uff02\231\uff02\001\002\000" +
    "\006\147\ufefd\150\ufefd\001\002\000\040\002\uff21\027\uff21" +
    "\030\uff21\031\uff21\032\uff21\117\uff21\122\uff21\127\uff21\132" +
    "\uff21\133\uff21\134\uff21\146\317\147\uff21\150\uff21\231\uff21" +
    "\001\002\000\004\223\315\001\002\000\036\002\uff26\027" +
    "\uff26\030\uff26\031\uff26\032\uff26\117\uff26\122\uff26\127\uff26" +
    "\132\uff26\133\uff26\134\uff26\147\uff26\150\uff26\231\uff26\001" +
    "\002\000\040\002\uff21\027\uff21\030\uff21\031\uff21\032\uff21" +
    "\117\uff21\122\uff21\127\uff21\132\uff21\133\uff21\134\uff21\146" +
    "\317\147\uff21\150\uff21\231\uff21\001\002\000\036\002\uff24" +
    "\027\uff24\030\uff24\031\uff24\032\uff24\117\uff24\122\uff24\127" +
    "\uff24\132\uff24\133\uff24\134\uff24\147\uff24\150\uff24\231\uff24" +
    "\001\002\000\004\223\245\001\002\000\004\147\321\001" +
    "\002\000\036\002\uff22\027\uff22\030\uff22\031\uff22\032\uff22" +
    "\117\uff22\122\uff22\127\uff22\132\uff22\133\uff22\134\uff22\147" +
    "\uff22\150\uff22\231\uff22\001\002\000\036\002\uff23\027\uff23" +
    "\030\uff23\031\uff23\032\uff23\117\uff23\122\uff23\127\uff23\132" +
    "\uff23\133\uff23\134\uff23\147\uff23\150\uff23\231\uff23\001\002" +
    "\000\004\223\324\001\002\000\100\013\uff41\033\uffb9\044" +
    "\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9" +
    "\105\uffb9\106\uffb9\110\uffb9\111\uffb9\123\uffb9\124\uffb9\127" +
    "\uff41\147\uffb9\150\uffb9\151\325\153\uffb9\154\uffb9\155\uffb9" +
    "\156\uffb9\165\uffb9\166\uffb9\167\uffb9\170\uffb9\171\uffb9\172" +
    "\uffb9\223\uff41\231\uff41\001\002\000\004\223\326\001\002" +
    "\000\100\013\uff40\033\uffb8\044\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\105\uffb8\106\uffb8\110\uffb8" +
    "\111\uffb8\123\uffb8\124\uffb8\127\uff40\147\uffb8\150\uffb8\151" +
    "\327\153\uffb8\154\uffb8\155\uffb8\156\uffb8\165\uffb8\166\uffb8" +
    "\167\uffb8\170\uffb8\171\uffb8\172\uffb8\223\uff40\231\uff40\001" +
    "\002\000\004\223\330\001\002\000\212\002\uffb7\013\uffb7" +
    "\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\044\uffb7\053\uffb7" +
    "\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7" +
    "\103\uffb7\104\uffb7\105\uffb7\106\uffb7\110\uffb7\111\uffb7\112" +
    "\uffb7\117\uffb7\122\uffb7\123\uffb7\124\uffb7\127\uffb7\132\uffb7" +
    "\133\uffb7\134\uffb7\146\uffb7\147\uffb7\150\uffb7\152\uffb7\153" +
    "\uffb7\154\uffb7\155\uffb7\156\uffb7\165\uffb7\166\uffb7\167\uffb7" +
    "\170\uffb7\171\uffb7\172\uffb7\175\uffb7\176\uffb7\177\uffb7\200" +
    "\uffb7\201\uffb7\223\uffb7\224\uffb7\225\uffb7\226\uffb7\231\uffb7" +
    "\232\uffb7\001\002\000\006\154\356\155\357\001\002\000" +
    "\006\153\351\156\352\001\002\000\006\154\334\155\335" +
    "\001\002\000\052\034\113\035\056\036\103\037\045\040" +
    "\110\053\126\146\160\152\072\154\074\155\117\175\151" +
    "\176\136\177\043\200\115\201\144\223\157\224\123\225" +
    "\137\226\054\232\053\001\002\000\062\034\113\035\056" +
    "\036\103\037\045\040\110\053\126\146\160\152\072\154" +
    "\074\155\117\157\111\160\150\161\073\175\151\176\136" +
    "\177\043\200\115\201\144\222\030\223\157\224\123\225" +
    "\137\226\054\232\053\001\002\000\106\002\uff67\013\uff67" +
    "\025\uff67\027\uff67\030\uff67\031\uff67\032\uff67\075\uff67\076" +
    "\uff67\077\uff67\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67" +
    "\105\uff67\106\uff67\110\uff67\117\uff67\122\uff67\123\uff67\124" +
    "\uff67\127\uff67\132\uff67\133\uff67\134\uff67\147\uff67\150\uff67" +
    "\153\342\154\uff67\155\uff67\156\343\223\uff67\231\uff67\001" +
    "\002\000\004\147\340\001\002\000\016\165\174\166\171" +
    "\167\167\170\165\171\164\172\163\001\002\000\102\002" +
    "\uff56\013\uff56\025\uff56\027\uff56\030\uff56\031\uff56\032\uff56" +
    "\075\uff56\076\uff56\077\uff56\100\uff56\101\uff56\102\uff56\103" +
    "\uff56\104\uff56\105\uff56\106\uff56\110\uff56\117\uff56\122\uff56" +
    "\123\uff56\124\uff56\127\uff56\132\uff56\133\uff56\134\uff56\147" +
    "\uff56\150\uff56\154\uff56\155\uff56\223\uff56\231\uff56\001\002" +
    "\000\052\034\113\035\056\036\103\037\045\040\110\053" +
    "\126\146\160\152\072\154\074\155\117\175\151\176\136" +
    "\177\043\200\115\201\144\223\157\224\123\225\137\226" +
    "\054\232\053\001\002\000\052\034\113\035\056\036\103" +
    "\037\045\040\110\053\126\146\160\152\072\154\074\155" +
    "\117\175\151\176\136\177\043\200\115\201\144\223\157" +
    "\224\123\225\137\226\054\232\053\001\002\000\110\002" +
    "\uffd1\013\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\066\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102" +
    "\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\110\uffd1\117\uffd1" +
    "\122\uffd1\123\uffd1\124\uffd1\127\uffd1\132\uffd1\133\uffd1\134" +
    "\uffd1\147\uffd1\150\uffd1\153\uffd1\154\uffd1\155\uffd1\156\uffd1" +
    "\223\uffd1\231\uffd1\001\002\000\106\002\uff53\013\uff53\025" +
    "\uff53\027\uff53\030\uff53\031\uff53\032\uff53\075\uff53\076\uff53" +
    "\077\uff53\100\uff53\101\uff53\102\uff53\103\uff53\104\uff53\105" +
    "\uff53\106\uff53\110\uff53\117\uff53\122\uff53\123\uff53\124\uff53" +
    "\127\uff53\132\uff53\133\uff53\134\uff53\147\uff53\150\uff53\153" +
    "\uff53\154\uff53\155\uff53\156\uff53\223\uff53\231\uff53\001\002" +
    "\000\046\034\113\035\056\036\103\037\045\040\110\053" +
    "\126\146\160\152\072\175\151\176\136\177\043\200\115" +
    "\201\144\223\157\224\123\225\137\226\054\232\053\001" +
    "\002\000\106\002\uff54\013\uff54\025\uff54\027\uff54\030\uff54" +
    "\031\uff54\032\uff54\075\uff54\076\uff54\077\uff54\100\uff54\101" +
    "\uff54\102\uff54\103\uff54\104\uff54\105\uff54\106\uff54\110\uff54" +
    "\117\uff54\122\uff54\123\uff54\124\uff54\127\uff54\132\uff54\133" +
    "\uff54\134\uff54\147\uff54\150\uff54\153\uff54\154\uff54\155\uff54" +
    "\156\uff54\223\uff54\231\uff54\001\002\000\106\002\uff68\013" +
    "\uff68\025\uff68\027\uff68\030\uff68\031\uff68\032\uff68\075\uff68" +
    "\076\uff68\077\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104" +
    "\uff68\105\uff68\106\uff68\110\uff68\117\uff68\122\uff68\123\uff68" +
    "\124\uff68\127\uff68\132\uff68\133\uff68\134\uff68\147\uff68\150" +
    "\uff68\153\342\154\uff68\155\uff68\156\343\223\uff68\231\uff68" +
    "\001\002\000\052\034\113\035\056\036\103\037\045\040" +
    "\110\053\126\146\160\152\072\154\074\155\117\175\151" +
    "\176\136\177\043\200\115\201\144\223\157\224\123\225" +
    "\137\226\054\232\053\001\002\000\052\034\113\035\056" +
    "\036\103\037\045\040\110\053\126\146\160\152\072\154" +
    "\074\155\117\175\151\176\136\177\043\200\115\201\144" +
    "\223\157\224\123\225\137\226\054\232\053\001\002\000" +
    "\110\002\uffd4\013\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\066\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101" +
    "\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\110\uffd4" +
    "\117\uffd4\122\uffd4\123\uffd4\124\uffd4\127\uffd4\132\uffd4\133" +
    "\uffd4\134\uffd4\147\uffd4\150\uffd4\153\uffd4\154\uffd4\155\uffd4" +
    "\156\uffd4\223\uffd4\231\uffd4\001\002\000\110\002\uffd5\013" +
    "\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\066\uffd5" +
    "\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103" +
    "\uffd5\104\uffd5\105\uffd5\106\uffd5\110\uffd5\117\uffd5\122\uffd5" +
    "\123\uffd5\124\uffd5\127\uffd5\132\uffd5\133\uffd5\134\uffd5\147" +
    "\uffd5\150\uffd5\153\uffd5\154\uffd5\155\uffd5\156\uffd5\223\uffd5" +
    "\231\uffd5\001\002\000\106\002\uff52\013\uff52\025\uff52\027" +
    "\uff52\030\uff52\031\uff52\032\uff52\075\uff52\076\uff52\077\uff52" +
    "\100\uff52\101\uff52\102\uff52\103\uff52\104\uff52\105\uff52\106" +
    "\uff52\110\uff52\117\uff52\122\uff52\123\uff52\124\uff52\127\uff52" +
    "\132\uff52\133\uff52\134\uff52\147\uff52\150\uff52\153\uff52\154" +
    "\uff52\155\uff52\156\uff52\223\uff52\231\uff52\001\002\000\062" +
    "\034\113\035\056\036\103\037\045\040\110\053\126\146" +
    "\160\152\072\154\074\155\117\157\111\160\150\161\073" +
    "\175\151\176\136\177\043\200\115\201\144\222\030\223" +
    "\157\224\123\225\137\226\054\232\053\001\002\000\052" +
    "\034\113\035\056\036\103\037\045\040\110\053\126\146" +
    "\160\152\072\154\074\155\117\175\151\176\136\177\043" +
    "\200\115\201\144\223\157\224\123\225\137\226\054\232" +
    "\053\001\002\000\106\002\uff57\013\uff57\025\uff57\027\uff57" +
    "\030\uff57\031\uff57\032\uff57\075\uff57\076\uff57\077\uff57\100" +
    "\uff57\101\uff57\102\uff57\103\uff57\104\uff57\105\uff57\106\uff57" +
    "\110\uff57\117\uff57\122\uff57\123\uff57\124\uff57\127\uff57\132" +
    "\uff57\133\uff57\134\uff57\147\uff57\150\uff57\153\342\154\uff57" +
    "\155\uff57\156\343\223\uff57\231\uff57\001\002\000\106\002" +
    "\uff58\013\uff58\025\uff58\027\uff58\030\uff58\031\uff58\032\uff58" +
    "\075\uff58\076\uff58\077\uff58\100\uff58\101\uff58\102\uff58\103" +
    "\uff58\104\uff58\105\uff58\106\uff58\110\uff58\117\uff58\122\uff58" +
    "\123\uff58\124\uff58\127\uff58\132\uff58\133\uff58\134\uff58\147" +
    "\uff58\150\uff58\153\342\154\uff58\155\uff58\156\343\223\uff58" +
    "\231\uff58\001\002\000\102\002\uff69\013\uff69\025\uff69\027" +
    "\uff69\030\uff69\031\uff69\032\uff69\075\uff69\076\uff69\077\uff69" +
    "\100\uff69\101\uff69\102\uff69\103\uff69\104\uff69\105\uff69\106" +
    "\uff69\110\uff69\117\uff69\122\uff69\123\uff69\124\uff69\127\uff69" +
    "\132\uff69\133\uff69\134\uff69\147\uff69\150\uff69\154\uff69\155" +
    "\uff69\223\uff69\231\uff69\001\002\000\036\002\ufeb2\027\ufeb2" +
    "\030\ufeb2\031\ufeb2\032\ufeb2\117\ufeb2\122\ufeb2\127\ufeb2\132" +
    "\ufeb2\133\ufeb2\134\ufeb2\147\ufeb2\150\ufeb2\231\ufeb2\001\002" +
    "\000\036\002\uff27\027\uff27\030\uff27\031\uff27\032\uff27\117" +
    "\uff27\122\uff27\127\uff27\132\uff27\133\uff27\134\uff27\147\uff27" +
    "\150\uff27\231\uff27\001\002\000\006\146\160\223\221\001" +
    "\002\000\004\130\367\001\002\000\006\146\160\223\221" +
    "\001\002\000\036\002\uff25\027\uff25\030\uff25\031\uff25\032" +
    "\uff25\117\uff25\122\uff25\127\uff25\132\uff25\133\uff25\134\uff25" +
    "\147\uff25\150\uff25\231\uff25\001\002\000\036\002\uff2c\027" +
    "\uff2c\030\uff2c\031\uff2c\032\uff2c\117\uff2c\122\uff2c\127\uff2c" +
    "\132\uff2c\133\uff2c\134\uff2c\147\uff2c\150\uff2c\231\uff2c\001" +
    "\002\000\036\002\uff2a\027\uff2a\030\uff2a\031\uff2a\032\uff2a" +
    "\117\uff2a\122\uff2a\127\366\132\uff2a\133\374\134\375\147" +
    "\uff2a\150\uff2a\231\365\001\002\000\036\002\uff2b\027\uff2b" +
    "\030\uff2b\031\uff2b\032\uff2b\117\uff2b\122\uff2b\127\uff2b\132" +
    "\uff2b\133\uff2b\134\uff2b\147\uff2b\150\uff2b\231\uff2b\001\002" +
    "\000\114\034\113\035\056\036\103\037\045\040\110\053" +
    "\126\063\121\064\141\065\063\067\031\070\102\071\061" +
    "\106\u0104\113\u0105\114\071\115\052\116\132\146\u0106\152" +
    "\072\154\074\155\117\157\111\160\150\161\073\175\151" +
    "\176\136\177\043\200\115\201\144\205\273\206\272\222" +
    "\030\223\157\224\123\225\137\226\054\232\053\001\002" +
    "\000\004\146\376\001\002\000\004\223\245\001\002\000" +
    "\004\147\u0100\001\002\000\036\002\uff28\027\uff28\030\uff28" +
    "\031\uff28\032\uff28\117\uff28\122\uff28\127\uff28\132\uff28\133" +
    "\uff28\134\uff28\147\uff28\150\uff28\231\uff28\001\002\000\044" +
    "\002\uff14\027\uff14\030\uff14\031\uff14\032\uff14\103\uff14\104" +
    "\uff14\105\uff14\117\uff14\122\uff14\127\uff14\132\uff14\133\uff14" +
    "\134\uff14\147\uff14\150\uff14\231\uff14\001\002\000\066\033" +
    "\u0144\044\u0143\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1" +
    "\102\uffd1\105\uffd1\106\u0119\110\uffd1\111\ufeba\123\uffd1\124" +
    "\uffd1\147\uffd1\150\uffd1\153\uffd1\154\uffd1\155\uffd1\156\uffd1" +
    "\165\174\166\171\167\167\170\165\171\164\172\163\001" +
    "\002\000\040\044\u013e\075\uff8f\076\uff8f\077\uff8f\100\uff8f" +
    "\101\uff8f\102\uff8f\105\uff8f\106\u0119\110\uff8f\111\ufeba\123" +
    "\uff8f\124\uff8f\147\uff8f\150\uff8f\001\002\000\112\034\113" +
    "\035\056\036\103\037\045\040\110\053\126\063\121\064" +
    "\141\065\063\067\031\070\102\071\061\113\u0105\114\071" +
    "\115\052\116\132\146\u0106\152\072\154\074\155\117\157" +
    "\111\160\150\161\073\175\151\176\136\177\043\200\115" +
    "\201\144\205\273\206\272\222\030\223\157\224\123\225" +
    "\137\226\054\232\053\001\002\000\004\146\160\001\002" +
    "\000\122\005\220\011\022\034\113\035\056\036\103\037" +
    "\045\040\110\053\126\054\225\063\121\064\141\065\063" +
    "\067\031\070\102\071\061\106\u0104\113\u0105\114\071\115" +
    "\052\116\132\146\u0138\152\072\154\074\155\117\157\111" +
    "\160\150\161\073\175\151\176\136\177\043\200\115\201" +
    "\144\205\273\206\272\222\030\223\303\224\123\225\137" +
    "\226\054\232\053\001\002\000\040\002\uff29\027\uff29\030" +
    "\uff29\031\uff29\032\uff29\103\u0136\117\uff29\122\uff29\127\uff29" +
    "\132\uff29\133\uff29\134\uff29\147\uff29\150\uff29\231\uff29\001" +
    "\002\000\042\002\uff1a\027\uff1a\030\uff1a\031\uff1a\032\uff1a" +
    "\103\uff1a\104\uff1a\117\uff1a\122\uff1a\127\uff1a\132\uff1a\133" +
    "\uff1a\134\uff1a\147\uff1a\150\uff1a\231\uff1a\001\002\000\044" +
    "\002\uff19\027\uff19\030\uff19\031\uff19\032\uff19\103\uff19\104" +
    "\uff19\105\u0133\117\uff19\122\uff19\127\uff19\132\uff19\133\uff19" +
    "\134\uff19\147\uff19\150\uff19\231\uff19\001\002\000\030\075" +
    "\u0113\076\u0117\077\u0116\100\u0115\101\u0112\102\u0118\105\u011a" +
    "\106\u0119\110\ufeba\123\u010f\124\u0111\001\002\000\042\002" +
    "\uff1f\027\uff1f\030\uff1f\031\uff1f\032\uff1f\103\uff1f\104\u010d" +
    "\117\uff1f\122\uff1f\127\uff1f\132\uff1f\133\uff1f\134\uff1f\147" +
    "\uff1f\150\uff1f\231\uff1f\001\002\000\042\002\uff1d\027\uff1d" +
    "\030\uff1d\031\uff1d\032\uff1d\103\uff1d\104\uff1d\117\uff1d\122" +
    "\uff1d\127\uff1d\132\uff1d\133\uff1d\134\uff1d\147\uff1d\150\uff1d" +
    "\231\uff1d\001\002\000\114\034\113\035\056\036\103\037" +
    "\045\040\110\053\126\063\121\064\141\065\063\067\031" +
    "\070\102\071\061\106\u0104\113\u0105\114\071\115\052\116" +
    "\132\146\u0106\152\072\154\074\155\117\157\111\160\150" +
    "\161\073\175\151\176\136\177\043\200\115\201\144\205" +
    "\273\206\272\222\030\223\157\224\123\225\137\226\054" +
    "\232\053\001\002\000\042\002\uff1c\027\uff1c\030\uff1c\031" +
    "\uff1c\032\uff1c\103\uff1c\104\uff1c\117\uff1c\122\uff1c\127\uff1c" +
    "\132\uff1c\133\uff1c\134\uff1c\147\uff1c\150\uff1c\231\uff1c\001" +
    "\002\000\012\125\u012d\126\ufec1\131\ufec1\146\ufec1\001\002" +
    "\000\004\110\u0124\001\002\000\110\034\113\035\056\036" +
    "\103\037\045\040\110\053\126\063\121\064\141\065\063" +
    "\067\031\070\102\071\061\114\071\115\052\116\132\146" +
    "\271\152\072\154\074\155\117\157\111\160\150\161\073" +
    "\175\151\176\136\177\043\200\115\201\144\205\273\206" +
    "\272\222\030\223\157\224\123\225\137\226\054\232\053" +
    "\001\002\000\116\034\ufef3\035\ufef3\036\ufef3\037\ufef3\040" +
    "\ufef3\041\ufef3\042\ufef3\043\ufef3\053\ufef3\063\ufef3\064\ufef3" +
    "\065\ufef3\067\ufef3\070\ufef3\071\ufef3\114\ufef3\115\ufef3\116" +
    "\ufef3\146\ufef3\152\ufef3\154\ufef3\155\ufef3\157\ufef3\160\ufef3" +
    "\161\ufef3\175\ufef3\176\ufef3\177\ufef3\200\ufef3\201\ufef3\205" +
    "\ufef3\206\ufef3\222\ufef3\223\ufef3\224\ufef3\225\ufef3\226\ufef3" +
    "\232\ufef3\001\002\000\116\034\ufef7\035\ufef7\036\ufef7\037" +
    "\ufef7\040\ufef7\041\ufef7\042\ufef7\043\ufef7\053\ufef7\063\ufef7" +
    "\064\ufef7\065\ufef7\067\ufef7\070\ufef7\071\ufef7\114\ufef7\115" +
    "\ufef7\116\ufef7\146\ufef7\152\ufef7\154\ufef7\155\ufef7\157\ufef7" +
    "\160\ufef7\161\ufef7\175\ufef7\176\ufef7\177\ufef7\200\ufef7\201" +
    "\ufef7\205\ufef7\206\ufef7\222\ufef7\223\ufef7\224\ufef7\225\ufef7" +
    "\226\ufef7\232\ufef7\001\002\000\116\034\113\035\056\036" +
    "\103\037\045\040\110\041\u011d\042\u0120\043\u011f\053\126" +
    "\063\121\064\141\065\063\067\031\070\102\071\061\114" +
    "\071\115\052\116\132\146\271\152\072\154\074\155\117" +
    "\157\111\160\150\161\073\175\151\176\136\177\043\200" +
    "\115\201\144\205\273\206\272\222\030\223\157\224\123" +
    "\225\137\226\054\232\053\001\002\000\116\034\ufef4\035" +
    "\ufef4\036\ufef4\037\ufef4\040\ufef4\041\ufef4\042\ufef4\043\ufef4" +
    "\053\ufef4\063\ufef4\064\ufef4\065\ufef4\067\ufef4\070\ufef4\071" +
    "\ufef4\114\ufef4\115\ufef4\116\ufef4\146\ufef4\152\ufef4\154\ufef4" +
    "\155\ufef4\157\ufef4\160\ufef4\161\ufef4\175\ufef4\176\ufef4\177" +
    "\ufef4\200\ufef4\201\ufef4\205\ufef4\206\ufef4\222\ufef4\223\ufef4" +
    "\224\ufef4\225\ufef4\226\ufef4\232\ufef4\001\002\000\116\034" +
    "\ufef5\035\ufef5\036\ufef5\037\ufef5\040\ufef5\041\ufef5\042\ufef5" +
    "\043\ufef5\053\ufef5\063\ufef5\064\ufef5\065\ufef5\067\ufef5\070" +
    "\ufef5\071\ufef5\114\ufef5\115\ufef5\116\ufef5\146\ufef5\152\ufef5" +
    "\154\ufef5\155\ufef5\157\ufef5\160\ufef5\161\ufef5\175\ufef5\176" +
    "\ufef5\177\ufef5\200\ufef5\201\ufef5\205\ufef5\206\ufef5\222\ufef5" +
    "\223\ufef5\224\ufef5\225\ufef5\226\ufef5\232\ufef5\001\002\000" +
    "\116\034\ufef6\035\ufef6\036\ufef6\037\ufef6\040\ufef6\041\ufef6" +
    "\042\ufef6\043\ufef6\053\ufef6\063\ufef6\064\ufef6\065\ufef6\067" +
    "\ufef6\070\ufef6\071\ufef6\114\ufef6\115\ufef6\116\ufef6\146\ufef6" +
    "\152\ufef6\154\ufef6\155\ufef6\157\ufef6\160\ufef6\161\ufef6\175" +
    "\ufef6\176\ufef6\177\ufef6\200\ufef6\201\ufef6\205\ufef6\206\ufef6" +
    "\222\ufef6\223\ufef6\224\ufef6\225\ufef6\226\ufef6\232\ufef6\001" +
    "\002\000\116\034\ufef2\035\ufef2\036\ufef2\037\ufef2\040\ufef2" +
    "\041\ufef2\042\ufef2\043\ufef2\053\ufef2\063\ufef2\064\ufef2\065" +
    "\ufef2\067\ufef2\070\ufef2\071\ufef2\114\ufef2\115\ufef2\116\ufef2" +
    "\146\ufef2\152\ufef2\154\ufef2\155\ufef2\157\ufef2\160\ufef2\161" +
    "\ufef2\175\ufef2\176\ufef2\177\ufef2\200\ufef2\201\ufef2\205\ufef2" +
    "\206\ufef2\222\ufef2\223\ufef2\224\ufef2\225\ufef2\226\ufef2\232" +
    "\ufef2\001\002\000\016\110\ufebb\111\ufebb\114\ufebb\115\ufebb" +
    "\116\ufebb\206\ufebb\001\002\000\006\106\u0119\206\ufeba\001" +
    "\002\000\004\206\u011c\001\002\000\044\002\uff0a\027\uff0a" +
    "\030\uff0a\031\uff0a\032\uff0a\103\uff0a\104\uff0a\105\uff0a\117" +
    "\uff0a\122\uff0a\127\uff0a\132\uff0a\133\uff0a\134\uff0a\147\uff0a" +
    "\150\uff0a\231\uff0a\001\002\000\004\146\ufefa\001\002\000" +
    "\004\146\160\001\002\000\004\146\ufef8\001\002\000\004" +
    "\146\ufef9\001\002\000\044\002\uff12\027\uff12\030\uff12\031" +
    "\uff12\032\uff12\103\uff12\104\uff12\105\uff12\117\uff12\122\uff12" +
    "\127\uff12\132\uff12\133\uff12\134\uff12\147\uff12\150\uff12\231" +
    "\uff12\001\002\000\044\002\uff10\027\uff10\030\uff10\031\uff10" +
    "\032\uff10\103\uff10\104\uff10\105\uff10\117\uff10\122\uff10\127" +
    "\uff10\132\uff10\133\uff10\134\uff10\147\uff10\150\uff10\231\uff10" +
    "\001\002\000\044\002\uff08\027\uff08\030\uff08\031\uff08\032" +
    "\uff08\103\uff08\104\uff08\105\uff08\117\uff08\122\uff08\127\uff08" +
    "\132\uff08\133\uff08\134\uff08\147\uff08\150\uff08\231\uff08\001" +
    "\002\000\004\146\u0127\001\002\000\044\002\uff11\027\uff11" +
    "\030\uff11\031\uff11\032\uff11\103\uff11\104\uff11\105\uff11\117" +
    "\uff11\122\uff11\127\uff11\132\uff11\133\uff11\134\uff11\147\uff11" +
    "\150\uff11\231\uff11\001\002\000\044\002\uff07\027\uff07\030" +
    "\uff07\031\uff07\032\uff07\103\uff07\104\uff07\105\uff07\117\uff07" +
    "\122\uff07\127\uff07\132\uff07\133\uff07\134\uff07\147\uff07\150" +
    "\uff07\231\uff07\001\002\000\112\005\220\011\022\034\113" +
    "\035\056\036\103\037\045\040\110\053\126\054\225\063" +
    "\121\064\141\065\063\067\031\070\102\071\061\114\071" +
    "\115\052\116\132\146\302\152\072\154\074\155\117\157" +
    "\111\160\150\161\073\175\151\176\136\177\043\200\115" +
    "\201\144\222\030\223\303\224\123\225\137\226\054\232" +
    "\053\001\002\000\004\147\u012c\001\002\000\006\147\uff05" +
    "\150\u012a\001\002\000\104\034\113\035\056\036\103\037" +
    "\045\040\110\053\126\063\121\064\141\065\063\067\031" +
    "\070\102\071\061\114\071\115\052\116\132\146\101\152" +
    "\072\154\074\155\117\157\111\160\150\161\073\175\151" +
    "\176\136\177\043\200\115\201\144\222\030\223\157\224" +
    "\123\225\137\226\054\232\053\001\002\000\004\147\uff04" +
    "\001\002\000\044\002\uff06\027\uff06\030\uff06\031\uff06\032" +
    "\uff06\103\uff06\104\uff06\105\uff06\117\uff06\122\uff06\127\uff06" +
    "\132\uff06\133\uff06\134\uff06\147\uff06\150\uff06\231\uff06\001" +
    "\002\000\010\126\ufec2\131\ufec2\146\ufec2\001\002\000\010" +
    "\126\u0130\131\u0131\146\ufebe\001\002\000\004\146\160\001" +
    "\002\000\026\002\ufec0\106\ufec0\125\ufec0\146\ufec0\147\ufec0" +
    "\150\ufec0\207\ufec0\210\ufec0\211\ufec0\212\ufec0\001\002\000" +
    "\026\002\ufebf\106\ufebf\125\ufebf\146\ufebf\147\ufebf\150\ufebf" +
    "\207\ufebf\210\ufebf\211\ufebf\212\ufebf\001\002\000\044\002" +
    "\uff09\027\uff09\030\uff09\031\uff09\032\uff09\103\uff09\104\uff09" +
    "\105\uff09\117\uff09\122\uff09\127\uff09\132\uff09\133\uff09\134" +
    "\uff09\147\uff09\150\uff09\231\uff09\001\002\000\012\106\u0119" +
    "\114\ufeba\115\ufeba\116\ufeba\001\002\000\010\114\071\115" +
    "\052\116\132\001\002\000\042\002\uff18\027\uff18\030\uff18" +
    "\031\uff18\032\uff18\103\uff18\104\uff18\117\uff18\122\uff18\127" +
    "\uff18\132\uff18\133\uff18\134\uff18\147\uff18\150\uff18\231\uff18" +
    "\001\002\000\114\034\113\035\056\036\103\037\045\040" +
    "\110\053\126\063\121\064\141\065\063\067\031\070\102" +
    "\071\061\106\u0104\113\u0105\114\071\115\052\116\132\146" +
    "\u0106\152\072\154\074\155\117\157\111\160\150\161\073" +
    "\175\151\176\136\177\043\200\115\201\144\205\273\206" +
    "\272\222\030\223\157\224\123\225\137\226\054\232\053" +
    "\001\002\000\042\002\uff1e\027\uff1e\030\uff1e\031\uff1e\032" +
    "\uff1e\103\uff1e\104\u010d\117\uff1e\122\uff1e\127\uff1e\132\uff1e" +
    "\133\uff1e\134\uff1e\147\uff1e\150\uff1e\231\uff1e\001\002\000" +
    "\122\005\220\011\022\034\113\035\056\036\103\037\045" +
    "\040\110\053\126\054\225\063\121\064\141\065\063\067" +
    "\031\070\102\071\061\106\u0104\113\u0105\114\071\115\052" +
    "\116\132\146\u0138\152\072\154\074\155\117\157\111\160" +
    "\150\161\073\175\151\176\136\177\043\200\115\201\144" +
    "\205\273\206\272\222\030\223\303\224\123\225\137\226" +
    "\054\232\053\001\002\000\006\103\u0136\147\u013b\001\002" +
    "\000\034\075\uff03\076\uff03\077\uff03\100\uff03\101\uff03\102" +
    "\uff03\105\uff03\106\uff03\110\uff03\123\uff03\124\uff03\147\ufefe" +
    "\150\ufefe\001\002\000\044\002\uff13\027\uff13\030\uff13\031" +
    "\uff13\032\uff13\103\uff13\104\uff13\105\uff13\117\uff13\122\uff13" +
    "\127\uff13\132\uff13\133\uff13\134\uff13\147\uff13\150\uff13\231" +
    "\uff13\001\002\000\044\002\uff0f\027\uff0f\030\uff0f\031\uff0f" +
    "\032\uff0f\103\uff0f\104\uff0f\105\uff0f\117\uff0f\122\uff0f\127" +
    "\uff0f\132\uff0f\133\uff0f\134\uff0f\147\uff0f\150\uff0f\231\uff0f" +
    "\001\002\000\042\002\uff1b\027\uff1b\030\uff1b\031\uff1b\032" +
    "\uff1b\103\uff1b\104\uff1b\117\uff1b\122\uff1b\127\uff1b\132\uff1b" +
    "\133\uff1b\134\uff1b\147\uff1b\150\uff1b\231\uff1b\001\002\000" +
    "\062\034\113\035\056\036\103\037\045\040\110\053\126" +
    "\063\121\064\141\065\063\067\031\070\102\071\061\146" +
    "\160\152\072\175\151\176\136\177\043\200\115\201\144" +
    "\223\157\224\123\225\137\226\054\232\053\001\002\000" +
    "\004\111\u0140\001\002\000\062\034\113\035\056\036\103" +
    "\037\045\040\110\053\126\063\121\064\141\065\063\067" +
    "\031\070\102\071\061\146\160\152\072\175\151\176\136" +
    "\177\043\200\115\201\144\223\157\224\123\225\137\226" +
    "\054\232\053\001\002\000\050\002\ufec3\027\ufec3\030\ufec3" +
    "\031\ufec3\032\ufec3\044\u013e\103\ufec3\104\ufec3\105\ufec3\112" +
    "\u0149\117\ufec3\122\ufec3\127\ufec3\132\ufec3\133\ufec3\134\ufec3" +
    "\147\ufec3\150\ufec3\231\ufec3\001\002\000\050\002\uff0c\027" +
    "\uff0c\030\uff0c\031\uff0c\032\uff0c\033\u0144\044\u0143\103\uff0c" +
    "\104\uff0c\105\uff0c\117\uff0c\122\uff0c\127\uff0c\132\uff0c\133" +
    "\uff0c\134\uff0c\147\uff0c\150\uff0c\231\uff0c\001\002\000\062" +
    "\034\113\035\056\036\103\037\045\040\110\053\126\063" +
    "\121\064\141\065\063\067\031\070\102\071\061\146\160" +
    "\152\072\175\151\176\136\177\043\200\115\201\144\223" +
    "\157\224\123\225\137\226\054\232\053\001\002\000\004" +
    "\223\221\001\002\000\104\002\uff86\013\uff86\025\uff86\027" +
    "\uff86\030\uff86\031\uff86\032\uff86\044\uff86\075\uff86\076\uff86" +
    "\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105" +
    "\uff86\106\uff86\110\uff86\111\uff86\112\uff86\117\uff86\122\uff86" +
    "\123\uff86\124\uff86\127\uff86\132\uff86\133\uff86\134\uff86\147" +
    "\uff86\150\uff86\223\uff86\231\uff86\001\002\000\104\002\uff88" +
    "\013\uff88\025\uff88\027\uff88\030\uff88\031\uff88\032\uff88\044" +
    "\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88" +
    "\103\uff88\104\uff88\105\uff88\106\uff88\110\uff88\111\uff88\112" +
    "\uff88\117\uff88\122\uff88\123\uff88\124\uff88\127\uff88\132\uff88" +
    "\133\uff88\134\uff88\147\uff88\150\uff88\223\uff88\231\uff88\001" +
    "\002\000\106\002\uff89\013\uff89\025\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\u0144\044\uff89\075\uff89\076\uff89\077" +
    "\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89" +
    "\106\uff89\110\uff89\111\uff89\112\uff89\117\uff89\122\uff89\123" +
    "\uff89\124\uff89\127\uff89\132\uff89\133\uff89\134\uff89\147\uff89" +
    "\150\uff89\223\uff89\231\uff89\001\002\000\044\002\uff0e\027" +
    "\uff0e\030\uff0e\031\uff0e\032\uff0e\103\uff0e\104\uff0e\105\uff0e" +
    "\117\uff0e\122\uff0e\127\uff0e\132\uff0e\133\uff0e\134\uff0e\147" +
    "\uff0e\150\uff0e\231\uff0e\001\002\000\062\034\113\035\056" +
    "\036\103\037\045\040\110\053\126\063\121\064\141\065" +
    "\063\067\031\070\102\071\061\146\160\152\072\175\151" +
    "\176\136\177\043\200\115\201\144\223\157\224\123\225" +
    "\137\226\054\232\053\001\002\000\046\002\ufec4\027\ufec4" +
    "\030\ufec4\031\ufec4\032\ufec4\044\u013e\103\ufec4\104\ufec4\105" +
    "\ufec4\117\ufec4\122\ufec4\127\ufec4\132\ufec4\133\ufec4\134\ufec4" +
    "\147\ufec4\150\ufec4\231\ufec4\001\002\000\006\033\u0144\044" +
    "\u0143\001\002\000\104\002\uff8b\013\uff8b\025\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\044\uff8b\075\uff8b\076\uff8b\077" +
    "\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b" +
    "\106\uff8b\110\uff8b\111\uff8b\112\uff8b\117\uff8b\122\uff8b\123" +
    "\uff8b\124\uff8b\127\uff8b\132\uff8b\133\uff8b\134\uff8b\147\uff8b" +
    "\150\uff8b\223\uff8b\231\uff8b\001\002\000\106\002\uff8a\013" +
    "\uff8a\025\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\u0144" +
    "\044\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102" +
    "\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\110\uff8a\111\uff8a" +
    "\112\uff8a\117\uff8a\122\uff8a\123\uff8a\124\uff8a\127\uff8a\132" +
    "\uff8a\133\uff8a\134\uff8a\147\uff8a\150\uff8a\223\uff8a\231\uff8a" +
    "\001\002\000\004\111\u014f\001\002\000\062\034\113\035" +
    "\056\036\103\037\045\040\110\053\126\063\121\064\141" +
    "\065\063\067\031\070\102\071\061\146\160\152\072\175" +
    "\151\176\136\177\043\200\115\201\144\223\157\224\123" +
    "\225\137\226\054\232\053\001\002\000\046\002\uff0b\027" +
    "\uff0b\030\uff0b\031\uff0b\032\uff0b\044\u013e\103\uff0b\104\uff0b" +
    "\105\uff0b\117\uff0b\122\uff0b\127\uff0b\132\uff0b\133\uff0b\134" +
    "\uff0b\147\uff0b\150\uff0b\231\uff0b\001\002\000\050\002\uff0d" +
    "\027\uff0d\030\uff0d\031\uff0d\032\uff0d\033\u0144\044\u0143\103" +
    "\uff0d\104\uff0d\105\uff0d\117\uff0d\122\uff0d\127\uff0d\132\uff0d" +
    "\133\uff0d\134\uff0d\147\uff0d\150\uff0d\231\uff0d\001\002\000" +
    "\004\223\u0153\001\002\000\160\002\uff41\005\uff41\011\uff41" +
    "\013\uff41\017\uff41\020\uff41\021\uff41\025\uff41\027\uff41\030" +
    "\uff41\031\uff41\032\uff41\044\uff41\054\uff41\075\uff41\076\uff41" +
    "\077\uff41\100\uff41\101\uff41\102\uff41\103\uff41\104\uff41\105" +
    "\uff41\106\uff41\110\uff41\111\uff41\112\uff41\117\uff41\122\uff41" +
    "\123\uff41\124\uff41\125\uff41\126\uff41\127\uff41\131\uff41\132" +
    "\uff41\133\uff41\134\uff41\144\uff41\145\uff41\146\uff41\147\uff41" +
    "\150\uff41\151\u0154\204\uff41\207\uff41\210\uff41\211\uff41\212" +
    "\uff41\213\uff41\214\uff41\215\uff41\216\uff41\223\uff41\231\uff41" +
    "\001\002\000\004\223\u0155\001\002\000\156\002\uff40\005" +
    "\uff40\011\uff40\013\uff40\017\uff40\020\uff40\021\uff40\025\uff40" +
    "\027\uff40\030\uff40\031\uff40\032\uff40\044\uff40\054\uff40\075" +
    "\uff40\076\uff40\077\uff40\100\uff40\101\uff40\102\uff40\103\uff40" +
    "\104\uff40\105\uff40\106\uff40\110\uff40\111\uff40\112\uff40\117" +
    "\uff40\122\uff40\123\uff40\124\uff40\125\uff40\126\uff40\127\uff40" +
    "\131\uff40\132\uff40\133\uff40\134\uff40\144\uff40\145\uff40\146" +
    "\uff40\147\uff40\150\uff40\204\uff40\207\uff40\210\uff40\211\uff40" +
    "\212\uff40\213\uff40\214\uff40\215\uff40\216\uff40\223\uff40\231" +
    "\uff40\001\002\000\014\002\uff31\117\uff31\122\uff31\132\uff31" +
    "\147\uff31\001\002\000\004\223\u0158\001\002\000\214\002" +
    "\uffb9\013\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\044" +
    "\uffb9\053\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9" +
    "\070\uffb9\071\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101" +
    "\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\110\uffb9" +
    "\111\uffb9\112\uffb9\117\uffb9\122\uffb9\123\uffb9\124\uffb9\127" +
    "\uffb9\132\uffb9\133\uffb9\134\uffb9\146\uffb9\147\uffb9\150\uffb9" +
    "\151\u0159\152\uffb9\153\uffb9\154\uffb9\155\uffb9\156\uffb9\165" +
    "\uffb9\166\uffb9\167\uffb9\170\uffb9\171\uffb9\172\uffb9\175\uffb9" +
    "\176\uffb9\177\uffb9\200\uffb9\201\uffb9\223\uffb9\224\uffb9\225" +
    "\uffb9\226\uffb9\231\uffb9\232\uffb9\001\002\000\004\223\u015a" +
    "\001\002\000\214\002\uffb8\013\uffb8\025\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\044\uffb8\053\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\075\uffb8\076\uffb8" +
    "\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105" +
    "\uffb8\106\uffb8\110\uffb8\111\uffb8\112\uffb8\117\uffb8\122\uffb8" +
    "\123\uffb8\124\uffb8\127\uffb8\132\uffb8\133\uffb8\134\uffb8\146" +
    "\uffb8\147\uffb8\150\uffb8\151\327\152\uffb8\153\uffb8\154\uffb8" +
    "\155\uffb8\156\uffb8\165\uffb8\166\uffb8\167\uffb8\170\uffb8\171" +
    "\uffb8\172\uffb8\175\uffb8\176\uffb8\177\uffb8\200\uffb8\201\uffb8" +
    "\223\uffb8\224\uffb8\225\uffb8\226\uffb8\231\uffb8\232\uffb8\001" +
    "\002\000\100\002\uff70\013\uff70\025\uff70\027\uff70\030\uff70" +
    "\031\uff70\032\uff70\044\uff70\075\uff70\076\uff70\077\uff70\100" +
    "\uff70\101\uff70\102\uff70\103\uff70\104\uff70\105\uff70\106\uff70" +
    "\110\uff70\117\uff70\122\uff70\123\uff70\124\uff70\127\uff70\132" +
    "\uff70\133\uff70\134\uff70\147\uff70\150\uff70\223\uff70\231\uff70" +
    "\001\002\000\156\002\uff6c\013\uff6c\025\uff6c\027\uff6c\030" +
    "\uff6c\031\uff6c\032\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c" +
    "\040\uff6c\044\uff6c\053\uff6c\063\uff6c\064\uff6c\065\uff6c\067" +
    "\uff6c\070\uff6c\071\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c" +
    "\101\uff6c\102\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\110" +
    "\uff6c\117\uff6c\122\uff6c\123\uff6c\124\uff6c\127\uff6c\132\uff6c" +
    "\133\uff6c\134\uff6c\146\uff6c\147\uff6c\150\uff6c\152\uff6c\175" +
    "\uff6c\176\uff6c\177\uff6c\200\uff6c\201\uff6c\223\uff6c\224\uff6c" +
    "\225\uff6c\226\uff6c\231\uff6c\232\uff6c\001\002\000\156\002" +
    "\uff6d\013\uff6d\025\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d" +
    "\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d\044\uff6d\053" +
    "\uff6d\063\uff6d\064\uff6d\065\uff6d\067\uff6d\070\uff6d\071\uff6d" +
    "\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103" +
    "\uff6d\104\uff6d\105\uff6d\106\uff6d\110\uff6d\117\uff6d\122\uff6d" +
    "\123\uff6d\124\uff6d\127\uff6d\132\uff6d\133\uff6d\134\uff6d\146" +
    "\uff6d\147\uff6d\150\uff6d\152\uff6d\175\uff6d\176\uff6d\177\uff6d" +
    "\200\uff6d\201\uff6d\223\uff6d\224\uff6d\225\uff6d\226\uff6d\231" +
    "\uff6d\232\uff6d\001\002\000\156\002\uff6e\013\uff6e\025\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\032\uff6e\034\uff6e\035\uff6e\036" +
    "\uff6e\037\uff6e\040\uff6e\044\uff6e\053\uff6e\063\uff6e\064\uff6e" +
    "\065\uff6e\067\uff6e\070\uff6e\071\uff6e\075\uff6e\076\uff6e\077" +
    "\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e" +
    "\106\uff6e\110\uff6e\117\uff6e\122\uff6e\123\uff6e\124\uff6e\127" +
    "\uff6e\132\uff6e\133\uff6e\134\uff6e\146\uff6e\147\uff6e\150\uff6e" +
    "\152\uff6e\175\uff6e\176\uff6e\177\uff6e\200\uff6e\201\uff6e\223" +
    "\uff6e\224\uff6e\225\uff6e\226\uff6e\231\uff6e\232\uff6e\001\002" +
    "\000\110\012\024\034\ufea2\035\ufea2\036\ufea2\037\ufea2\040" +
    "\ufea2\041\025\053\ufea2\063\ufea2\064\ufea2\065\ufea2\067\ufea2" +
    "\070\ufea2\071\ufea2\114\ufea2\115\ufea2\116\ufea2\146\ufea2\152" +
    "\ufea2\154\ufea2\155\ufea2\157\ufea2\160\ufea2\161\ufea2\175\ufea2" +
    "\176\ufea2\177\ufea2\200\ufea2\201\ufea2\222\ufea2\223\ufea2\224" +
    "\ufea2\225\ufea2\226\ufea2\232\ufea2\001\002\000\104\034\113" +
    "\035\056\036\103\037\045\040\110\053\126\063\121\064" +
    "\141\065\063\067\031\070\102\071\061\114\071\115\052" +
    "\116\132\146\101\152\072\154\074\155\117\157\111\160" +
    "\150\161\073\175\151\176\136\177\043\200\115\201\144" +
    "\222\030\223\157\224\123\225\137\226\054\232\053\001" +
    "\002\000\004\147\u0162\001\002\000\212\002\uffb4\013\uffb4" +
    "\025\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\044\uffb4\053\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4" +
    "\103\uffb4\104\uffb4\105\uffb4\106\uffb4\110\uffb4\111\uffb4\112" +
    "\uffb4\117\uffb4\122\uffb4\123\uffb4\124\uffb4\127\uffb4\132\uffb4" +
    "\133\uffb4\134\uffb4\146\uffb4\147\uffb4\150\uffb4\152\uffb4\153" +
    "\uffb4\154\uffb4\155\uffb4\156\uffb4\165\uffb4\166\uffb4\167\uffb4" +
    "\170\uffb4\171\uffb4\172\uffb4\175\uffb4\176\uffb4\177\uffb4\200" +
    "\uffb4\201\uffb4\223\uffb4\224\uffb4\225\uffb4\226\uffb4\231\uffb4" +
    "\232\uffb4\001\002\000\062\034\113\035\056\036\103\037" +
    "\045\040\110\053\126\063\121\064\141\065\063\067\031" +
    "\070\102\071\061\146\160\152\072\175\151\176\136\177" +
    "\043\200\115\201\144\223\157\224\123\225\137\226\054" +
    "\232\053\001\002\000\062\034\uff6f\035\uff6f\036\uff6f\037" +
    "\uff6f\040\uff6f\053\uff6f\063\uff6f\064\uff6f\065\uff6f\067\uff6f" +
    "\070\uff6f\071\uff6f\146\uff6f\152\uff6f\175\uff6f\176\uff6f\177" +
    "\uff6f\200\uff6f\201\uff6f\223\uff6f\224\uff6f\225\uff6f\226\uff6f" +
    "\232\uff6f\001\002\000\106\034\113\035\056\036\103\037" +
    "\045\040\110\053\126\063\121\064\141\065\063\067\031" +
    "\070\102\071\061\114\071\115\052\116\132\146\101\152" +
    "\072\154\074\155\117\157\111\160\150\161\073\175\151" +
    "\176\136\177\043\200\115\201\144\206\u0167\222\030\223" +
    "\157\224\123\225\137\226\054\232\053\001\002\000\004" +
    "\013\u0169\001\002\000\004\013\uffa1\001\002\000\004\013" +
    "\uffa2\001\002\000\006\223\u016b\227\u016c\001\002\000\004" +
    "\147\u0170\001\002\000\012\002\uffea\147\uffea\150\uffea\151" +
    "\u016e\001\002\000\004\147\uff9f\001\002\000\004\147\uffa0" +
    "\001\002\000\004\223\u016f\001\002\000\010\002\uffe9\147" +
    "\uffe9\150\uffe9\001\002\000\212\002\uffa3\013\uffa3\025\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\044\uffa3\053\uffa3\063\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\075" +
    "\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3" +
    "\104\uffa3\105\uffa3\106\uffa3\110\uffa3\111\uffa3\112\uffa3\117" +
    "\uffa3\122\uffa3\123\uffa3\124\uffa3\127\uffa3\132\uffa3\133\uffa3" +
    "\134\uffa3\146\uffa3\147\uffa3\150\uffa3\152\uffa3\153\uffa3\154" +
    "\uffa3\155\uffa3\156\uffa3\165\uffa3\166\uffa3\167\uffa3\170\uffa3" +
    "\171\uffa3\172\uffa3\175\uffa3\176\uffa3\177\uffa3\200\uffa3\201" +
    "\uffa3\223\uffa3\224\uffa3\225\uffa3\226\uffa3\231\uffa3\232\uffa3" +
    "\001\002\000\006\153\u0173\223\u0172\001\002\000\044\013" +
    "\uffb9\025\uffb9\033\uffb9\044\uffb9\150\uffb9\151\u0174\153\uffb9" +
    "\154\uffb9\155\uffb9\156\uffb9\165\uffb9\166\uffb9\167\uffb9\170" +
    "\uffb9\171\uffb9\172\uffb9\223\uffb9\001\002\000\006\025\ufeed" +
    "\150\ufeed\001\002\000\006\153\u0176\223\u0175\001\002\000" +
    "\044\013\uffb8\025\uffb8\033\uffb8\044\uffb8\150\uffb8\151\u0177" +
    "\153\uffb8\154\uffb8\155\uffb8\156\uffb8\165\uffb8\166\uffb8\167" +
    "\uffb8\170\uffb8\171\uffb8\172\uffb8\223\uffb8\001\002\000\006" +
    "\025\ufeec\150\ufeec\001\002\000\006\153\u0178\223\330\001" +
    "\002\000\006\025\ufeeb\150\ufeeb\001\002\000\062\034\113" +
    "\035\056\036\103\037\045\040\110\053\126\063\121\064" +
    "\141\065\063\067\031\070\102\071\061\146\160\152\072" +
    "\175\151\176\136\177\043\200\115\201\144\223\157\224" +
    "\123\225\137\226\054\232\053\001\002\000\006\025\u0188" +
    "\044\u013e\001\002\000\006\025\u017c\044\u0163\001\002\000" +
    "\052\034\113\035\056\036\103\037\045\040\110\053\126" +
    "\146\160\152\072\154\074\155\117\175\151\176\136\177" +
    "\043\200\115\201\144\223\157\224\123\225\137\226\054" +
    "\232\053\001\002\000\012\066\u0181\147\ufeaf\154\u0180\155" +
    "\u0183\001\002\000\016\066\uffd9\147\uffd9\153\u017f\154\uffd9" +
    "\155\uffd9\156\352\001\002\000\052\034\113\035\056\036" +
    "\103\037\045\040\110\053\126\146\160\152\072\154\074" +
    "\155\117\175\151\176\136\177\043\200\115\201\144\223" +
    "\157\224\123\225\137\226\054\232\053\001\002\000\052" +
    "\034\113\035\056\036\103\037\045\040\110\053\126\146" +
    "\160\152\072\154\074\155\117\175\151\176\136\177\043" +
    "\200\115\201\144\223\157\224\123\225\137\226\054\232" +
    "\053\001\002\000\052\034\113\035\056\036\103\037\045" +
    "\040\110\053\126\146\160\152\072\154\074\155\117\175" +
    "\151\176\136\177\043\200\115\201\144\223\157\224\123" +
    "\225\137\226\054\232\053\001\002\000\004\147\u0185\001" +
    "\002\000\052\034\113\035\056\036\103\037\045\040\110" +
    "\053\126\146\160\152\072\154\074\155\117\175\151\176" +
    "\136\177\043\200\115\201\144\223\157\224\123\225\137" +
    "\226\054\232\053\001\002\000\110\002\uffd7\013\uffd7\025" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\066\uffd7\075\uffd7" +
    "\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104" +
    "\uffd7\105\uffd7\106\uffd7\110\uffd7\117\uffd7\122\uffd7\123\uffd7" +
    "\124\uffd7\127\uffd7\132\uffd7\133\uffd7\134\uffd7\147\uffd7\150" +
    "\uffd7\153\u017f\154\uffd7\155\uffd7\156\352\223\uffd7\231\uffd7" +
    "\001\002\000\164\002\uff6b\013\uff6b\025\uff6b\027\uff6b\030" +
    "\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b" +
    "\037\uff6b\040\uff6b\044\uff6b\053\uff6b\063\uff6b\064\uff6b\065" +
    "\uff6b\067\uff6b\070\uff6b\071\uff6b\075\uff6b\076\uff6b\077\uff6b" +
    "\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b\105\uff6b\106" +
    "\uff6b\110\uff6b\111\uff6b\112\uff6b\117\uff6b\122\uff6b\123\uff6b" +
    "\124\uff6b\127\uff6b\132\uff6b\133\uff6b\134\uff6b\146\uff6b\147" +
    "\uff6b\150\uff6b\152\uff6b\175\uff6b\176\uff6b\177\uff6b\200\uff6b" +
    "\201\uff6b\223\uff6b\224\uff6b\225\uff6b\226\uff6b\231\uff6b\232" +
    "\uff6b\001\002\000\010\147\ufeb0\154\u0180\155\u0183\001\002" +
    "\000\110\002\uffd8\013\uffd8\025\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\066\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8" +
    "\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\110" +
    "\uffd8\117\uffd8\122\uffd8\123\uffd8\124\uffd8\127\uffd8\132\uffd8" +
    "\133\uffd8\134\uffd8\147\uffd8\150\uffd8\153\u017f\154\uffd8\155" +
    "\uffd8\156\352\223\uffd8\231\uffd8\001\002\000\052\034\113" +
    "\035\056\036\103\037\045\040\110\053\126\146\160\152" +
    "\072\154\074\155\117\175\151\176\136\177\043\200\115" +
    "\201\144\223\157\224\123\225\137\226\054\232\053\001" +
    "\002\000\012\066\u0181\147\ufeaf\154\u0180\155\u0183\001\002" +
    "\000\004\147\u018b\001\002\000\164\002\uff7d\013\uff7d\025" +
    "\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d" +
    "\035\uff7d\036\uff7d\037\uff7d\040\uff7d\044\uff7d\053\uff7d\063" +
    "\uff7d\064\uff7d\065\uff7d\067\uff7d\070\uff7d\071\uff7d\075\uff7d" +
    "\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104" +
    "\uff7d\105\uff7d\106\uff7d\110\uff7d\111\uff7d\112\uff7d\117\uff7d" +
    "\122\uff7d\123\uff7d\124\uff7d\127\uff7d\132\uff7d\133\uff7d\134" +
    "\uff7d\146\uff7d\147\uff7d\150\uff7d\152\uff7d\175\uff7d\176\uff7d" +
    "\177\uff7d\200\uff7d\201\uff7d\223\uff7d\224\uff7d\225\uff7d\226" +
    "\uff7d\231\uff7d\232\uff7d\001\002\000\006\025\ufeee\150\ufeee" +
    "\001\002\000\006\025\ufeb3\150\ufeb3\001\002\000\004\223" +
    "\u018f\001\002\000\006\025\ufeb4\150\ufeb4\001\002\000\112" +
    "\012\024\034\ufea2\035\ufea2\036\ufea2\037\ufea2\040\ufea2\041" +
    "\025\053\ufea2\063\ufea2\064\ufea2\065\ufea2\067\ufea2\070\ufea2" +
    "\071\ufea2\114\ufea2\115\ufea2\116\ufea2\146\ufea2\152\ufea2\153" +
    "\u0191\154\ufea2\155\ufea2\157\ufea2\160\ufea2\161\ufea2\175\ufea2" +
    "\176\ufea2\177\ufea2\200\ufea2\201\ufea2\222\ufea2\223\ufea2\224" +
    "\ufea2\225\ufea2\226\ufea2\232\ufea2\001\002\000\004\147\u0195" +
    "\001\002\000\104\034\113\035\056\036\103\037\045\040" +
    "\110\053\126\063\121\064\141\065\063\067\031\070\102" +
    "\071\061\114\071\115\052\116\132\146\101\152\072\154" +
    "\074\155\117\157\111\160\150\161\073\175\151\176\136" +
    "\177\043\200\115\201\144\222\030\223\157\224\123\225" +
    "\137\226\054\232\053\001\002\000\004\147\u0194\001\002" +
    "\000\212\002\uffb5\013\uffb5\025\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\044\uffb5\053\uffb5\063\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\075\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106" +
    "\uffb5\110\uffb5\111\uffb5\112\uffb5\117\uffb5\122\uffb5\123\uffb5" +
    "\124\uffb5\127\uffb5\132\uffb5\133\uffb5\134\uffb5\146\uffb5\147" +
    "\uffb5\150\uffb5\152\uffb5\153\uffb5\154\uffb5\155\uffb5\156\uffb5" +
    "\165\uffb5\166\uffb5\167\uffb5\170\uffb5\171\uffb5\172\uffb5\175" +
    "\uffb5\176\uffb5\177\uffb5\200\uffb5\201\uffb5\223\uffb5\224\uffb5" +
    "\225\uffb5\226\uffb5\231\uffb5\232\uffb5\001\002\000\212\002" +
    "\uffb6\013\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\044" +
    "\uffb6\053\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\110\uffb6" +
    "\111\uffb6\112\uffb6\117\uffb6\122\uffb6\123\uffb6\124\uffb6\127" +
    "\uffb6\132\uffb6\133\uffb6\134\uffb6\146\uffb6\147\uffb6\150\uffb6" +
    "\152\uffb6\153\uffb6\154\uffb6\155\uffb6\156\uffb6\165\uffb6\166" +
    "\uffb6\167\uffb6\170\uffb6\171\uffb6\172\uffb6\175\uffb6\176\uffb6" +
    "\177\uffb6\200\uffb6\201\uffb6\223\uffb6\224\uffb6\225\uffb6\226" +
    "\uffb6\231\uffb6\232\uffb6\001\002\000\062\034\113\035\056" +
    "\036\103\037\045\040\110\053\126\063\121\064\141\065" +
    "\063\067\031\070\102\071\061\146\160\152\072\175\151" +
    "\176\136\177\043\200\115\201\144\223\157\224\123\225" +
    "\137\226\054\232\053\001\002\000\006\044\u013e\134\u0198" +
    "\001\002\000\004\223\221\001\002\000\004\147\u019a\001" +
    "\002\000\164\002\uff7a\013\uff7a\025\uff7a\027\uff7a\030\uff7a" +
    "\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037" +
    "\uff7a\040\uff7a\044\uff7a\053\uff7a\063\uff7a\064\uff7a\065\uff7a" +
    "\067\uff7a\070\uff7a\071\uff7a\075\uff7a\076\uff7a\077\uff7a\100" +
    "\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a" +
    "\110\uff7a\111\uff7a\112\uff7a\117\uff7a\122\uff7a\123\uff7a\124" +
    "\uff7a\127\uff7a\132\uff7a\133\uff7a\134\uff7a\146\uff7a\147\uff7a" +
    "\150\uff7a\152\uff7a\175\uff7a\176\uff7a\177\uff7a\200\uff7a\201" +
    "\uff7a\223\uff7a\224\uff7a\225\uff7a\226\uff7a\231\uff7a\232\uff7a" +
    "\001\002\000\104\002\uff87\013\uff87\025\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\044\uff87\075\uff87\076\uff87\077\uff87" +
    "\100\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106" +
    "\uff87\110\uff87\111\uff87\112\uff87\117\uff87\122\uff87\123\uff87" +
    "\124\uff87\127\uff87\132\uff87\133\uff87\134\uff87\147\uff87\150" +
    "\uff87\223\uff87\231\uff87\001\002\000\004\223\221\001\002" +
    "\000\110\002\ufea6\013\ufea6\025\ufea6\027\ufea6\030\ufea6\031" +
    "\ufea6\032\ufea6\044\ufea6\075\ufea6\076\ufea6\077\ufea6\100\ufea6" +
    "\101\ufea6\102\ufea6\103\ufea6\104\ufea6\105\ufea6\106\ufea6\110" +
    "\ufea6\111\ufea6\112\ufea6\117\ufea6\122\ufea6\123\ufea6\124\ufea6" +
    "\127\ufea6\132\ufea6\133\ufea6\134\ufea6\144\ufea6\145\ufea6\147" +
    "\ufea6\150\ufea6\223\ufea6\231\ufea6\001\002\000\116\002\uff60" +
    "\013\uff60\025\uff60\027\uff60\030\uff60\031\uff60\032\uff60\075" +
    "\uff60\076\uff60\077\uff60\100\uff60\101\uff60\102\uff60\103\uff60" +
    "\104\uff60\105\uff60\106\uff60\110\uff60\117\uff60\122\uff60\123" +
    "\uff60\124\uff60\125\uff60\127\uff60\132\uff60\133\uff60\134\uff60" +
    "\147\uff60\150\uff60\154\uff60\155\uff60\162\uff60\207\uff60\210" +
    "\uff60\211\uff60\212\uff60\223\uff60\231\uff60\001\002\000\052" +
    "\034\113\035\056\036\103\037\045\040\110\053\126\146" +
    "\160\152\072\154\074\155\117\175\151\176\136\177\043" +
    "\200\115\201\144\223\157\224\123\225\137\226\054\232" +
    "\053\001\002\000\072\025\uff71\034\113\035\056\036\103" +
    "\037\045\040\110\053\126\063\121\064\141\065\063\067" +
    "\031\070\102\071\061\072\u01a3\073\u01a7\074\u01a6\146\160" +
    "\152\072\175\151\176\136\177\043\200\115\201\144\223" +
    "\157\224\123\225\137\226\054\232\053\001\002\000\010" +
    "\025\uff72\044\u013e\147\uff76\001\002\000\004\025\u01ad\001" +
    "\002\000\064\025\uff75\034\uff75\035\uff75\036\uff75\037\uff75" +
    "\040\uff75\053\uff75\063\uff75\064\uff75\065\uff75\067\uff75\070" +
    "\uff75\071\uff75\146\uff75\152\uff75\175\uff75\176\uff75\177\uff75" +
    "\200\uff75\201\uff75\223\uff75\224\uff75\225\uff75\226\uff75\232" +
    "\uff75\001\002\000\004\147\u01ac\001\002\000\064\025\uff71" +
    "\034\113\035\056\036\103\037\045\040\110\053\126\063" +
    "\121\064\141\065\063\067\031\070\102\071\061\146\160" +
    "\152\072\175\151\176\136\177\043\200\115\201\144\223" +
    "\157\224\123\225\137\226\054\232\053\001\002\000\064" +
    "\025\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\053" +
    "\uff73\063\uff73\064\uff73\065\uff73\067\uff73\070\uff73\071\uff73" +
    "\146\uff73\152\uff73\175\uff73\176\uff73\177\uff73\200\uff73\201" +
    "\uff73\223\uff73\224\uff73\225\uff73\226\uff73\232\uff73\001\002" +
    "\000\064\025\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040" +
    "\uff74\053\uff74\063\uff74\064\uff74\065\uff74\067\uff74\070\uff74" +
    "\071\uff74\146\uff74\152\uff74\175\uff74\176\uff74\177\uff74\200" +
    "\uff74\201\uff74\223\uff74\224\uff74\225\uff74\226\uff74\232\uff74" +
    "\001\002\000\006\025\uff72\044\u013e\001\002\000\004\025" +
    "\u01aa\001\002\000\062\034\113\035\056\036\103\037\045" +
    "\040\110\053\126\063\121\064\141\065\063\067\031\070" +
    "\102\071\061\146\160\152\072\175\151\176\136\177\043" +
    "\200\115\201\144\223\157\224\123\225\137\226\054\232" +
    "\053\001\002\000\006\044\u013e\147\uff78\001\002\000\164" +
    "\002\uff79\013\uff79\025\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79" +
    "\044\uff79\053\uff79\063\uff79\064\uff79\065\uff79\067\uff79\070" +
    "\uff79\071\uff79\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79" +
    "\102\uff79\103\uff79\104\uff79\105\uff79\106\uff79\110\uff79\111" +
    "\uff79\112\uff79\117\uff79\122\uff79\123\uff79\124\uff79\127\uff79" +
    "\132\uff79\133\uff79\134\uff79\146\uff79\147\uff79\150\uff79\152" +
    "\uff79\175\uff79\176\uff79\177\uff79\200\uff79\201\uff79\223\uff79" +
    "\224\uff79\225\uff79\226\uff79\231\uff79\232\uff79\001\002\000" +
    "\062\034\113\035\056\036\103\037\045\040\110\053\126" +
    "\063\121\064\141\065\063\067\031\070\102\071\061\146" +
    "\160\152\072\175\151\176\136\177\043\200\115\201\144" +
    "\223\157\224\123\225\137\226\054\232\053\001\002\000" +
    "\006\044\u013e\147\uff77\001\002\000\004\226\u01b0\001\002" +
    "\000\212\002\uffc0\013\uffc0\025\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\044\uffc0\053\uffc0\063\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\075\uffc0\076\uffc0\077\uffc0" +
    "\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\110\uffc0\111\uffc0\112\uffc0\117\uffc0\122\uffc0\123\uffc0" +
    "\124\uffc0\127\uffc0\132\uffc0\133\uffc0\134\uffc0\146\uffc0\147" +
    "\uffc0\150\uffc0\152\uffc0\153\uffc0\154\uffc0\155\uffc0\156\uffc0" +
    "\165\uffc0\166\uffc0\167\uffc0\170\uffc0\171\uffc0\172\uffc0\175" +
    "\uffc0\176\uffc0\177\uffc0\200\uffc0\201\uffc0\223\uffc0\224\uffc0" +
    "\225\uffc0\226\uffc0\231\uffc0\232\uffc0\001\002\000\104\034" +
    "\113\035\056\036\103\037\045\040\110\053\126\063\121" +
    "\064\141\065\063\067\031\070\102\071\061\114\071\115" +
    "\052\116\132\146\101\152\072\154\074\155\117\157\111" +
    "\160\150\161\073\175\151\176\136\177\043\200\115\201" +
    "\144\222\030\223\124\224\123\225\137\226\054\232\053" +
    "\001\002\000\004\025\ufe9c\001\002\000\006\163\u01b6\164" +
    "\u01b7\001\002\000\102\002\uff65\013\uff65\025\uff65\027\uff65" +
    "\030\uff65\031\uff65\032\uff65\075\uff65\076\uff65\077\uff65\100" +
    "\uff65\101\uff65\102\uff65\103\uff65\104\uff65\105\uff65\106\uff65" +
    "\110\uff65\117\uff65\122\uff65\123\uff65\124\uff65\127\uff65\132" +
    "\uff65\133\uff65\134\uff65\147\uff65\150\uff65\154\uff65\155\uff65" +
    "\223\uff65\231\uff65\001\002\000\102\002\uff5d\013\uff5d\025" +
    "\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d\075\uff5d\076\uff5d" +
    "\077\uff5d\100\uff5d\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105" +
    "\uff5d\106\uff5d\110\uff5d\117\uff5d\122\uff5d\123\uff5d\124\uff5d" +
    "\127\uff5d\132\uff5d\133\uff5d\134\uff5d\147\uff5d\150\uff5d\154" +
    "\uff5d\155\uff5d\223\uff5d\231\uff5d\001\002\000\052\034\113" +
    "\035\056\036\103\037\045\040\110\053\126\146\101\152" +
    "\072\154\074\155\117\175\151\176\136\177\043\200\115" +
    "\201\144\223\157\224\123\225\137\226\054\232\053\001" +
    "\002\000\102\002\uff5b\013\uff5b\025\uff5b\027\uff5b\030\uff5b" +
    "\031\uff5b\032\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\101" +
    "\uff5b\102\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b\110\uff5b" +
    "\117\uff5b\122\uff5b\123\uff5b\124\uff5b\127\uff5b\132\uff5b\133" +
    "\uff5b\134\uff5b\147\uff5b\150\uff5b\154\uff5b\155\uff5b\223\uff5b" +
    "\231\uff5b\001\002\000\102\002\uff5a\013\uff5a\025\uff5a\027" +
    "\uff5a\030\uff5a\031\uff5a\032\uff5a\075\uff5a\076\uff5a\077\uff5a" +
    "\100\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a\106" +
    "\uff5a\110\uff5a\117\uff5a\122\uff5a\123\uff5a\124\uff5a\127\uff5a" +
    "\132\uff5a\133\uff5a\134\uff5a\147\uff5a\150\uff5a\154\u01b9\155" +
    "\357\223\uff5a\231\uff5a\001\002\000\052\034\113\035\056" +
    "\036\103\037\045\040\110\053\126\146\160\152\072\154" +
    "\074\155\117\175\151\176\136\177\043\200\115\201\144" +
    "\223\157\224\123\225\137\226\054\232\053\001\002\000" +
    "\006\146\160\223\221\001\002\000\024\002\ufee7\027\u01bc" +
    "\030\ufee7\031\ufee7\032\ufee7\117\ufee7\122\ufee7\132\ufee7\147" +
    "\ufee7\001\002\000\114\034\113\035\056\036\103\037\045" +
    "\040\110\053\126\063\121\064\141\065\063\067\031\070" +
    "\102\071\061\106\u0104\113\u0105\114\071\115\052\116\132" +
    "\146\u0106\152\072\154\074\155\117\157\111\160\150\161" +
    "\073\175\151\176\136\177\043\200\115\201\144\205\273" +
    "\206\272\222\030\223\157\224\123\225\137\226\054\232" +
    "\053\001\002\000\022\002\ufee5\030\u01be\031\ufee5\032\ufee5" +
    "\117\ufee5\122\ufee5\132\ufee5\147\ufee5\001\002\000\004\223" +
    "\157\001\002\000\020\002\ufee0\031\ufee0\032\u01c1\117\ufee0" +
    "\122\ufee0\132\ufee0\147\ufee0\001\002\000\016\002\ufee3\031" +
    "\u01ce\117\ufee3\122\ufee3\132\ufee3\147\ufee3\001\002\000\006" +
    "\223\u01c2\224\u01c3\001\002\000\026\002\ufede\031\ufede\033" +
    "\ufede\117\ufede\122\ufede\132\ufede\144\ufede\145\ufede\147\ufede" +
    "\150\ufede\001\002\000\026\002\ufedd\031\ufedd\033\ufedd\117" +
    "\ufedd\122\ufedd\132\ufedd\144\ufedd\145\ufedd\147\ufedd\150\ufedd" +
    "\001\002\000\026\002\ufea5\031\ufea5\033\u019c\117\ufea5\122" +
    "\ufea5\132\ufea5\144\ufea5\145\ufea5\147\ufea5\150\ufea5\001\002" +
    "\000\020\002\ufe99\031\ufe99\117\ufe99\122\ufe99\132\ufe99\147" +
    "\ufe99\150\ufe99\001\002\000\020\002\ufee1\031\ufee1\117\ufee1" +
    "\122\ufee1\132\ufee1\147\ufee1\150\u01c7\001\002\000\006\223" +
    "\u01c2\224\u01c3\001\002\000\020\002\ufe98\031\ufe98\117\ufe98" +
    "\122\ufe98\132\ufe98\147\ufe98\150\ufe98\001\002\000\024\002" +
    "\ufeda\031\ufeda\117\ufeda\122\ufeda\132\ufeda\144\u01ca\145\u01cc" +
    "\147\ufeda\150\ufeda\001\002\000\020\002\ufedc\031\ufedc\117" +
    "\ufedc\122\ufedc\132\ufedc\147\ufedc\150\ufedc\001\002\000\020" +
    "\002\ufedf\031\ufedf\117\ufedf\122\ufedf\132\ufedf\147\ufedf\150" +
    "\ufedf\001\002\000\020\002\ufedb\031\ufedb\117\ufedb\122\ufedb" +
    "\132\ufedb\147\ufedb\150\ufedb\001\002\000\014\002\ufef1\117" +
    "\ufef1\122\ufef1\132\ufef1\147\ufef1\001\002\000\114\034\113" +
    "\035\056\036\103\037\045\040\110\053\126\063\121\064" +
    "\141\065\063\067\031\070\102\071\061\106\u0104\113\u0105" +
    "\114\071\115\052\116\132\146\u0106\152\072\154\074\155" +
    "\117\157\111\160\150\161\073\175\151\176\136\177\043" +
    "\200\115\201\144\205\273\206\272\222\030\223\157\224" +
    "\123\225\137\226\054\232\053\001\002\000\016\002\ufee4" +
    "\103\u0136\117\ufee4\122\ufee4\132\ufee4\147\ufee4\001\002\000" +
    "\022\002\ufe9b\031\ufe9b\032\ufe9b\117\ufe9b\122\ufe9b\132\ufe9b" +
    "\147\ufe9b\150\u01d4\001\002\000\024\002\ufea5\031\ufea5\032" +
    "\ufea5\033\u019c\117\ufea5\122\ufea5\132\ufea5\147\ufea5\150\ufea5" +
    "\001\002\000\020\002\ufee6\031\ufee6\032\ufee6\117\ufee6\122" +
    "\ufee6\132\ufee6\147\ufee6\001\002\000\022\002\ufee2\031\ufee2" +
    "\032\ufee2\117\ufee2\122\ufee2\132\ufee2\147\ufee2\150\ufee2\001" +
    "\002\000\004\223\157\001\002\000\020\002\ufe9a\031\ufe9a" +
    "\032\ufe9a\117\ufe9a\122\ufe9a\132\ufe9a\147\ufe9a\001\002\000" +
    "\024\002\ufee8\030\ufee8\031\ufee8\032\ufee8\103\u0136\117\ufee8" +
    "\122\ufee8\132\ufee8\147\ufee8\001\002\000\024\002\ufee9\027" +
    "\ufee9\030\ufee9\031\ufee9\032\ufee9\117\ufee9\122\ufee9\132\ufee9" +
    "\147\ufee9\001\002\000\032\002\ufe9f\027\ufe9f\030\ufe9f\031" +
    "\ufe9f\032\ufe9f\117\ufe9f\122\ufe9f\127\366\132\ufe9f\147\ufe9f" +
    "\150\u01d9\231\365\001\002\000\006\146\160\223\221\001" +
    "\002\000\024\002\ufe9e\027\ufe9e\030\ufe9e\031\ufe9e\032\ufe9e" +
    "\117\ufe9e\122\ufe9e\132\ufe9e\147\ufe9e\001\002\000\062\034" +
    "\113\035\056\036\103\037\045\040\110\053\126\063\121" +
    "\064\141\065\063\067\031\070\102\071\061\146\160\152" +
    "\072\175\151\176\136\177\043\200\115\201\144\223\157" +
    "\224\123\225\137\226\054\232\053\001\002\000\006\044" +
    "\u013e\134\u01dd\001\002\000\004\223\221\001\002\000\004" +
    "\147\u01df\001\002\000\164\002\uff7b\013\uff7b\025\uff7b\027" +
    "\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\044\uff7b\053\uff7b\063\uff7b\064" +
    "\uff7b\065\uff7b\067\uff7b\070\uff7b\071\uff7b\075\uff7b\076\uff7b" +
    "\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105" +
    "\uff7b\106\uff7b\110\uff7b\111\uff7b\112\uff7b\117\uff7b\122\uff7b" +
    "\123\uff7b\124\uff7b\127\uff7b\132\uff7b\133\uff7b\134\uff7b\146" +
    "\uff7b\147\uff7b\150\uff7b\152\uff7b\175\uff7b\176\uff7b\177\uff7b" +
    "\200\uff7b\201\uff7b\223\uff7b\224\uff7b\225\uff7b\226\uff7b\231" +
    "\uff7b\232\uff7b\001\002\000\062\034\113\035\056\036\103" +
    "\037\045\040\110\053\126\063\121\064\141\065\063\067" +
    "\031\070\102\071\061\146\160\152\072\175\151\176\136" +
    "\177\043\200\115\201\144\223\157\224\123\225\137\226" +
    "\054\232\053\001\002\000\006\044\u013e\147\u01e2\001\002" +
    "\000\164\002\uff7c\013\uff7c\025\uff7c\027\uff7c\030\uff7c\031" +
    "\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c" +
    "\040\uff7c\044\uff7c\053\uff7c\063\uff7c\064\uff7c\065\uff7c\067" +
    "\uff7c\070\uff7c\071\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c" +
    "\101\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\110" +
    "\uff7c\111\uff7c\112\uff7c\117\uff7c\122\uff7c\123\uff7c\124\uff7c" +
    "\127\uff7c\132\uff7c\133\uff7c\134\uff7c\146\uff7c\147\uff7c\150" +
    "\uff7c\152\uff7c\175\uff7c\176\uff7c\177\uff7c\200\uff7c\201\uff7c" +
    "\223\uff7c\224\uff7c\225\uff7c\226\uff7c\231\uff7c\232\uff7c\001" +
    "\002\000\014\005\ufed6\011\ufed6\054\ufed6\146\u01e6\223\ufed6" +
    "\001\002\000\014\005\220\011\022\054\225\146\230\223" +
    "\221\001\002\000\004\002\ufed9\001\002\000\004\223\245" +
    "\001\002\000\004\147\u01e8\001\002\000\014\005\ufed7\011" +
    "\ufed7\054\ufed7\146\ufed7\223\ufed7\001\002\000\010\002\ufed8" +
    "\117\233\132\235\001\002\000\010\002\ufece\020\u01ec\021" +
    "\u01ed\001\002\000\004\002\ufed3\001\002\000\004\002\ufed0" +
    "\001\002\000\004\002\ufecf\001\002\000\004\017\u01ef\001" +
    "\002\000\004\223\u01f0\001\002\000\004\075\u01f6\001\002" +
    "\000\006\002\ufee7\027\u01bc\001\002\000\010\002\ufecc\027" +
    "\ufecc\150\u01f3\001\002\000\004\223\u01f0\001\002\000\006" +
    "\002\ufecb\027\ufecb\001\002\000\004\002\ufecd\001\002\000" +
    "\110\034\113\035\056\036\103\037\045\040\110\053\126" +
    "\063\121\064\141\065\063\067\031\070\102\071\061\114" +
    "\071\115\052\116\132\146\101\152\072\154\074\155\117" +
    "\157\111\160\150\161\073\175\151\176\136\177\043\200" +
    "\115\201\144\205\u01f9\206\u01f8\222\030\223\157\224\123" +
    "\225\137\226\054\232\053\001\002\000\010\002\ufeca\027" +
    "\ufeca\150\ufeca\001\002\000\010\002\ufec7\027\ufec7\150\ufec7" +
    "\001\002\000\010\002\ufec8\027\ufec8\150\ufec8\001\002\000" +
    "\010\002\ufec9\027\ufec9\150\ufec9\001\002\000\010\002\ufee7" +
    "\027\u01bc\204\u01fc\001\002\000\004\223\u01fe\001\002\000" +
    "\004\002\ufed5\001\002\000\004\002\ufed4\001\002\000\004" +
    "\223\221\001\002\000\010\214\u0201\215\u0205\216\u0202\001" +
    "\002\000\010\212\u0211\217\u0217\223\ufea0\001\002\000\006" +
    "\217\u0217\223\ufea0\001\002\000\004\002\ufe6b\001\002\000" +
    "\004\002\ufe6f\001\002\000\020\125\u020d\210\u0214\211\u020c" +
    "\212\u0211\213\u020e\217\u0217\223\ufea0\001\002\000\004\002" +
    "\ufe6d\001\002\000\004\002\ufe6e\001\002\000\004\002\ufe6c" +
    "\001\002\000\004\002\ufe70\001\002\000\004\002\ufe65\001" +
    "\002\000\010\002\ufe85\147\ufe85\150\ufe85\001\002\000\026" +
    "\002\ufe74\106\ufe74\125\ufe74\146\ufe74\147\ufe74\150\ufe74\207" +
    "\ufe74\210\ufe74\211\ufe74\212\ufe74\001\002\000\026\002\ufe75" +
    "\106\ufe75\125\ufe75\146\ufe75\147\ufe75\150\ufe75\207\ufe75\210" +
    "\ufe75\211\ufe75\212\ufe75\001\002\000\004\146\u024b\001\002" +
    "\000\012\125\u020d\210\u0214\211\u020c\213\u020e\001\002\000" +
    "\010\002\ufe84\147\ufe84\150\ufe84\001\002\000\004\223\221" +
    "\001\002\000\004\223\u021e\001\002\000\004\146\u021b\001" +
    "\002\000\004\146\u0218\001\002\000\010\002\ufe87\147\ufe87" +
    "\150\ufe87\001\002\000\010\002\ufe86\147\ufe86\150\ufe86\001" +
    "\002\000\004\223\ufea1\001\002\000\114\034\113\035\056" +
    "\036\103\037\045\040\110\053\126\063\121\064\141\065" +
    "\063\067\031\070\102\071\061\106\u0104\113\u0105\114\071" +
    "\115\052\116\132\146\u0106\152\072\154\074\155\117\157" +
    "\111\160\150\161\073\175\151\176\136\177\043\200\115" +
    "\201\144\205\273\206\272\222\030\223\157\224\123\225" +
    "\137\226\054\232\053\001\002\000\006\103\u0136\147\u021a" +
    "\001\002\000\024\002\ufe80\106\ufe80\125\ufe80\147\ufe80\150" +
    "\ufe80\207\ufe80\210\ufe80\211\ufe80\212\ufe80\001\002\000\004" +
    "\223\245\001\002\000\004\147\u021d\001\002\000\010\002" +
    "\ufe82\147\ufe82\150\ufe82\001\002\000\016\135\u0225\136\u0222" +
    "\137\u0223\140\u0220\143\u0224\223\u016b\001\002\000\004\002" +
    "\ufe6a\001\002\000\026\002\uffec\106\uffec\125\uffec\147\uffec" +
    "\150\uffec\205\uffec\207\uffec\210\uffec\211\uffec\212\uffec\001" +
    "\002\000\026\002\ufe94\106\ufe94\125\ufe94\147\ufe94\150\ufe94" +
    "\205\u0227\207\ufe94\210\ufe94\211\ufe94\212\ufe94\001\002\000" +
    "\026\002\uffee\106\uffee\125\uffee\147\uffee\150\uffee\205\uffee" +
    "\207\uffee\210\uffee\211\uffee\212\uffee\001\002\000\026\002" +
    "\uffed\106\uffed\125\uffed\147\uffed\150\uffed\205\uffed\207\uffed" +
    "\210\uffed\211\uffed\212\uffed\001\002\000\026\002\uffeb\106" +
    "\uffeb\125\uffeb\147\uffeb\150\uffeb\205\uffeb\207\uffeb\210\uffeb" +
    "\211\uffeb\212\uffeb\001\002\000\026\002\uffef\106\uffef\125" +
    "\uffef\147\uffef\150\uffef\205\uffef\207\uffef\210\uffef\211\uffef" +
    "\212\uffef\001\002\000\010\002\ufff2\147\ufff2\150\ufff2\001" +
    "\002\000\034\154\074\155\117\157\111\160\150\161\073" +
    "\175\u0242\176\u0240\177\u023e\200\u0246\206\u0247\224\123\225" +
    "\137\232\053\001\002\000\024\002\ufe7e\106\u0230\125\u020d" +
    "\147\ufe7e\150\ufe7e\207\u0229\210\u0214\211\u020c\212\u0211\001" +
    "\002\000\004\223\221\001\002\000\024\002\ufe7a\106\ufe7a" +
    "\125\ufe7a\147\ufe7a\150\ufe7a\207\ufe7a\210\ufe7a\211\ufe7a\212" +
    "\ufe7a\001\002\000\024\002\ufe76\106\ufe76\125\ufe76\147\ufe76" +
    "\150\ufe76\207\ufe76\210\ufe76\211\ufe76\212\ufe76\001\002\000" +
    "\014\106\u0230\125\u020d\207\u0229\210\u0214\211\u020c\001\002" +
    "\000\010\002\ufe7f\147\ufe7f\150\ufe7f\001\002\000\024\002" +
    "\ufe78\106\ufe78\125\ufe78\147\ufe78\150\ufe78\207\ufe78\210\ufe78" +
    "\211\ufe78\212\ufe78\001\002\000\024\002\ufe77\106\ufe77\125" +
    "\ufe77\147\ufe77\150\ufe77\207\ufe77\210\ufe77\211\ufe77\212\ufe77" +
    "\001\002\000\004\206\u0234\001\002\000\010\002\ufff3\147" +
    "\ufff3\150\ufff3\001\002\000\024\002\ufe7d\106\u0230\125\u020d" +
    "\147\ufe7d\150\ufe7d\207\u0229\210\u0214\211\u020c\212\u0211\001" +
    "\002\000\010\002\ufe7c\147\ufe7c\150\ufe7c\001\002\000\024" +
    "\002\ufe79\106\ufe79\125\ufe79\147\ufe79\150\ufe79\207\ufe79\210" +
    "\ufe79\211\ufe79\212\ufe79\001\002\000\024\002\ufe7b\106\ufe7b" +
    "\125\ufe7b\147\ufe7b\150\ufe7b\207\ufe7b\210\ufe7b\211\ufe7b\212" +
    "\ufe7b\001\002\000\030\002\ufebe\106\ufebe\125\ufebe\126\u0130" +
    "\131\u0131\147\ufebe\150\ufebe\207\ufebe\210\ufebe\211\ufebe\212" +
    "\ufebe\001\002\000\032\002\ufe71\106\ufe71\125\ufe71\126\ufe71" +
    "\131\ufe71\146\u0238\147\ufe71\150\ufe71\207\ufe71\210\ufe71\211" +
    "\ufe71\212\ufe71\001\002\000\004\223\245\001\002\000\004" +
    "\147\u023a\001\002\000\030\002\ufe72\106\ufe72\125\ufe72\126" +
    "\ufe72\131\ufe72\147\ufe72\150\ufe72\207\ufe72\210\ufe72\211\ufe72" +
    "\212\ufe72\001\002\000\024\002\ufe73\106\ufe73\125\ufe73\147" +
    "\ufe73\150\ufe73\207\ufe73\210\ufe73\211\ufe73\212\ufe73\001\002" +
    "\000\024\002\ufe8c\106\ufe8c\125\ufe8c\147\ufe8c\150\ufe8c\207" +
    "\ufe8c\210\ufe8c\211\ufe8c\212\ufe8c\001\002\000\024\002\ufe8b" +
    "\106\ufe8b\125\ufe8b\147\ufe8b\150\ufe8b\207\ufe8b\210\ufe8b\211" +
    "\ufe8b\212\ufe8b\001\002\000\024\002\ufe8f\106\ufe8f\125\ufe8f" +
    "\147\ufe8f\150\ufe8f\207\ufe8f\210\ufe8f\211\ufe8f\212\ufe8f\001" +
    "\002\000\006\224\123\225\137\001\002\000\024\002\ufe90" +
    "\106\ufe90\125\ufe90\147\ufe90\150\ufe90\207\ufe90\210\ufe90\211" +
    "\ufe90\212\ufe90\001\002\000\024\002\ufe89\106\ufe89\125\ufe89" +
    "\147\ufe89\150\ufe89\207\ufe89\210\ufe89\211\ufe89\212\ufe89\001" +
    "\002\000\024\002\ufe91\106\ufe91\125\ufe91\147\ufe91\150\ufe91" +
    "\207\ufe91\210\ufe91\211\ufe91\212\ufe91\001\002\000\024\002" +
    "\ufe93\106\ufe93\125\ufe93\147\ufe93\150\ufe93\207\ufe93\210\ufe93" +
    "\211\ufe93\212\ufe93\001\002\000\024\002\ufe92\106\ufe92\125" +
    "\ufe92\147\ufe92\150\ufe92\207\ufe92\210\ufe92\211\ufe92\212\ufe92" +
    "\001\002\000\024\002\ufe95\106\ufe95\125\ufe95\147\ufe95\150" +
    "\ufe95\207\ufe95\210\ufe95\211\ufe95\212\ufe95\001\002\000\024" +
    "\002\ufe8e\106\ufe8e\125\ufe8e\147\ufe8e\150\ufe8e\207\ufe8e\210" +
    "\ufe8e\211\ufe8e\212\ufe8e\001\002\000\024\002\ufe8d\106\ufe8d" +
    "\125\ufe8d\147\ufe8d\150\ufe8d\207\ufe8d\210\ufe8d\211\ufe8d\212" +
    "\ufe8d\001\002\000\024\002\ufe8a\106\ufe8a\125\ufe8a\147\ufe8a" +
    "\150\ufe8a\207\ufe8a\210\ufe8a\211\ufe8a\212\ufe8a\001\002\000" +
    "\024\002\ufe83\020\ufe83\021\ufe83\106\ufe83\125\ufe83\207\ufe83" +
    "\210\ufe83\211\ufe83\213\ufe83\001\002\000\010\002\ufe88\147" +
    "\ufe88\150\ufe88\001\002\000\004\223\245\001\002\000\004" +
    "\147\u024d\001\002\000\004\207\u0229\001\002\000\010\002" +
    "\ufe81\147\ufe81\150\ufe81\001\002\000\004\223\u0250\001\002" +
    "\000\006\017\u0252\214\u0251\001\002\000\004\205\u0255\001" +
    "\002\000\006\002\ufe94\205\u0227\001\002\000\004\002\ufe69" +
    "\001\002\000\004\002\ufe68\001\002\000\004\002\ufe67\001" +
    "\002\000\004\223\u0259\001\002\000\010\002\ufece\020\u01ec" +
    "\021\u01ed\001\002\000\004\002\ufe64\001\002\000\010\002" +
    "\ufece\020\u01ec\021\u01ed\001\002\000\004\002\ufe66\001\002" +
    "\000\004\006\uffe6\001\002\000\004\006\u0269\001\002\000" +
    "\004\006\uffe7\001\002\000\004\223\221\001\002\000\004" +
    "\006\uffe8\001\002\000\004\146\u0261\001\002\000\016\125" +
    "\u020d\210\u0214\211\u020c\212\u0211\213\u020e\223\u021e\001\002" +
    "\000\006\147\ufff7\150\u0267\001\002\000\006\147\ufff4\150" +
    "\ufff4\001\002\000\004\147\u0266\001\002\000\006\147\ufff5" +
    "\150\ufff5\001\002\000\004\002\ufff9\001\002\000\016\125" +
    "\u020d\210\u0214\211\u020c\212\u0211\213\u020e\223\u021e\001\002" +
    "\000\004\147\ufff6\001\002\000\004\223\u026a\001\002\000" +
    "\006\133\uffe1\134\u026c\001\002\000\004\133\u0270\001\002" +
    "\000\010\022\u026f\023\u026d\024\u026e\001\002\000\004\133" +
    "\uffe3\001\002\000\004\133\uffe2\001\002\000\004\133\uffe4" +
    "\001\002\000\004\223\u0271\001\002\000\004\146\u0272\001" +
    "\002\000\004\223\u0273\001\002\000\006\147\uffe0\150\u0276" +
    "\001\002\000\004\147\u0275\001\002\000\004\002\ufff8\001" +
    "\002\000\004\223\u0273\001\002\000\004\147\uffdf\001\002" +
    "\000\006\133\u027a\223\u0279\001\002\000\004\133\u027d\001" +
    "\002\000\004\223\u027b\001\002\000\004\223\u027c\001\002" +
    "\000\004\002\ufed1\001\002\000\004\223\u027e\001\002\000" +
    "\004\002\ufed2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u027d\000\022\027\015\033\003\126\007\127\016\130" +
    "\020\131\022\132\012\252\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u025b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\133\u01fa" +
    "\001\001\000\002\001\001\000\004\133\u01ed\001\001\000" +
    "\004\133\u01e9\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\u01e2\001\001\000\002\001\001\000\004\142" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\144\034\064\046\026\066\050\101\067\102" +
    "\047\103\127\104\037\105\077\106\103\107\075\110\130" +
    "\111\104\112\142\115\144\116\111\117\146\120\057\121" +
    "\074\143\137\144\056\145\031\146\113\147\066\150\121" +
    "\153\063\162\126\163\141\164\134\171\076\175\145\203" +
    "\061\204\041\205\040\210\045\211\036\213\065\214\124" +
    "\215\034\216\117\224\043\225\132\226\106\227\054\230" +
    "\115\231\035\235\046\236\032\237\033\253\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\241\u01ba\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\206\u01b3\001\001" +
    "\000\002\001\001\000\012\050\165\217\172\220\167\221" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\212\u019d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u019a\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\034\064\066\050\133\222\143\137\144" +
    "\056\146\113\147\066\150\121\153\063\162\126\163\141" +
    "\164\134\165\226\175\145\203\332\204\041\205\040\210" +
    "\045\211\036\213\330\214\124\215\034\216\117\224\161" +
    "\225\132\226\106\227\331\240\221\252\213\253\303\263" +
    "\215\264\230\265\214\270\225\271\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\201\u018b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\034\064\046\026\066\050\104\u015b\105" +
    "\077\106\103\113\u015a\114\u015d\115\144\116\111\117\146" +
    "\120\057\121\074\143\137\144\056\146\113\147\066\150" +
    "\121\153\063\162\126\163\141\164\134\224\u015c\253\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\034" +
    "\064\066\050\143\137\144\056\146\113\147\066\150\121" +
    "\153\063\162\126\163\141\164\134\216\160\224\161\225" +
    "\155\253\133\001\001\000\002\001\001\000\004\212\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\133\222\165\226\240\221\252" +
    "\213\253\223\263\215\264\230\265\214\270\225\271\216" +
    "\001\001\000\002\001\001\000\012\050\165\217\172\220" +
    "\167\221\171\001\001\000\004\047\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\212\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\221\200\222\177\001\001\000\004\212\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\133\u0155\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\363\170\362\001\001\000\004\170" +
    "\313\001\001\000\144\034\064\046\026\066\050\101\067" +
    "\102\047\103\127\104\037\105\077\106\103\107\075\110" +
    "\130\111\104\112\142\115\144\116\111\117\146\120\057" +
    "\121\074\143\137\144\056\145\031\146\113\147\066\150" +
    "\121\153\063\162\126\163\141\164\134\171\076\175\145" +
    "\177\267\203\061\204\041\205\040\210\045\211\036\213" +
    "\065\214\124\215\034\216\117\224\043\225\132\226\106" +
    "\227\054\230\273\231\035\232\274\234\275\253\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\133\222" +
    "\165\226\240\221\252\213\253\223\263\215\264\230\265" +
    "\214\270\265\271\216\001\001\000\004\040\231\001\001" +
    "\000\004\041\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\176\237" +
    "\001\001\000\022\133\222\165\252\240\221\252\213\253" +
    "\223\263\215\265\251\271\216\001\001\000\004\042\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\137" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\254\001\001" +
    "\000\004\176\255\001\001\000\022\133\222\165\260\240" +
    "\221\252\213\253\223\263\215\267\257\271\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\262\001\001\000\004\176\263\001\001\000\022" +
    "\133\222\165\260\240\221\252\213\253\223\263\215\267" +
    "\264\271\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\164\034\064\046" +
    "\026\066\050\101\067\102\047\103\127\104\037\105\077" +
    "\106\103\107\075\110\130\111\104\112\142\115\144\116" +
    "\111\117\146\120\057\121\074\133\222\143\137\144\056" +
    "\145\031\146\113\147\066\150\121\153\063\162\126\163" +
    "\141\164\134\165\226\171\076\175\145\203\300\204\041" +
    "\205\040\210\045\211\036\213\065\214\124\215\034\216" +
    "\117\224\043\225\132\226\106\227\054\230\273\231\035" +
    "\232\305\233\304\240\221\252\213\253\303\263\215\264" +
    "\230\265\214\270\225\271\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\144\034\064\046\026\066\050\101\067" +
    "\102\047\103\127\104\037\105\077\106\103\107\075\110" +
    "\130\111\104\112\142\115\144\116\111\117\146\120\057" +
    "\121\074\143\137\144\056\145\031\146\113\147\066\150" +
    "\121\153\063\162\126\163\141\164\134\171\076\175\145" +
    "\177\277\203\061\204\041\205\040\210\045\211\036\213" +
    "\065\214\124\215\034\216\117\224\043\225\132\226\106" +
    "\227\054\230\273\231\035\232\274\234\275\253\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\034\064" +
    "\066\050\133\222\143\137\144\056\146\113\147\066\150" +
    "\121\153\063\162\126\163\141\164\134\165\226\175\145" +
    "\203\332\204\041\205\040\210\045\211\036\213\330\214" +
    "\124\215\034\216\117\224\161\225\132\226\106\227\331" +
    "\240\221\252\213\253\303\263\215\264\230\265\214\270" +
    "\265\271\216\001\001\000\002\001\001\000\004\170\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\034" +
    "\064\046\026\066\050\101\067\102\047\103\127\104\037" +
    "\105\077\106\103\107\075\110\130\111\104\112\142\115" +
    "\144\116\111\117\146\120\057\121\074\143\137\144\056" +
    "\145\031\146\113\147\066\150\121\153\063\162\126\163" +
    "\141\164\134\171\076\175\145\203\061\204\041\205\040" +
    "\210\045\211\036\213\065\214\124\215\034\216\117\224" +
    "\043\225\132\226\106\227\054\230\273\231\035\232\310" +
    "\253\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\167\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\167\315\001\001\000\002\001\001\000\004\137" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\034\064\066\050\143\137\144\056\146\113\147\066" +
    "\150\121\153\063\162\126\163\141\164\134\175\145\214" +
    "\347\215\034\216\117\224\161\225\132\226\106\227\331" +
    "\253\133\001\001\000\062\034\064\066\050\143\137\144" +
    "\056\146\113\147\066\150\121\153\063\162\126\163\141" +
    "\164\134\175\145\204\041\205\040\210\336\211\036\214" +
    "\335\215\034\216\117\224\161\225\132\226\106\227\331" +
    "\253\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\217\340\220\167\221\171\001\001\000\002\001\001" +
    "\000\042\034\064\066\050\143\137\144\056\146\113\147" +
    "\066\150\121\153\063\162\126\163\141\164\134\175\345" +
    "\224\343\225\132\226\346\253\133\001\001\000\042\034" +
    "\064\066\050\143\137\144\056\146\113\147\066\150\121" +
    "\153\063\162\126\163\141\164\134\175\345\224\343\225" +
    "\132\226\344\253\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\034\064\066\050\143\137\144\056\146" +
    "\113\147\066\150\121\153\063\162\126\163\141\164\134" +
    "\224\343\225\155\253\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\034\064\066\050\143\137\144\056" +
    "\146\113\147\066\150\121\153\063\162\126\163\141\164" +
    "\134\175\145\215\354\216\117\224\161\225\132\226\353" +
    "\253\133\001\001\000\042\034\064\066\050\143\137\144" +
    "\056\146\113\147\066\150\121\153\063\162\126\163\141" +
    "\164\134\175\345\224\343\225\132\226\352\253\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\034\064\066\050\143\137\144\056\146\113\147" +
    "\066\150\121\153\063\162\126\163\141\164\134\175\145" +
    "\204\041\205\040\210\361\211\036\214\360\215\034\216" +
    "\117\224\161\225\132\226\106\227\331\253\133\001\001" +
    "\000\052\034\064\066\050\143\137\144\056\146\113\147" +
    "\066\150\121\153\063\162\126\163\141\164\134\175\145" +
    "\214\357\215\034\216\117\224\161\225\132\226\106\227" +
    "\331\253\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\133\222\165\367\240\371\253\223\001\001\000\002" +
    "\001\001\000\012\133\222\165\367\240\370\253\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\166\372" +
    "\001\001\000\002\001\001\000\156\034\064\046\026\066" +
    "\050\101\067\102\u0102\103\127\104\037\105\077\106\103" +
    "\107\075\110\130\111\104\112\142\115\144\116\111\117" +
    "\146\120\057\121\074\143\137\144\056\145\031\146\113" +
    "\147\066\150\121\153\063\162\126\163\141\164\134\171" +
    "\076\175\145\203\061\204\041\205\040\210\045\211\036" +
    "\213\065\214\124\215\034\216\117\224\u0101\225\132\226" +
    "\106\227\054\230\273\231\035\232\274\234\u0109\243\u0100" +
    "\244\u0108\245\u010b\246\u0107\247\u010a\250\u0106\253\133\001" +
    "\001\000\002\001\001\000\004\137\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\050" +
    "\165\052\u014d\217\172\220\167\221\171\001\001\000\004" +
    "\052\u013e\001\001\000\150\034\064\046\026\066\050\101" +
    "\067\102\u0102\103\127\104\037\105\077\106\103\107\075" +
    "\110\130\111\104\112\142\115\144\116\111\117\146\120" +
    "\057\121\074\143\137\144\056\145\031\146\113\147\066" +
    "\150\121\153\063\162\126\163\141\164\134\171\076\175" +
    "\145\203\061\204\041\205\040\210\045\211\036\213\065" +
    "\214\124\215\034\216\117\224\u0101\225\132\226\106\227" +
    "\054\230\273\231\035\232\274\234\u0109\243\u0100\244\u0108" +
    "\246\u013c\253\133\001\001\000\004\253\u013b\001\001\000" +
    "\202\034\064\046\026\066\050\101\067\102\u0102\103\127" +
    "\104\037\105\077\106\103\107\075\110\130\111\104\112" +
    "\142\115\144\116\111\117\146\120\057\121\074\133\222" +
    "\143\137\144\056\145\031\146\113\147\066\150\121\153" +
    "\063\162\126\163\141\164\134\165\226\171\076\175\145" +
    "\203\300\204\041\205\040\210\045\211\036\213\065\214" +
    "\124\215\034\216\117\224\u0101\225\132\226\106\227\054" +
    "\230\273\231\035\232\u0139\233\304\234\u0109\240\221\243" +
    "\u0100\244\u0108\245\u010b\246\u0107\247\u010a\250\u0138\252\213" +
    "\253\303\263\215\264\230\265\214\270\225\271\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\052\u010f\173\u0113\001\001\000\002\001\001\000" +
    "\002\001\001\000\152\034\064\046\026\066\050\101\067" +
    "\102\u0102\103\127\104\037\105\077\106\103\107\075\110" +
    "\130\111\104\112\142\115\144\116\111\117\146\120\057" +
    "\121\074\143\137\144\056\145\031\146\113\147\066\150" +
    "\121\153\063\162\126\163\141\164\134\171\076\175\145" +
    "\203\061\204\041\205\040\210\045\211\036\213\065\214" +
    "\124\215\034\216\117\224\u0101\225\132\226\106\227\054" +
    "\230\273\231\035\232\274\234\u0109\243\u0100\244\u0108\245" +
    "\u010d\246\u0107\253\133\001\001\000\002\001\001\000\004" +
    "\036\u012d\001\001\000\002\001\001\000\142\034\064\046" +
    "\026\066\050\101\067\102\047\103\127\104\037\105\077" +
    "\106\103\107\075\110\130\111\104\112\142\115\144\116" +
    "\111\117\146\120\057\121\074\143\137\144\056\145\031" +
    "\146\113\147\066\150\121\153\063\162\126\163\141\164" +
    "\134\171\076\175\145\203\061\204\041\205\040\210\045" +
    "\211\036\213\065\214\124\215\034\216\117\224\043\225" +
    "\132\226\106\227\054\230\273\231\035\232\274\234\u0122" +
    "\253\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\144\034\064\046\026\066\050\101\067\102\047\103\127" +
    "\104\037\105\077\106\103\107\075\110\130\111\104\112" +
    "\142\115\144\116\111\117\146\120\057\121\074\143\137" +
    "\144\056\145\031\146\113\147\066\150\121\153\063\162" +
    "\126\163\141\164\134\171\076\174\u011d\175\145\203\061" +
    "\204\041\205\040\210\045\211\036\213\065\214\124\215" +
    "\034\216\117\224\043\225\132\226\106\227\054\230\273" +
    "\231\035\232\274\234\u0120\253\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\253\u0121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\253\u0125" +
    "\254\u0124\001\001\000\002\001\001\000\002\001\001\000" +
    "\162\034\064\046\026\066\050\101\067\102\047\103\127" +
    "\104\037\105\077\106\103\107\075\110\130\111\104\112" +
    "\142\115\144\116\111\117\146\120\057\121\074\133\222" +
    "\143\137\144\056\145\031\146\113\147\066\150\121\153" +
    "\063\162\126\163\141\164\134\165\226\171\076\172\u0127" +
    "\175\145\203\061\204\041\205\040\210\045\211\036\213" +
    "\065\214\124\215\034\216\117\224\043\225\132\226\106" +
    "\227\054\230\u0128\231\035\240\221\252\213\253\303\263" +
    "\215\264\230\265\214\270\225\271\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\140\034\064\046\026\066" +
    "\050\101\067\102\047\103\127\104\037\105\077\106\103" +
    "\107\075\110\130\111\104\112\142\115\144\116\111\117" +
    "\146\120\057\121\074\143\137\144\056\145\031\146\113" +
    "\147\066\150\121\153\063\162\126\163\141\164\134\171" +
    "\076\172\u012a\175\145\203\061\204\041\205\040\210\045" +
    "\211\036\213\065\214\124\215\034\216\117\224\043\225" +
    "\132\226\106\227\054\230\u0128\231\035\253\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\u012e\001\001\000\004\253\u0131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u0133\001\001\000\004\171\u0134\001\001\000\002\001\001" +
    "\000\154\034\064\046\026\066\050\101\067\102\u0102\103" +
    "\127\104\037\105\077\106\103\107\075\110\130\111\104" +
    "\112\142\115\144\116\111\117\146\120\057\121\074\143" +
    "\137\144\056\145\031\146\113\147\066\150\121\153\063" +
    "\162\126\163\141\164\134\171\076\175\145\203\061\204" +
    "\041\205\040\210\045\211\036\213\065\214\124\215\034" +
    "\216\117\224\u0101\225\132\226\106\227\054\230\273\231" +
    "\035\232\274\234\u0109\243\u0100\244\u0108\245\u010b\246\u0107" +
    "\247\u0136\253\133\001\001\000\002\001\001\000\202\034" +
    "\064\046\026\066\050\101\067\102\u0102\103\127\104\037" +
    "\105\077\106\103\107\075\110\130\111\104\112\142\115" +
    "\144\116\111\117\146\120\057\121\074\133\222\143\137" +
    "\144\056\145\031\146\113\147\066\150\121\153\063\162" +
    "\126\163\141\164\134\165\226\171\076\175\145\203\300" +
    "\204\041\205\040\210\045\211\036\213\065\214\124\215" +
    "\034\216\117\224\u0101\225\132\226\106\227\054\230\273" +
    "\231\035\232\u0139\233\304\234\u0109\240\221\243\u0100\244" +
    "\u0108\245\u010b\246\u0107\247\u010a\250\u0138\252\213\253\303" +
    "\263\215\264\230\265\214\270\265\271\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\034\064\046\026\066" +
    "\050\104\037\105\077\106\103\107\075\110\u014b\115\144" +
    "\116\111\117\146\120\057\121\074\143\137\144\056\146" +
    "\113\147\066\150\121\153\063\162\126\163\141\164\134" +
    "\224\u014c\253\133\001\001\000\002\001\001\000\066\034" +
    "\064\046\026\066\050\102\u0140\104\037\105\077\106\103" +
    "\107\075\110\130\111\104\115\144\116\111\117\146\120" +
    "\057\121\074\143\137\144\056\146\113\147\066\150\121" +
    "\153\063\162\126\163\141\164\134\224\u0141\253\133\001" +
    "\001\000\004\035\u0147\001\001\000\002\001\001\000\062" +
    "\034\064\046\026\066\050\104\037\105\077\106\103\107" +
    "\075\110\u0145\115\144\116\111\117\146\120\057\121\074" +
    "\143\137\144\056\146\113\147\066\150\121\153\063\162" +
    "\126\163\141\164\134\224\u0146\253\133\001\001\000\004" +
    "\133\u0144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\034\064\046\026" +
    "\066\050\102\u0149\104\037\105\077\106\103\107\075\110" +
    "\130\111\104\115\144\116\111\117\146\120\057\121\074" +
    "\143\137\144\056\146\113\147\066\150\121\153\063\162" +
    "\126\163\141\164\134\224\u014a\253\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\034\064\046\026\066\050" +
    "\102\u014f\104\037\105\077\106\103\107\075\110\130\111" +
    "\104\115\144\116\111\117\146\120\057\121\074\143\137" +
    "\144\056\146\113\147\066\150\121\153\063\162\126\163" +
    "\141\164\134\224\u0150\253\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\142\u015f\001\001\000\136\034" +
    "\064\046\026\066\050\101\067\102\047\103\127\104\037" +
    "\105\077\106\103\107\075\110\130\111\104\112\142\115" +
    "\144\116\111\117\146\120\057\121\074\143\137\144\056" +
    "\145\031\146\113\147\066\150\121\153\063\162\126\163" +
    "\141\164\134\171\076\175\145\203\061\204\041\205\040" +
    "\210\045\211\036\213\065\214\124\215\034\216\117\224" +
    "\043\225\132\226\106\227\054\230\u0160\231\035\253\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\034" +
    "\064\046\026\066\050\104\u015b\105\077\106\103\113\u0163" +
    "\114\u015d\115\144\116\111\117\146\120\057\121\074\143" +
    "\137\144\056\146\113\147\066\150\121\153\063\162\126" +
    "\163\141\164\134\224\u015c\253\133\001\001\000\002\001" +
    "\001\000\140\034\064\046\026\066\050\067\u0165\101\067" +
    "\102\047\103\127\104\037\105\077\106\103\107\075\110" +
    "\130\111\104\112\142\115\144\116\111\117\146\120\057" +
    "\121\074\143\137\144\056\145\031\146\113\147\066\150" +
    "\121\153\063\162\126\163\141\164\134\171\076\175\145" +
    "\203\061\204\041\205\040\210\045\211\036\213\065\214" +
    "\124\215\034\216\117\224\043\225\132\226\106\227\054" +
    "\230\u0167\231\035\253\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\070\u0169\136\u016c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\034" +
    "\064\046\026\066\050\102\u0179\103\u017a\104\037\105\077" +
    "\106\103\107\075\110\130\111\104\112\142\115\144\116" +
    "\111\117\146\120\057\121\074\143\137\144\056\146\113" +
    "\147\066\150\121\153\063\162\126\163\141\164\134\224" +
    "\u014a\253\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\034\064\066\050\143\137\144\056\146\113\147" +
    "\066\150\121\153\063\162\126\163\141\164\134\175\345" +
    "\224\343\225\132\226\106\227\u017d\231\u017c\253\133\001" +
    "\001\000\004\044\u0181\001\001\000\002\001\001\000\042" +
    "\034\064\066\050\143\137\144\056\146\113\147\066\150" +
    "\121\153\063\162\126\163\141\164\134\175\345\224\343" +
    "\225\132\226\353\253\133\001\001\000\044\034\064\066" +
    "\050\143\137\144\056\146\113\147\066\150\121\153\063" +
    "\162\126\163\141\164\134\175\345\224\343\225\132\226" +
    "\106\227\u0186\253\133\001\001\000\046\034\064\066\050" +
    "\143\137\144\056\146\113\147\066\150\121\153\063\162" +
    "\126\163\141\164\134\175\345\224\343\225\132\226\106" +
    "\227\u017d\231\u0185\253\133\001\001\000\002\001\001\000" +
    "\044\034\064\066\050\143\137\144\056\146\113\147\066" +
    "\150\121\153\063\162\126\163\141\164\134\175\345\224" +
    "\343\225\132\226\106\227\u0183\253\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\034\064\066\050\143\137\144\056\146\113" +
    "\147\066\150\121\153\063\162\126\163\141\164\134\175" +
    "\345\224\343\225\132\226\106\227\u017d\231\u0188\253\133" +
    "\001\001\000\004\044\u0189\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\142\u0191\001\001\000" +
    "\002\001\001\000\136\034\064\046\026\066\050\101\067" +
    "\102\047\103\127\104\037\105\077\106\103\107\075\110" +
    "\130\111\104\112\142\115\144\116\111\117\146\120\057" +
    "\121\074\143\137\144\056\145\031\146\113\147\066\150" +
    "\121\153\063\162\126\163\141\164\134\171\076\175\145" +
    "\203\061\204\041\205\040\210\045\211\036\213\065\214" +
    "\124\215\034\216\117\224\043\225\132\226\106\227\054" +
    "\230\u0192\231\035\253\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\034\064\046\026" +
    "\066\050\102\u0196\104\037\105\077\106\103\107\075\110" +
    "\130\111\104\115\144\116\111\117\146\120\057\121\074" +
    "\143\137\144\056\146\113\147\066\150\121\153\063\162" +
    "\126\163\141\164\134\224\u014a\253\133\001\001\000\002" +
    "\001\001\000\004\133\u0198\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\133\u019c\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\034\064\066" +
    "\050\143\137\144\056\146\113\147\066\150\121\153\063" +
    "\162\126\163\141\164\134\175\145\214\335\215\034\216" +
    "\117\224\161\225\132\226\106\227\331\253\133\001\001" +
    "\000\074\034\064\046\026\066\050\102\u01a0\104\037\105" +
    "\077\106\103\107\075\110\130\111\104\115\144\116\111" +
    "\117\146\120\057\121\074\122\u01a3\123\u01a4\124\u01a1\143" +
    "\137\144\056\146\113\147\066\150\121\153\063\162\126" +
    "\163\141\164\134\224\u014a\253\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\034\064\046\026\066\050\102\u01a7\104\037\105" +
    "\077\106\103\107\075\110\130\111\104\115\144\116\111" +
    "\117\146\120\057\121\074\124\u01a8\143\137\144\056\146" +
    "\113\147\066\150\121\153\063\162\126\163\141\164\134" +
    "\224\u014a\253\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\034\064" +
    "\046\026\066\050\102\u01aa\104\037\105\077\106\103\107" +
    "\075\110\130\111\104\115\144\116\111\117\146\120\057" +
    "\121\074\143\137\144\056\146\113\147\066\150\121\153" +
    "\063\162\126\163\141\164\134\224\u014a\253\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\034\064\046" +
    "\026\066\050\102\u01ad\104\037\105\077\106\103\107\075" +
    "\110\130\111\104\115\144\116\111\117\146\120\057\121" +
    "\074\143\137\144\056\146\113\147\066\150\121\153\063" +
    "\162\126\163\141\164\134\224\u014a\253\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\142" +
    "\034\064\046\026\066\050\101\067\102\047\103\127\104" +
    "\037\105\077\106\103\107\075\110\130\111\104\112\142" +
    "\115\144\116\111\117\146\120\057\121\074\143\137\144" +
    "\056\145\031\146\113\147\066\150\121\153\063\162\126" +
    "\163\141\164\134\171\076\175\145\203\061\204\041\205" +
    "\040\210\045\211\036\213\065\214\124\215\034\216\117" +
    "\224\043\225\132\226\106\227\054\230\115\231\035\235" +
    "\046\236\u01b1\253\133\001\001\000\002\001\001\000\004" +
    "\207\u01b4\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\034\064\066\050\143\137\144\056\146\113\147\066" +
    "\150\121\153\063\162\126\163\141\164\134\175\145\213" +
    "\u01b7\214\124\215\034\216\117\224\161\225\132\226\106" +
    "\227\331\253\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\034\064\066\050\143\137\144\056\146\113" +
    "\147\066\150\121\153\063\162\126\163\141\164\134\175" +
    "\145\214\360\215\034\216\117\224\161\225\132\226\106" +
    "\227\331\253\133\001\001\000\014\133\222\165\367\240" +
    "\u01d7\242\u01d6\253\223\001\001\000\004\251\u01bc\001\001" +
    "\000\156\034\064\046\026\066\050\101\067\102\u0102\103" +
    "\127\104\037\105\077\106\103\107\075\110\130\111\104" +
    "\112\142\115\144\116\111\117\146\120\057\121\074\143" +
    "\137\144\056\145\031\146\113\147\066\150\121\153\063" +
    "\162\126\163\141\164\134\171\076\175\145\203\061\204" +
    "\041\205\040\210\045\211\036\213\065\214\124\215\034" +
    "\216\117\224\u0101\225\132\226\106\227\054\230\273\231" +
    "\035\232\274\234\u0109\243\u0100\244\u0108\245\u010b\246\u0107" +
    "\247\u010a\250\u01d5\253\133\001\001\000\004\256\u01be\001" +
    "\001\000\010\153\u01d0\255\u01cf\257\u01d1\001\001\000\004" +
    "\261\u01bf\001\001\000\004\202\u01cc\001\001\000\010\156" +
    "\u01c3\260\u01c4\262\u01c5\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u01c8\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\156\u01c3\260\u01c7\001\001\000\002" +
    "\001\001\000\004\157\u01ca\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\156" +
    "\034\064\046\026\066\050\101\067\102\u0102\103\127\104" +
    "\037\105\077\106\103\107\075\110\130\111\104\112\142" +
    "\115\144\116\111\117\146\120\057\121\074\143\137\144" +
    "\056\145\031\146\113\147\066\150\121\153\063\162\126" +
    "\163\141\164\134\171\076\175\145\203\061\204\041\205" +
    "\040\210\045\211\036\213\065\214\124\215\034\216\117" +
    "\224\u0101\225\132\226\106\227\054\230\273\231\035\232" +
    "\274\234\u0109\243\u0100\244\u0108\245\u010b\246\u0107\247\u010a" +
    "\250\u01ce\253\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u01d2\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\153\u01d0\255\u01cf\257\u01d4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\133\222\165\367\240\u01d7\242\u01d9\253" +
    "\223\001\001\000\002\001\001\000\066\034\064\046\026" +
    "\066\050\102\u01db\104\037\105\077\106\103\107\075\110" +
    "\130\111\104\115\144\116\111\117\146\120\057\121\074" +
    "\143\137\144\056\146\113\147\066\150\121\153\063\162" +
    "\126\163\141\164\134\224\u014a\253\133\001\001\000\002" +
    "\001\001\000\004\133\u01dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\034\064\046\026\066\050\102\u01e0" +
    "\104\037\105\077\106\103\107\075\110\130\111\104\115" +
    "\144\116\111\117\146\120\057\121\074\143\137\144\056" +
    "\146\113\147\066\150\121\153\063\162\126\163\141\164" +
    "\134\224\u014a\253\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\160\u01e4\161\u01e3\001\001\000\026\133" +
    "\222\165\226\240\221\252\213\253\223\263\215\264\u01e8" +
    "\265\214\270\225\271\216\001\001\000\002\001\001\000" +
    "\004\137\u01e6\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\231\001\001\000\004\125\u01ea\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\140\u01f1\223\u01f0\001\001\000\002\001" +
    "\001\000\004\251\u01f4\001\001\000\002\001\001\000\006" +
    "\140\u01f1\223\u01f3\001\001\000\002\001\001\000\002\001" +
    "\001\000\140\034\064\046\026\066\050\101\067\102\047" +
    "\103\127\104\037\105\077\106\103\107\075\110\130\111" +
    "\104\112\142\115\144\116\111\117\146\120\057\121\074" +
    "\141\u01f6\143\137\144\056\145\031\146\113\147\066\150" +
    "\121\153\063\162\126\163\141\164\134\171\076\175\145" +
    "\203\061\204\041\205\040\210\045\211\036\213\065\214" +
    "\124\215\034\216\117\224\043\225\132\226\106\227\054" +
    "\230\u01f9\231\035\253\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\251\u01fc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\133\u01ff\001\001\000\016\016\u0202" +
    "\017\u0207\020\u0205\025\u0206\026\u0203\030\u0208\001\001\000" +
    "\006\010\u0256\053\u0255\001\001\000\004\053\u024e\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\u020f\004" +
    "\u0212\010\u020e\012\u0215\013\u020a\014\u0214\015\u0209\053\u0211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u020f\004\u0212\012\u0215\013\u020a\014\u0249\001\001" +
    "\000\002\001\001\000\004\133\u0248\001\001\000\004\135" +
    "\u021e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\156\034" +
    "\064\046\026\066\050\101\067\102\u0102\103\127\104\037" +
    "\105\077\106\103\107\075\110\130\111\104\112\142\115" +
    "\144\116\111\117\146\120\057\121\074\143\137\144\056" +
    "\145\031\146\113\147\066\150\121\153\063\162\126\163" +
    "\141\164\134\171\076\175\145\203\061\204\041\205\040" +
    "\210\045\211\036\213\065\214\124\215\034\216\117\224" +
    "\u0101\225\132\226\106\227\054\230\273\231\035\232\274" +
    "\234\u0109\243\u0100\244\u0108\245\u010b\246\u0107\247\u010a\250" +
    "\u0218\253\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\137\u021b\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\134\u0220\136\u0225\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u0227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\u0244\147\u0240\150\u023c\151" +
    "\u023b\152\u0242\175\u023e\211\u0243\001\001\000\022\003\u022a" +
    "\004\u022d\005\u022e\007\u0231\010\u022b\011\u0229\023\u0230\031" +
    "\u022c\001\001\000\006\006\u0235\133\u0236\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\u022a\004\u022d\005" +
    "\u022e\011\u0234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\u022a\004\u022d\005\u022e\007\u0231\010\u022b\011\u0229" +
    "\031\u0232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u023a\001\001\000\002\001\001" +
    "\000\004\137\u0238\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\147\u0247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\u024b\001\001\000\002\001\001\000" +
    "\004\005\u024d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u0252\001\001\000\002\001\001\000\004\022" +
    "\u0253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\125\u0257\001\001\000" +
    "\002\001\001\000\004\125\u0259\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\133\u025f\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\u020f\004\u0212\010\u020e\012\u0215\013\u020a\014" +
    "\u0214\015\u0262\135\u0264\154\u0261\155\u0263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\u020f\004\u0212\010\u020e" +
    "\012\u0215\013\u020a\014\u0214\015\u0262\135\u0264\154\u0261\155" +
    "\u0267\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\u026a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u0273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\u0276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParsCommand$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParsCommand$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup10.runtime.Symbol do_action(
    int                        act_num,
    java_cup10.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParsCommand$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String message, Object info) {
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
		done_parsing();
		throw new SyntaxException((String) cur_token.value);
	}
		

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParsCommand$actions {


	boolean inSquareBrackets = false;
	boolean FromError = false;
	boolean SelectListError = false;
	boolean useAsExpr = false;
	boolean SecondoSubQuery = false;    // turns true if a subquery is used which is supported in secondo
	boolean SubqueryInUse = false;		// turns true and stays true if a subquery is in use. SecondoSubQuery
										// is turned into false again once it is recognized as a true SecondoSubquery
	boolean QualifierInUse = false;		// used to detect whether a qualifier has been used
	boolean RVCListInUse = false;		// Secondo only allows RowValueConstructor-Lists inside insert-clauses
	boolean insertError = false;		// is set to true, in case an insert-construct is not allowed in Secondo
	
	SQLWarning warning;					// to transport SQL-Warnings to the driverset
	
	String PreResult;
	
	QueryClause PreQuery;				// variable is used to pepare the Query before it is assigned to the NON-Terminal 	
	
	public void raise_Error(String message) throws Exception {		// Error if syntax correct but not supported in Secondo
		throw new NotSuppException(message);
	}
	
	public void raise_GeneralError(String message) throws Exception { // Error if incorrect syntax is not recognized by parser
		throw new SecServerException(message);
	}
	
	private void setNextWarning(String message) {
		if (this.warning == null)
			this.warning = WarningContainer.getInstance();
		this.warning.setNextWarning(new SQLWarning(message));
	}
	
	String getUniqueName() {
		return "myatt"+ErrorCodes.UNumber++;
	}

  private final ParsCommand parser;

  /** Constructor */
  CUP$ParsCommand$actions(ParsCommand parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup10.runtime.Symbol CUP$ParsCommand$do_action(
    int                        CUP$ParsCommand$act_num,
    java_cup10.runtime.lr_parser CUP$ParsCommand$parser,
    java.util.Stack            CUP$ParsCommand$stack,
    int                        CUP$ParsCommand$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup10.runtime.Symbol CUP$ParsCommand$result;

      /* select the action based on the action number */
      switch (CUP$ParsCommand$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // DROP_TAB_CONSTR_DEF ::= DROP CONSTR_NAME_DEF DROP_BEHAVIOUR 
            {
              String RESULT = null;
		int cndleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int cndright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String cnd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int dbleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dbright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		Object db = (Object)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("alter table drop constraint "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(12/*DROP_TAB_CONSTR_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // ADD_TAB_CONSTR_DEF ::= ADD TAB_CONSTR_DEF 
            {
              String RESULT = null;
		int tcdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int tcdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String tcd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("alter table add contraint "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(13/*ADD_TAB_CONSTR_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // DROP_COL_DEF ::= DROP COLUMN_EXPR ID DROP_BEHAVIOUR 
            {
              String RESULT = null;
		int celeft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int ceright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String ce = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int dbleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dbright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		Object db = (Object)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (db != "") raise_Error("this drop behaviour ");
				   RESULT = ";drop;" + id; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(14/*DROP_COL_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // ALTER_COL_ACTION ::= DROP DEFAULT 
            {
              String RESULT = null;
		 RESULT = "drop default "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(18/*ALTER_COL_ACTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // ALTER_COL_ACTION ::= SET DEFAULT_CLAUSE 
            {
              String RESULT = null;
		int dcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String dc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = "set " + dc; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(18/*ALTER_COL_ACTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // ALTER_COL_DEF ::= ALTER COLUMN_EXPR ID ALTER_COL_ACTION 
            {
              String RESULT = null;
		int celeft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int ceright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String ce = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int acaleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int acaright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String aca = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("alter table alter column "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(19/*ALTER_COL_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // ADD_COL_DEF ::= ADD COLUMN_EXPR COLUMN_DEF 
            {
              String RESULT = null;
		int celeft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int ceright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String ce = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int coleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int coright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String co = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 int PosColon = co.indexOf(":");
				   String CoName = co.substring(0,PosColon); 
				   String CoDatatype = co.substring(PosColon+1);
				   RESULT = ";add;"+CoName+";"+CoDatatype; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(20/*ADD_COL_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // ALTER_TAB_ACTION ::= DROP_TAB_CONSTR_DEF 
            {
              String RESULT = null;
		int dtcdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dtcdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String dtcd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = dtcd; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(22/*ALTER_TAB_ACTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // ALTER_TAB_ACTION ::= ADD_TAB_CONSTR_DEF 
            {
              String RESULT = null;
		int atcdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int atcdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String atcd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = atcd; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(22/*ALTER_TAB_ACTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // ALTER_TAB_ACTION ::= DROP_COL_DEF 
            {
              String RESULT = null;
		int dcdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dcdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String dcd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = dcd; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(22/*ALTER_TAB_ACTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // ALTER_TAB_ACTION ::= ALTER_COL_DEF 
            {
              String RESULT = null;
		int alcdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int alcdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String alcd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = alcd; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(22/*ALTER_TAB_ACTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // ALTER_TAB_ACTION ::= ADD_COL_DEF 
            {
              String RESULT = null;
		int acdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int acdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String acd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = acd; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(22/*ALTER_TAB_ACTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // ALTER_TABLE ::= ALTER TABLE QUALNAME ALTER_TAB_ACTION 
            {
              String RESULT = null;
		int qnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int qnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String qn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int atbleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int atbright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String atb = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = "altertable;" + qn + atb; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(21/*ALTER_TABLE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // REF_TAB_COL ::= QUALNAME 
            {
              String RESULT = null;
		int qnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int qnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String qn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = qn; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(4/*REF_TAB_COL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // REF_TAB_COL ::= QUALNAME LPARENT COLUMN_NAME_LIST RPARENT 
            {
              String RESULT = null;
		int qnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left;
		int qnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).right;
		String qn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).value;
		int clleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int clright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String cl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 RESULT = qn + "(" + cl + ")"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(4/*REF_TAB_COL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // REF_SPEC ::= REFERENCES REF_TAB_COL PAR_FULL_EXPR 
            {
              String RESULT = null;
		int rtcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int rtcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String rtc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int pfeleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int pferight = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String pfe = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = " references " + rtc + pfe; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(3/*REF_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // UNIQUE_SPEC ::= PRIM_KEY 
            {
              String RESULT = null;
		 RESULT = " primary key "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(2/*UNIQUE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // UNIQUE_SPEC ::= UNIQUE 
            {
              String RESULT = null;
		 RESULT = " unique "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(2/*UNIQUE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // COL_CONSTR ::= CHECK_CONSTR_DEF 
            {
              String RESULT = null;
		int ccdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ccdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String ccd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = ccd; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(7/*COL_CONSTR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // COL_CONSTR ::= REF_SPEC 
            {
              String RESULT = null;
		int rsleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int rsright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String rs = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = rs; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(7/*COL_CONSTR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // COL_CONSTR ::= UNIQUE_SPEC 
            {
              String RESULT = null;
		int usleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int usright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String us = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = us; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(7/*COL_CONSTR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // COL_CONSTR ::= NOT NULL 
            {
              String RESULT = null;
		 RESULT = "not null"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(7/*COL_CONSTR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // COL_CONSTR_DEF ::= COL_CONSTR 
            {
              String RESULT = null;
		int ccleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ccright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String cc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = cc; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(5/*COL_CONSTR_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // COL_CONSTR_DEF ::= CONSTR_NAME_DEF COL_CONSTR 
            {
              String RESULT = null;
		int cndleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int cndright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String cnd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int ccleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ccright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String cc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = cnd + " " + cc; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(5/*COL_CONSTR_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // COL_CONSTR_EXPR ::= COL_CONSTR_DEF COL_CONSTR_EXPR 
            {
              GeneralList RESULT = null;
		int ccdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int ccdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String ccd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int cceleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int cceright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		GeneralList cce = (GeneralList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = cce.addElement(ccd); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(23/*COL_CONSTR_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // COL_CONSTR_EXPR ::= COL_CONSTR_DEF 
            {
              GeneralList RESULT = null;
		int ccdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ccdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String ccd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new GeneralList(ccd); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(23/*COL_CONSTR_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // COL_CONSTR_EXPR_2 ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(17/*COL_CONSTR_EXPR_2*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // COL_CONSTR_EXPR_2 ::= COL_CONSTR_EXPR 
            {
              String RESULT = null;
		int cceleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int cceright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		GeneralList cce = (GeneralList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = cce.getGListWithoutComma(); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(17/*COL_CONSTR_EXPR_2*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // CHECK_CONSTR_DEF ::= CHECK LPARENT SEARCH_COND RPARENT 
            {
              String RESULT = null;
		int sdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int sdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		WhereClause sd = (WhereClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 RESULT = "check (" + sd.getWhereClause() + ")"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(1/*CHECK_CONSTR_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // REF_CONSTR_DEF ::= FOREIGN_KEY LPARENT COLUMN_NAME_LIST RPARENT REF_SPEC 
            {
              String RESULT = null;
		int clleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int clright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String cl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int rsleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int rsright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String rs = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = "foreign key (" + cl + ")" + rs; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(9/*REF_CONSTR_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // UNI_CONSTR_DEF ::= UNIQUE_SPEC LPARENT COLUMN_NAME_LIST RPARENT 
            {
              String RESULT = null;
		int usleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left;
		int usright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).right;
		String us = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).value;
		int clleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int clright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String cl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 RESULT = us + "(" + cl + ")"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(8/*UNI_CONSTR_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // CONSTR_NAME_DEF ::= CONSTRAINT QUALNAME 
            {
              String RESULT = null;
		int qnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int qnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String qn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = " constraint " + qn; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(6/*CONSTR_NAME_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // TAB_CONSTR ::= CHECK_CONSTR_DEF 
            {
              String RESULT = null;
		int ccdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ccdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String ccd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = ccd; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(10/*TAB_CONSTR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // TAB_CONSTR ::= REF_CONSTR_DEF 
            {
              String RESULT = null;
		int rcdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int rcdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String rcd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = rcd; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(10/*TAB_CONSTR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // TAB_CONSTR ::= UNI_CONSTR_DEF 
            {
              String RESULT = null;
		int ucdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ucdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String ucd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = ucd; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(10/*TAB_CONSTR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // TAB_CONSTR_DEF ::= TAB_CONSTR 
            {
              String RESULT = null;
		int tcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int tcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String tc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = tc; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(11/*TAB_CONSTR_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // TAB_CONSTR_DEF ::= CONSTR_NAME_DEF TAB_CONSTR 
            {
              String RESULT = null;
		int cndleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int cndright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String cnd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int tcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int tcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String tc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = cnd + " " + tc; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(11/*TAB_CONSTR_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // SIGNED_NUM_LITERAL ::= UNSIGNED_NUM_LITERAL 
            {
              String RESULT = null;
		int unlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int unlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String unl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = unl;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(103/*SIGNED_NUM_LITERAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // SIGNED_NUM_LITERAL ::= SIGN UNSIGNED_NUM_LITERAL 
            {
              String RESULT = null;
		int sileft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int siright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String si = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int unlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int unlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String unl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = si+unl;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(103/*SIGNED_NUM_LITERAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // LITERAL ::= GENERAL_LITERAL 
            {
              String RESULT = null;
		int glleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int glright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String gl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = gl;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(104/*LITERAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // LITERAL ::= SIGNED_NUM_LITERAL 
            {
              String RESULT = null;
		int snlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int snlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String snl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = snl;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(104/*LITERAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // DEFAULT_OPTION ::= NULL 
            {
              String RESULT = null;
		 RESULT = "null";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(15/*DEFAULT_OPTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // DEFAULT_OPTION ::= SYSTEM_USER 
            {
              String RESULT = null;
		 RESULT = "system_user";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(15/*DEFAULT_OPTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // DEFAULT_OPTION ::= SESSION_USER 
            {
              String RESULT = null;
		 RESULT = "session_user";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(15/*DEFAULT_OPTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // DEFAULT_OPTION ::= CURRENT_USER 
            {
              String RESULT = null;
		 RESULT = "current_user";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(15/*DEFAULT_OPTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // DEFAULT_OPTION ::= USER 
            {
              String RESULT = null;
		 RESULT = "user";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(15/*DEFAULT_OPTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // DEFAULT_OPTION ::= DATETIME_VALUE_FUN 
            {
              String RESULT = null;
		 RESULT = "not supported";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(15/*DEFAULT_OPTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // DEFAULT_OPTION ::= LITERAL 
            {
              String RESULT = null;
		int lileft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int liright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String li = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = li;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(15/*DEFAULT_OPTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // DEFAULT_CLAUSE ::= 
            {
              String RESULT = null;
		 RESULT = "";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(16/*DEFAULT_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // DEFAULT_CLAUSE ::= DEFAULT DEFAULT_OPTION 
            {
              String RESULT = null;
		int deoleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int deoright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String deo = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = "default " + deo;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(16/*DEFAULT_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // VALUE_EXPR_LIST ::= VALUE_EXPR COMMA VALUE_EXPR_LIST 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(45/*VALUE_EXPR_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // VALUE_EXPR_LIST ::= VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(45/*VALUE_EXPR_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // SORT_SPEC_LIST ::= SORT_SPEC_LIST COMMA SORT_SPEC 
            {
              OrderClause RESULT = null;
		int sslleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int sslright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		OrderClause ssl = (OrderClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int sspleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int sspright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		OrderElement ssp = (OrderElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = ssl.addElement(ssp); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(176/*SORT_SPEC_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // SORT_SPEC_LIST ::= SORT_SPEC 
            {
              OrderClause RESULT = null;
		int sspleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int sspright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		OrderElement ssp = (OrderElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new OrderClause(ssp);
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(176/*SORT_SPEC_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // GROUP_COL_REF_LIST ::= GROUP_COL_REF COMMA GROUP_COL_REF_LIST 
            {
              GroupClause RESULT = null;
		int gcrleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int gcrright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		GroupElement gcr = (GroupElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int gcrlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int gcrlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		GroupClause gcrl = (GroupClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = gcrl.addElement(gcr); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(173/*GROUP_COL_REF_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // GROUP_COL_REF_LIST ::= GROUP_COL_REF 
            {
              GroupClause RESULT = null;
		int gcrleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int gcrright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		GroupElement gcr = (GroupElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new GroupClause(gcr);
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(173/*GROUP_COL_REF_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // SELECT_SLIST_EXPR ::= SELECT_SUBLIST COMMA SELECT_SLIST_EXPR 
            {
              SelectList RESULT = null;
		int ssleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int ssright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		SelectElement ss = (SelectElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int sseleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int sseright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		SelectList sse = (SelectList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = sse.addElement(ss);
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(156/*SELECT_SLIST_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // SELECT_SLIST_EXPR ::= SELECT_SUBLIST 
            {
              SelectList RESULT = null;
		int ssleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ssright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		SelectElement ss = (SelectElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new SelectList(ss);
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(156/*SELECT_SLIST_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TABLE_REF_EXPR ::= TABLE_REF COMMA TABLE_REF_EXPR 
            {
              TableClause RESULT = null;
		int trleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int trright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		TableElement tr = (TableElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int treleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int treright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		TableClause tre = (TableClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = tre.addElement(tr); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(160/*TABLE_REF_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TABLE_REF_EXPR ::= TABLE_REF 
            {
              TableClause RESULT = null;
		int trleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int trright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		TableElement tr = (TableElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new TableClause(tr);
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(160/*TABLE_REF_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // COLUMN_EXPR ::= 
            {
              String RESULT = null;
		 RESULT = "";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(41/*COLUMN_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // COLUMN_EXPR ::= COLUMN 
            {
              String RESULT = null;
		 RESULT = "column ";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(41/*COLUMN_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // DISTINCT_CLAUSE ::= 
            {
              String RESULT = null;
		 RESULT = "";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(96/*DISTINCT_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // DISTINCT_CLAUSE ::= DISTINCT 
            {
              String RESULT = null;
		 RESULT = "distinct ";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(96/*DISTINCT_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // DISTINCT_CLAUSE ::= ALL 
            {
              String RESULT = null;
		 RESULT = "all ";
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(96/*DISTINCT_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // COLLATE_CLAUSE ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(35/*COLLATE_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // COLLATE_CLAUSE ::= COLLATE QUALNAME 
            {
              String RESULT = null;
		int qnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int qnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String qn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = "collate " + qn; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(35/*COLLATE_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TIME_PRECISION_EXPR ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(37/*TIME_PRECISION_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TIME_PRECISION_EXPR ::= LPARENT UNSIGNED_INT COMMA LPARENT UNSIGNED_INT RPARENT RPARENT 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(37/*TIME_PRECISION_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TIME_PRECISION_EXPR ::= LPARENT UNSIGNED_INT RPARENT 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(37/*TIME_PRECISION_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // CHAR_L_EXPR ::= CHARACTER_LENGTH 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(39/*CHAR_L_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // CHAR_L_EXPR ::= CHAR_LENGTH 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(39/*CHAR_L_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // INTERVAL_QUAL_EXPR ::= INTERVAL_QUAL 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(38/*INTERVAL_QUAL_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // UP_LOW_EXPR ::= LOWER 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(36/*UP_LOW_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // UP_LOW_EXPR ::= UPPER 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(36/*UP_LOW_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // FOR_EXPR ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(34/*FOR_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // FOR_EXPR ::= FOR NUMERIC_VALUE_EXPR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(34/*FOR_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // CORR_SPEC_EXPR ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(33/*CORR_SPEC_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // CORR_SPEC_EXPR ::= CORR_SPEC 
            {
              String RESULT = null;
		int csleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int csright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String cs = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = " "+cs; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(33/*CORR_SPEC_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // AS_CLAUSE ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = id; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(127/*AS_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // AS_CLAUSE ::= AS ID 
            {
              String RESULT = null;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = id; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(127/*AS_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // AS_CLAUSE ::= 
            {
              String RESULT = null;
		 if (useAsExpr) PreResult = getUniqueName(); else PreResult =""; 
				   useAsExpr = false; RESULT = PreResult; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(127/*AS_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // CORR_BY_EXPR ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(32/*CORR_BY_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // CORR_BY_EXPR ::= BY LPARENT COLUMN_NAME_LIST RPARENT 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(32/*CORR_BY_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ALL_EXPR ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(31/*ALL_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ALL_EXPR ::= ALL 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(31/*ALL_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // NOT_EXPR ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(40/*NOT_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // NOT_EXPR ::= NOT 
            {
              String RESULT = null;
		 RESULT = "not "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(40/*NOT_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // UNION_EXCEPT_EXPR ::= EXCEPT 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(30/*UNION_EXCEPT_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // UNION_EXCEPT_EXPR ::= UNION 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(30/*UNION_EXCEPT_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // PAR_FULL_EXPR ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(29/*PAR_FULL_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // PAR_FULL_EXPR ::= FULL 
            {
              String RESULT = null;
		 RESULT = " full "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(29/*PAR_FULL_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // PAR_FULL_EXPR ::= PARTIAL 
            {
              String RESULT = null;
		 RESULT = " partial "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(29/*PAR_FULL_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // UNIQUE_EXPR ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(28/*UNIQUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // UNIQUE_EXPR ::= UNIQUE 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(28/*UNIQUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ESC_EXPR ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(27/*ESC_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ESC_EXPR ::= ESCAPE CHAR_VALUE_EXPR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(27/*ESC_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // SIGN ::= MINUS 
            {
              String RESULT = null;
		 RESULT = "-"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(123/*SIGN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // SIGN ::= PLUS 
            {
              String RESULT = null;
		 RESULT = "+"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(123/*SIGN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // UPDATE_SOURCE ::= NULL 
            {
              String RESULT = null;
		 raise_Error("NULL within a Set_Clause "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(95/*UPDATE_SOURCE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // UPDATE_SOURCE ::= DEFAULT 
            {
              String RESULT = null;
		 raise_Error("default within a Set_Clause "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(95/*UPDATE_SOURCE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // UPDATE_SOURCE ::= VALUE_EXPR 
            {
              String RESULT = null;
		int veleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int veright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueExpr ve = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (ve.containsSub()) raise_Error("Subqueries within a Set_Clause "); 
				RESULT = ve.getStrValueExpr(); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(95/*UPDATE_SOURCE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // SET_CLAUSE ::= ID EQUAL UPDATE_SOURCE 
            {
              String RESULT = null;
		int coleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int coright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String co = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int usleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int usright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String us = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = co + "=" + us; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(94/*SET_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // SET_CLAUSE_LIST ::= SET_CLAUSE COMMA SET_CLAUSE_LIST 
            {
              GeneralList RESULT = null;
		int scleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int scright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String sc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int sclleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int sclright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		GeneralList scl = (GeneralList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = scl.addElement(sc); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(145/*SET_CLAUSE_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // SET_CLAUSE_LIST ::= SET_CLAUSE 
            {
              GeneralList RESULT = null;
		int scleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int scright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String sc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new GeneralList(sc); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(145/*SET_CLAUSE_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // UPDATE_CLAUSE ::= UPDATE QUALNAME SET SET_CLAUSE_LIST WHERE_CLAUSE 
            {
              String RESULT = null;
		int qnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left;
		int qnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).right;
		String qn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).value;
		int sclleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int sclright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		GeneralList scl = (GeneralList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int wcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int wcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereClause wc = (WhereClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (wc.containsSubs()) raise_Error("subqueries whithin an update_clause ");
					RESULT = "update " + qn + " set " + scl.getGList() + wc.getWhereClause(); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(88/*UPDATE_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // DROP_BEHAVIOUR ::= 
            {
              Object RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(83/*DROP_BEHAVIOUR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // DROP_BEHAVIOUR ::= RESTRICT 
            {
              Object RESULT = null;
		 RESULT = "restrict"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(83/*DROP_BEHAVIOUR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // DROP_BEHAVIOUR ::= CASCADE 
            {
              Object RESULT = null;
		 RESULT = "cascade"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(83/*DROP_BEHAVIOUR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // DROP_CLAUSE ::= DROP INDEX ON ID ID 
            {
              String RESULT = null;
		int tablenameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int tablenameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String tablename = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int colnameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int colnameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String colname = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = "drop index " + tablename + "_" + colname + "_btree"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(87/*DROP_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // DROP_CLAUSE ::= DROP INDEX ID ON ID 
            {
              String RESULT = null;
		int indexnameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int indexnameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String indexname = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int tablenameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int tablenameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String tablename = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = "drop index " + indexname; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(87/*DROP_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // DROP_CLAUSE ::= DROP_TABLE QUALNAME DROP_BEHAVIOUR 
            {
              String RESULT = null;
		int qnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int qnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String qn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int dbleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dbright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		Object db = (Object)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (db != "") raise_Error("this drop behaviour ");
				   RESULT = "drop table " + qn; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(87/*DROP_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // DELETE_CLAUSE ::= DELETE_FROM QUALNAME WHERE_CURRENT_OF ID 
            {
              String RESULT = null;
		 raise_Error("The usage of positioned delete statement "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(86/*DELETE_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // DELETE_CLAUSE ::= DELETE_FROM QUALNAME WHERE_CLAUSE 
            {
              String RESULT = null;
		int qnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int qnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String qn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int wcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int wcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereClause wc = (WhereClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (wc.containsSubs()) raise_Error("The usage of subqueries in delete-statements ");
					RESULT = "delete from "+ qn + wc.getWhereClause(); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(86/*DELETE_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // INS_COL_LIST ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(111/*INS_COL_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // INS_COL_LIST ::= LPARENT COLUMN_NAME_LIST RPARENT 
            {
              String RESULT = null;
		 raise_Error("An Insert_Column_List "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(111/*INS_COL_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // INS_COL_AND_SOU ::= INS_COL_LIST QUERY_EXPR 
            {
              String RESULT = null;
		int qeleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int qeright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		InsertElement qe = (InsertElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = qe.getInsertElement(); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(110/*INS_COL_AND_SOU*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // INSERT_CLAUSE ::= INSERT_INTO QUALNAME INS_COL_AND_SOU 
            {
              String RESULT = null;
		int qnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int qnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String qn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int icasleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int icasright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String icas = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = "insert into " + qn + " " + icas; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(85/*INSERT_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ORDER_SPEC ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(109/*ORDER_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ORDER_SPEC ::= DESC 
            {
              String RESULT = null;
		 RESULT = " desc"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(109/*ORDER_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ORDER_SPEC ::= ASC 
            {
              String RESULT = null;
		 RESULT = " asc"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(109/*ORDER_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // SORT_KEY ::= ENL 
            {
              String RESULT = null;
		int enlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int enlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String enl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 	if (enl.indexOf(".") != -1) raise_GeneralError("Just integers are allowed at that position!");
					raise_Error("The usage of numbers as sort_key within an order-by statement"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(108/*SORT_KEY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // SORT_KEY ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = id; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(108/*SORT_KEY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // SORT_SPEC ::= SORT_KEY COLLATE_CLAUSE ORDER_SPEC 
            {
              OrderElement RESULT = null;
		int skleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int skright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String sk = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int ccleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int ccright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String cc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int osleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int osright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String os = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (cc != "") raise_Error("The usage of collate ");
					RESULT = new OrderElement(sk+os); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(174/*SORT_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ORDER_BY_CLAUSE ::= 
            {
              OrderClause RESULT = null;
		 RESULT = new OrderClause("");
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(175/*ORDER_BY_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ORDER_BY_CLAUSE ::= ORDER_BY SORT_SPEC_LIST 
            {
              OrderClause RESULT = null;
		int sslleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int sslright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		OrderClause ssl = (OrderClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = ssl; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(175/*ORDER_BY_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // GROUP_COL_REF ::= COLUMN_REF COLLATE_CLAUSE 
            {
              GroupElement RESULT = null;
		int crleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int crright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String cr = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int ccleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ccright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String cc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (cc != "") raise_Error("The usage of collate ");
					RESULT = new GroupElement(cr); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(171/*GROUP_COL_REF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // HAVING_CLAUSE ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(128/*HAVING_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // HAVING_CLAUSE ::= HAVING SEARCH_COND 
            {
              String RESULT = null;
		 raise_Error("having ..."); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(128/*HAVING_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // GROUP_BY_CLAUSE ::= 
            {
              GroupClause RESULT = null;
		 RESULT = new GroupClause("");
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(172/*GROUP_BY_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // GROUP_BY_CLAUSE ::= GROUP_BY GROUP_COL_REF_LIST 
            {
              GroupClause RESULT = null;
		int gcrlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int gcrlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		GroupClause gcrl = (GroupClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = gcrl; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(172/*GROUP_BY_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // WHERE_CLAUSE ::= 
            {
              WhereClause RESULT = null;
		 RESULT = new WhereClause("");
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(167/*WHERE_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // WHERE_CLAUSE ::= WHERE SEARCH_COND 
            {
              WhereClause RESULT = null;
		int scleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int scright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereClause sc = (WhereClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = sc;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(167/*WHERE_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FROM_CLAUSE ::= FROM TABLE_REF_EXPR 
            {
              TableClause RESULT = null;
		int treleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int treright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		TableClause tre = (TableClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (FromError) raise_Error("The FROM-clause in secondo just supports a"+
				 " relationname as Table-Reference. This usage of a FROM-clause "); 
				 else RESULT = tre; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(159/*FROM_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TABLE_EXPR ::= FROM_CLAUSE WHERE_CLAUSE GROUP_BY_CLAUSE HAVING_CLAUSE 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(126/*TABLE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // SELECT_SUBLIST ::= ID DOT ID DOT ID DOT ASTERISK 
            {
              SelectElement RESULT = null;
		 raise_Error("The usage of qualified_name.* "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(155/*SELECT_SUBLIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // SELECT_SUBLIST ::= ID DOT ID DOT ASTERISK 
            {
              SelectElement RESULT = null;
		 raise_Error("The usage of qualified_name.* "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(155/*SELECT_SUBLIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // SELECT_SUBLIST ::= ID DOT ASTERISK 
            {
              SelectElement RESULT = null;
		 raise_Error("The usage of qualified_name.* "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(155/*SELECT_SUBLIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // SELECT_SUBLIST ::= VALUE_EXPR AS_CLAUSE 
            {
              SelectElement RESULT = null;
		int veleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int veright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		ValueExpr ve = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int acleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int acright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String ac = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (SelectListError) {SelectListError = false; 
					raise_Error("The usage of strings as select-element ");} 
					else if (ve.containsSub()) raise_Error("The usage of Subqueries in select-elements ");
					else RESULT = new SelectElement(ve.getStrValueExpr(), ac, ve.containsSetFunc()); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(155/*SELECT_SUBLIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // SELECT_LIST ::= SELECT_SLIST_EXPR 
            {
              SelectClause RESULT = null;
		int sseleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int sseright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		SelectList sse = (SelectList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new SelectClause(sse); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(157/*SELECT_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // SELECT_LIST ::= ASTERISK 
            {
              SelectClause RESULT = null;
		 RESULT = new SelectClause("*"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(157/*SELECT_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // QUERY_SPEC ::= SELECT DISTINCT_CLAUSE SELECT_LIST FROM_CLAUSE WHERE_CLAUSE GROUP_BY_CLAUSE ORDER_BY_CLAUSE HAVING_CLAUSE 
            {
              QueryClause RESULT = null;
		int DiClleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).left;
		int DiClright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).right;
		String DiCl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).value;
		int slleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left;
		int slright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).right;
		SelectClause sl = (SelectClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).value;
		int fcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left;
		int fcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).right;
		TableClause fc = (TableClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).value;
		int wcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left;
		int wcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).right;
		WhereClause wc = (WhereClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).value;
		int gbcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int gbcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		GroupClause gbc = (GroupClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int ocleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int ocright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		OrderClause oc = (OrderClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 sl.setDistinctClause(DiCl); PreQuery = new QueryClause(); PreQuery.addSClause(sl); 
					PreQuery.addTClause(fc); PreQuery.addWClause(wc); PreQuery.addGClause(gbc); PreQuery.addOClause(oc); 
					RESULT = PreQuery; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(168/*QUERY_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-7)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // COMP_OP ::= GREATER_EQUAL 
            {
              String RESULT = null;
		 RESULT = " >= "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(121/*COMP_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // COMP_OP ::= GREATER 
            {
              String RESULT = null;
		 RESULT = " > "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(121/*COMP_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // COMP_OP ::= LESS_EQUAL 
            {
              String RESULT = null;
		 RESULT = " <= "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(121/*COMP_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // COMP_OP ::= LESS 
            {
              String RESULT = null;
		 RESULT = " < "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(121/*COMP_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // COMP_OP ::= NOT_EQUAL 
            {
              String RESULT = null;
		 RESULT = " # "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(121/*COMP_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // COMP_OP ::= EQUAL 
            {
              String RESULT = null;
		 RESULT = " = "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(121/*COMP_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // QUANTIFIER ::= ANY 
            {
              String RESULT = null;
		 RESULT = " any "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(122/*QUANTIFIER*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // QUANTIFIER ::= SOME 
            {
              String RESULT = null;
		 RESULT = " some "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(122/*QUANTIFIER*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // QUANTIFIER ::= ALL 
            {
              String RESULT = null;
		 RESULT = " all "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(122/*QUANTIFIER*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TABLE_CON_LIST ::= ROW_VALUE_CON COMMA TABLE_CON_LIST 
            {
              String RESULT = null;
		 raise_Error("Table constructor lists build by more than one Row value constructor lists ");
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(125/*TABLE_CON_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TABLE_CON_LIST ::= ROW_VALUE_CON 
            {
              String RESULT = null;
		int rvcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int rvcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueExprList rvc = (ValueExprList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = rvc.getValueExprList(); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(125/*TABLE_CON_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ROW_VALUE_CON_LIST ::= ROW_VALUE_CON_LIST COMMA ROW_VALUE_CON_ELEM 
            {
              ValueExprList RESULT = null;
		int rvclleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int rvclright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		ValueExprList rvcl = (ValueExprList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int rvceleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int rvceright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueExpr rvce = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = rvcl.addElement(rvce); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(153/*ROW_VALUE_CON_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ROW_VALUE_CON_LIST ::= ROW_VALUE_CON_ELEM 
            {
              ValueExprList RESULT = null;
		int rvceleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int rvceright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueExpr rvce = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new ValueExprList(rvce); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(153/*ROW_VALUE_CON_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ROW_VALUE_CON_ELEM ::= DEFAULT 
            {
              ValueExpr RESULT = null;
		 raise_Error("default"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(152/*ROW_VALUE_CON_ELEM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ROW_VALUE_CON_ELEM ::= NULL 
            {
              ValueExpr RESULT = null;
		 raise_Error("Null"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(152/*ROW_VALUE_CON_ELEM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ROW_VALUE_CON_ELEM ::= VALUE_EXPR 
            {
              ValueExpr RESULT = null;
		int veleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int veright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueExpr ve = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 useAsExpr = false;
						RESULT = ve; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(152/*ROW_VALUE_CON_ELEM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ROW_VALUE_CON ::= LPARENT ROW_VALUE_CON_LIST RPARENT 
            {
              ValueExprList RESULT = null;
		int rvclleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int rvclright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		ValueExprList rvcl = (ValueExprList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 RESULT = rvcl; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(154/*ROW_VALUE_CON*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ROW_VALUE_CON ::= ROW_VALUE_CON_ELEM 
            {
              ValueExprList RESULT = null;
		int rvceleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int rvceright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueExpr rvce = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new ValueExprList(rvce); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(154/*ROW_VALUE_CON*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // IN_VALUE_LIST ::= VALUE_EXPR COMMA IN_VALUE_LIST 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(120/*IN_VALUE_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // IN_VALUE_LIST ::= VALUE_EXPR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(120/*IN_VALUE_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // IN_PRED_VALUE ::= LPARENT IN_VALUE_LIST RPARENT 
            {
              QueryClause RESULT = null;
		 raise_Error("value lists "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(170/*IN_PRED_VALUE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // IN_PRED_VALUE ::= SUBQUERY 
            {
              QueryClause RESULT = null;
		int suleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int suright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		QueryClause su = (QueryClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = su; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(170/*IN_PRED_VALUE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // PREDICATE ::= ROW_VALUE_CON OVERLAPS ROW_VALUE_CON 
            {
              WhereElement RESULT = null;
		 raise_Error("the expression overlaps "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // PREDICATE ::= ROW_VALUE_CON MATCH UNIQUE_EXPR PAR_FULL_EXPR SUBQUERY 
            {
              WhereElement RESULT = null;
		 raise_Error("the expression match "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // PREDICATE ::= ROW_VALUE_CON IS NOT_EXPR NULL 
            {
              WhereElement RESULT = null;
		 raise_Error("checking whether an expression is null "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // PREDICATE ::= VALUE_EXPR_PRIMARY NOT_EXPR LIKE CHAR_VALUE_EXPR 
            {
              WhereElement RESULT = null;
		 raise_Error("the expression like "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // PREDICATE ::= CHAR_VALUE_EXPR NOT_EXPR LIKE VALUE_EXPR_PRIMARY 
            {
              WhereElement RESULT = null;
		 raise_Error("the expression like "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // PREDICATE ::= VALUE_EXPR_PRIMARY NOT_EXPR LIKE VALUE_EXPR_PRIMARY 
            {
              WhereElement RESULT = null;
		 raise_Error("the expression like "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // PREDICATE ::= CHAR_VALUE_EXPR NOT_EXPR LIKE CHAR_VALUE_EXPR ESC_EXPR 
            {
              WhereElement RESULT = null;
		 raise_Error("the expression like "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // PREDICATE ::= EXISTS SUBQUERY 
            {
              WhereElement RESULT = null;
		int suleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int suright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		QueryClause su = (QueryClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new WhereElement("", "exists", "", su); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // PREDICATE ::= ROW_VALUE_CON COMP_OP QUANTIFIER SUBQUERY 
            {
              WhereElement RESULT = null;
		int rvcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left;
		int rvcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).right;
		ValueExprList rvc = (ValueExprList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).value;
		int coleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int coright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String co = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int quleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int quright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String qu = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int suleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int suright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		QueryClause su = (QueryClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (rvc.containsSub()) raise_Error("Using Subqueries in row value constructors ");
					else if(rvc.moreThanOne()) raise_Error("Row value constructors building a row by a list of values outside insert clauses ");
					else RESULT = new WhereElement(rvc.getValueExpr().getStrValueExpr(), co, qu, su); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // PREDICATE ::= ROW_VALUE_CON NOT_EXPR IN IN_PRED_VALUE 
            {
              WhereElement RESULT = null;
		int rvcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left;
		int rvcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).right;
		ValueExprList rvc = (ValueExprList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).value;
		int neleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int neright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String ne = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int ipvleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ipvright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		QueryClause ipv = (QueryClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (rvc.containsSub()) raise_Error("Using Subqueries in row value constructors ");
					else if(rvc.moreThanOne()) raise_Error("Row value constructors building a row by a list of values outside insert clauses ");
					else RESULT = new WhereElement(rvc.getValueExpr().getStrValueExpr(), ne, "in", ipv); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // PREDICATE ::= ROW_VALUE_CON COMP_OP ROW_VALUE_CON 
            {
              WhereElement RESULT = null;
		int rvc1left = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int rvc1right = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		ValueExprList rvc1 = (ValueExprList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int coleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int coright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String co = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int rvc2left = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int rvc2right = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueExprList rvc2 = (ValueExprList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (rvc1.containsSub() || rvc2.containsSub()) 
					raise_Error("Using Subqueries in row value constructors "); 
					else if(rvc1.moreThanOne() || rvc2.moreThanOne()) 
						raise_Error("Row value constructors building a row by a list of values outside insert clauses ");
					else RESULT = new WhereElement(rvc1.getValueExpr().getStrValueExpr(), rvc2.getValueExpr().getStrValueExpr(), co); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(161/*PREDICATE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // BOOL_PRIM ::= LPARENT SEARCH_COND RPARENT 
            {
              WhereElement RESULT = null;
		int scleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int scright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		WhereClause sc = (WhereClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 if (sc.containsSubs())
						raise_Error("(search conditions containing Subqueries) within a search condition "); 
					else RESULT = new WhereElement(sc);	
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(162/*BOOL_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // BOOL_PRIM ::= PREDICATE 
            {
              WhereElement RESULT = null;
		int prleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int prright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereElement pr = (WhereElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = pr; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(162/*BOOL_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TRUTH_VALUE ::= UNKNOWN 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(119/*TRUTH_VALUE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TRUTH_VALUE ::= FALSE 
            {
              String RESULT = null;
		 RESULT = "false"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(119/*TRUTH_VALUE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TRUTH_VALUE ::= TRUE 
            {
              String RESULT = null;
		 RESULT = "true"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(119/*TRUTH_VALUE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // BOOL_TEST ::= BOOL_PRIM IS NOT_EXPR TRUTH_VALUE 
            {
              WhereElement RESULT = null;
		 raise_Error("expressions like is true or is false within a search condition "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(164/*BOOL_TEST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // BOOL_TEST ::= BOOL_PRIM 
            {
              WhereElement RESULT = null;
		int bpleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int bpright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereElement bp = (WhereElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = bp; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(164/*BOOL_TEST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // BOOL_FACTOR ::= BOOL_TEST 
            {
              WhereElement RESULT = null;
		int btleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int btright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereElement bt = (WhereElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = bt; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(163/*BOOL_FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // BOOL_FACTOR ::= NOT BOOL_TEST 
            {
              WhereElement RESULT = null;
		int btleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int btright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereElement bt = (WhereElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 bt.SetNotExpr(); RESULT = bt; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(163/*BOOL_FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // BOOL_TERM ::= BOOL_TERM AND BOOL_FACTOR 
            {
              WhereList RESULT = null;
		int btleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int btright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		WhereList bt = (WhereList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int bfleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int bfright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereElement bf = (WhereElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = bt.addElement(bf); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(165/*BOOL_TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // BOOL_TERM ::= BOOL_FACTOR 
            {
              WhereList RESULT = null;
		int bfleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int bfright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereElement bf = (WhereElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new WhereList(bf); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(165/*BOOL_TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SEARCH_COND ::= SEARCH_COND OR BOOL_TERM 
            {
              WhereClause RESULT = null;
		int scleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int scright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		WhereClause sc = (WhereClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int btleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int btright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereList bt = (WhereList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = sc.addElement(bt); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(166/*SEARCH_COND*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // SEARCH_COND ::= BOOL_TERM 
            {
              WhereClause RESULT = null;
		int btleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int btright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		WhereList bt = (WhereList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new WhereClause(bt); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(166/*SEARCH_COND*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // SUBQUERY ::= LPARENT QUERY_EXPR RPARENT 
            {
              QueryClause RESULT = null;
		int qeleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int qeright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		InsertElement qe = (InsertElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 if (!SecondoSubQuery) raise_Error("This kind of subquery "); 
					else {SecondoSubQuery = false; 
					 SubqueryInUse = true; RESULT = qe.getQuery();} 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(169/*SUBQUERY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // DERIVED_COLUMN_LIST ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(117/*DERIVED_COLUMN_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // DERIVED_COLUMN_LIST ::= LPARENT COLUMN_NAME_LIST RPARENT 
            {
              String RESULT = null;
		int cnlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int cnlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String cnl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 RESULT = "(" + cnl + ")"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(117/*DERIVED_COLUMN_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // CORR_SPEC ::= ID DERIVED_COLUMN_LIST 
            {
              String RESULT = null;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int dclleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dclright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String dcl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (dcl!="") {FromError = true; dcl = " "+dcl;} RESULT = id + dcl; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(118/*CORR_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // CORR_SPEC ::= AS ID DERIVED_COLUMN_LIST 
            {
              String RESULT = null;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int dclleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dclright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String dcl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (dcl!="") {FromError = true; dcl = " "+dcl;} RESULT = id + dcl; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(118/*CORR_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TABLE_REF ::= JOINED_TABLE 
            {
              TableElement RESULT = null;
		int jtleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int jtright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String jt = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 FromError = true; /*RESULT = jt;*/ 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(158/*TABLE_REF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TABLE_REF ::= SUBQUERY CORR_SPEC 
            {
              TableElement RESULT = null;
		int suleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int suright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		QueryClause su = (QueryClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 FromError = true; /*RESULT = su;*/ 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(158/*TABLE_REF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TABLE_REF ::= QUALNAME CORR_SPEC_EXPR 
            {
              TableElement RESULT = null;
		int relleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int relright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String rel = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int cseleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int cseright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String cse = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new TableElement(rel, cse); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(158/*TABLE_REF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // JOIN_SPEC ::= USING LPARENT COLUMN_NAME_LIST RPARENT 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(116/*JOIN_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // JOIN_SPEC ::= ON SEARCH_COND 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(116/*JOIN_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // JOIN_SPEC ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(116/*JOIN_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // JOINED_TABLE ::= TABLE_REF JOIN_TYPE TABLE_REF JOIN_SPEC 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(115/*JOINED_TABLE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // JOINED_TABLE ::= TABLE_REF CROSS JOIN TABLE_REF 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(115/*JOINED_TABLE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CORRESPONDING_SPEC ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(124/*CORRESPONDING_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CORRESPONDING_SPEC ::= CORRESPONDING CORR_BY_EXPR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(124/*CORRESPONDING_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SIMPLE_TABLE ::= QUERY_SPEC 
            {
              InsertElement RESULT = null;
		int qsleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int qsright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		QueryClause qs = (QueryClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 SecondoSubQuery = true; RESULT = new InsertElement(qs); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(177/*SIMPLE_TABLE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SIMPLE_TABLE ::= VALUES TABLE_CON_LIST 
            {
              InsertElement RESULT = null;
		int tclleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int tclright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String tcl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new InsertElement(tcl); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(177/*SIMPLE_TABLE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SIMPLE_TABLE ::= TABLE QUALNAME 
            {
              InsertElement RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(177/*SIMPLE_TABLE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NON_JOIN_QP ::= LPARENT NON_JOIN_QE RPARENT 
            {
              InsertElement RESULT = null;
		 insertError = true; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(183/*NON_JOIN_QP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NON_JOIN_QP ::= SIMPLE_TABLE 
            {
              InsertElement RESULT = null;
		int stleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int stright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		InsertElement st = (InsertElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = st; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(183/*NON_JOIN_QP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // QUERY_PRIM ::= JOINED_TABLE 
            {
              InsertElement RESULT = null;
		 insertError = true; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(181/*QUERY_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // QUERY_PRIM ::= NON_JOIN_QP 
            {
              InsertElement RESULT = null;
		int njqleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int njqright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		InsertElement njq = (InsertElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = njq; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(181/*QUERY_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NON_JOIN_QT ::= JOINED_TABLE INTERSECT ALL_EXPR CORRESPONDING_SPEC QUERY_PRIM 
            {
              InsertElement RESULT = null;
		 SecondoSubQuery = false; insertError = true; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(179/*NON_JOIN_QT*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NON_JOIN_QT ::= NON_JOIN_QT INTERSECT ALL_EXPR CORRESPONDING_SPEC QUERY_PRIM 
            {
              InsertElement RESULT = null;
		 SecondoSubQuery = false; insertError = true; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(179/*NON_JOIN_QT*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NON_JOIN_QT ::= NON_JOIN_QP 
            {
              InsertElement RESULT = null;
		int njqleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int njqright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		InsertElement njq = (InsertElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = njq; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(179/*NON_JOIN_QT*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // QUERY_TERM ::= JOINED_TABLE 
            {
              InsertElement RESULT = null;
		 insertError = true; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(180/*QUERY_TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // QUERY_TERM ::= NON_JOIN_QT 
            {
              InsertElement RESULT = null;
		int njqleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int njqright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		InsertElement njq = (InsertElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = njq; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(180/*QUERY_TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NON_JOIN_QE ::= QUERY_EXPR UNION_EXCEPT_EXPR ALL_EXPR CORRESPONDING_SPEC JOINED_TABLE 
            {
              InsertElement RESULT = null;
		 SecondoSubQuery = false; insertError = true; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(182/*NON_JOIN_QE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NON_JOIN_QE ::= QUERY_EXPR UNION_EXCEPT_EXPR ALL_EXPR CORRESPONDING_SPEC NON_JOIN_QT 
            {
              InsertElement RESULT = null;
		 SecondoSubQuery = false; insertError = true; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(182/*NON_JOIN_QE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NON_JOIN_QE ::= NON_JOIN_QT 
            {
              InsertElement RESULT = null;
		int njqleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int njqright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		InsertElement njq = (InsertElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = njq; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(182/*NON_JOIN_QE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // QUERY_EXPR ::= JOINED_TABLE 
            {
              InsertElement RESULT = null;
		 insertError = true; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(178/*QUERY_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // QUERY_EXPR ::= NON_JOIN_QE 
            {
              InsertElement RESULT = null;
		int njqleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int njqright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		InsertElement njq = (InsertElement)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = njq; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(178/*QUERY_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // QUALNAME ::= ID DOT ID DOT ID 
            {
              String RESULT = null;
		int catalogleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left;
		int catalogright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).right;
		String catalog = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).value;
		int schemaleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int schemaright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String schema = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("Secondo does not work with catalogs. The qualified name "+catalog+"."+schema+"."+id); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(89/*QUALNAME*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // QUALNAME ::= ID DOT ID 
            {
              String RESULT = null;
		int schemaleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int schemaright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String schema = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("Secondo does not work with schemas. The qualified name "+schema+"."+id); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(89/*QUALNAME*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // QUALNAME ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = id; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(89/*QUALNAME*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // BOOLEAN_VALUE_EXPR ::= TRUTH_VALUE 
            {
              String RESULT = null;
		int tvleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int tvright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String tv = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = tv; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(99/*BOOLEAN_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NON_SECOND_DT_FIELD ::= MINUTE 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(143/*NON_SECOND_DT_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NON_SECOND_DT_FIELD ::= HOUR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(143/*NON_SECOND_DT_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NON_SECOND_DT_FIELD ::= DAY 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(143/*NON_SECOND_DT_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NON_SECOND_DT_FIELD ::= MONTH 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(143/*NON_SECOND_DT_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NON_SECOND_DT_FIELD ::= YEAR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(143/*NON_SECOND_DT_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SINGLE_DT_FIELD ::= SECOND TIME_PRECISION_EXPR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(142/*SINGLE_DT_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SINGLE_DT_FIELD ::= NON_SECOND_DT_FIELD TIME_PRECISION 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(142/*SINGLE_DT_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // END_FIELD ::= SECOND TIME_PRECISION 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(144/*END_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // END_FIELD ::= NON_SECOND_DT_FIELD 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(144/*END_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // INTERVAL_QUAL ::= SINGLE_DT_FIELD 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(141/*INTERVAL_QUAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // INTERVAL_QUAL ::= NON_SECOND_DT_FIELD TIME_PRECISION TO END_FIELD 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(141/*INTERVAL_QUAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // INTERVAL_PRIM ::= VALUE_EXPR_PRIMARY INTERVAL_QUAL_EXPR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(140/*INTERVAL_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // INTERVAL_FACTOR ::= INTERVAL_PRIM 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(139/*INTERVAL_FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // INTERVAL_FACTOR ::= SIGN INTERVAL_PRIM 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(139/*INTERVAL_FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // INTERVAL_TERM ::= TERM ASTERISK INTERVAL_FACTOR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(138/*INTERVAL_TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // INTERVAL_TERM ::= INTERVAL_TERM SOLIDUS FACTOR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(138/*INTERVAL_TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // INTERVAL_TERM ::= INTERVAL_TERM ASTERISK FACTOR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(138/*INTERVAL_TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // INTERVAL_TERM ::= INTERVAL_FACTOR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(138/*INTERVAL_TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // INTERVAL_VALUE_EXPR ::= LPARENT DATETIME_VALUE_EXPR MINUS DATETIME_TERM RPARENT INTERVAL_QUAL 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(137/*INTERVAL_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // INTERVAL_VALUE_EXPR ::= INTERVAL_VALUE_EXPR MINUS INTERVAL_TERM 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(137/*INTERVAL_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // INTERVAL_VALUE_EXPR ::= INTERVAL_VALUE_EXPR PLUS INTERVAL_TERM 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(137/*INTERVAL_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // INTERVAL_VALUE_EXPR ::= INTERVAL_TERM 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(137/*INTERVAL_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TIMEZONE_SPEC ::= TIME_ZONE INTERVAL_VALUE_EXPR 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(133/*TIMEZONE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TIMEZONE_SPEC ::= LOCAL 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(133/*TIMEZONE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIMEZONE ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(132/*TIMEZONE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIMEZONE ::= AT TIMEZONE_SPEC 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(132/*TIMEZONE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIME_PRECISION ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(136/*TIME_PRECISION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIME_PRECISION ::= LPARENT UNSIGNED_INT RPARENT 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(136/*TIME_PRECISION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DATETIME_VALUE_FUN ::= CURRENT_TIMESTAMP TIME_PRECISION 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(135/*DATETIME_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DATETIME_VALUE_FUN ::= CURRENT_TIME TIME_PRECISION 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(135/*DATETIME_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DATETIME_VALUE_FUN ::= CURRENT_DATE 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(135/*DATETIME_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DATETIME_PRIM ::= DATETIME_VALUE_FUN 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(130/*DATETIME_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DATETIME_PRIM ::= DATE_VALUE 
            {
              String RESULT = null;
		int dvleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dvright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String dv = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = dv; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(130/*DATETIME_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DATETIME_FACTOR ::= DATETIME_PRIM TIMEZONE 
            {
              String RESULT = null;
		int dpleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int dpright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String dp = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 RESULT = dp; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(131/*DATETIME_FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DATETIME_TERM ::= DATETIME_FACTOR 
            {
              String RESULT = null;
		int dfleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dfright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String df = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = df; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(134/*DATETIME_TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DATETIME_VALUE_EXPR ::= DATETIME_VALUE_EXPR MINUS INTERVAL_TERM 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(129/*DATETIME_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DATETIME_VALUE_EXPR ::= DATETIME_VALUE_EXPR PLUS INTERVAL_TERM 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(129/*DATETIME_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DATETIME_VALUE_EXPR ::= INTERVAL_VALUE_EXPR PLUS DATETIME_TERM 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(129/*DATETIME_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DATETIME_VALUE_EXPR ::= DATETIME_TERM 
            {
              String RESULT = null;
		int dtleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dtright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String dt = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = dt; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(129/*DATETIME_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // BIT_VALUE_FUN ::= SUBSTRING LPARENT BIT_VALUE_EXPR FROM NUMERIC_VALUE_EXPR FOR_EXPR RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(68/*BIT_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // BIT_PRIM ::= STRING_VALUE_FUN 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(74/*BIT_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // BIT_PRIM ::= VALUE_EXPR_PRIMARY 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(74/*BIT_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // BIT_FACTOR ::= BIT_PRIM 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(73/*BIT_FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BIT_CONCAT ::= BIT_VALUE_EXPR CONCAT_OP BIT_FACTOR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(72/*BIT_CONCAT*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // BIT_VALUE_EXPR ::= BIT_CONCAT BIT_FACTOR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(65/*BIT_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TRIM_CHAR ::= 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(82/*TRIM_CHAR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TRIM_CHAR ::= CHAR_VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(82/*TRIM_CHAR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TRIM_SPEC ::= BOTH 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(81/*TRIM_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TRIM_SPEC ::= TRAILING 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(81/*TRIM_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TRIM_SPEC ::= LEADING 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(81/*TRIM_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TRIM_OP ::= CHAR_VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(80/*TRIM_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TRIM_OP ::= TRIM_CHAR FROM CHAR_VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(80/*TRIM_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TRIM_OP ::= TRIM_SPEC TRIM_CHAR FROM CHAR_VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(80/*TRIM_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TRIM_FUN ::= TRIM LPARENT TRIM_OP RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(79/*TRIM_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CHAR_TRANSL ::= TRANSLATE LPARENT CHAR_VALUE_EXPR USING QUALNAME RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(78/*CHAR_TRANSL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // F_O_U_CONV ::= CONVERT LPARENT CHAR_VALUE_EXPR USING QUALNAME RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(77/*F_O_U_CONV*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FOLD ::= UP_LOW_EXPR LPARENT CHAR_VALUE_EXPR RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(76/*FOLD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CHAR_SUBSTR_FUN ::= SUBSTRING LPARENT CHAR_VALUE_EXPR FROM NUMERIC_VALUE_EXPR FOR_EXPR RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(75/*CHAR_SUBSTR_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CHAR_VALUE_FUN ::= TRIM_FUN 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(67/*CHAR_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CHAR_VALUE_FUN ::= CHAR_TRANSL 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(67/*CHAR_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CHAR_VALUE_FUN ::= F_O_U_CONV 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(67/*CHAR_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CHAR_VALUE_FUN ::= FOLD 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(67/*CHAR_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CHAR_VALUE_FUN ::= CHAR_SUBSTR_FUN 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(67/*CHAR_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // STRING_VALUE_FUN ::= BIT_VALUE_FUN 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(66/*STRING_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // STRING_VALUE_FUN ::= CHAR_VALUE_FUN 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(66/*STRING_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CHAR_PRIM ::= STRING_VALUE_FUN 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(69/*CHAR_PRIM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CHAR_FACTOR ::= VALUE_EXPR_PRIMARY COLLATE QUALNAME 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(70/*CHAR_FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CHAR_FACTOR ::= CHAR_PRIM COLLATE_CLAUSE 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(70/*CHAR_FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONCAT ::= VALUE_EXPR_PRIMARY CONCAT_OP CHAR_FACTOR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(71/*CONCAT*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONCAT ::= VALUE_EXPR_PRIMARY CONCAT_OP VALUE_EXPR_PRIMARY 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(71/*CONCAT*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONCAT ::= CHAR_VALUE_EXPR CONCAT_OP VALUE_EXPR_PRIMARY 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(71/*CONCAT*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONCAT ::= CHAR_VALUE_EXPR CONCAT_OP CHAR_FACTOR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(71/*CONCAT*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CHAR_VALUE_EXPR ::= CHAR_FACTOR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(64/*CHAR_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CHAR_VALUE_EXPR ::= CONCAT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(64/*CHAR_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // STRING_VALUE_EXPR ::= BIT_VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(63/*STRING_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // STRING_VALUE_EXPR ::= CHAR_VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(63/*STRING_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LENGTH_EXPR ::= BIT_LENGTH LPARENT STRING_VALUE_EXPR RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(62/*LENGTH_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LENGTH_EXPR ::= OCTET_LENGTH LPARENT STRING_VALUE_EXPR RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(62/*LENGTH_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LENGTH_EXPR ::= CHAR_L_EXPR LPARENT STRING_VALUE_EXPR RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(62/*LENGTH_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIMEZONE_FIELD ::= TIMEZONE_MINUTE 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(61/*TIMEZONE_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIMEZONE_FIELD ::= TIMEZONE_HOUR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(61/*TIMEZONE_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DATETIME_FIELD ::= SECOND 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(60/*DATETIME_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DATETIME_FIELD ::= NON_SECOND_DT_FIELD 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(60/*DATETIME_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXTRACT_SOURCE ::= DATETIME_VALUE_EXPR INTERVAL_VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(59/*EXTRACT_SOURCE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXTRACT_FIELD ::= TIMEZONE_FIELD 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(58/*EXTRACT_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXTRACT_FIELD ::= DATETIME_FIELD 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(58/*EXTRACT_FIELD*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXTRACT_EXPR ::= EXTRACT LPARENT EXTRACT_FIELD FROM EXTRACT_SOURCE RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(57/*EXTRACT_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // POS_EXPR ::= POSITION LPARENT CHAR_VALUE_EXPR IN CHAR_VALUE_EXPR RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(56/*POS_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NUMERIC_VALUE_FUN ::= LENGTH_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(55/*NUMERIC_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NUMERIC_VALUE_FUN ::= EXTRACT_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(55/*NUMERIC_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NUMERIC_VALUE_FUN ::= POS_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(55/*NUMERIC_VALUE_FUN*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CAST_TARGET ::= TYPE_NAME 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(54/*CAST_TARGET*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CAST_TARGET ::= DOMAINNAME 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(54/*CAST_TARGET*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CAST_OP ::= NULL 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(53/*CAST_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CAST_OP ::= VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(53/*CAST_OP*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CAST_SPEC ::= CAST LPARENT CAST_OP AS CAST_TARGET RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(52/*CAST_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RESULT_EXPR ::= NULL 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(51/*RESULT_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RESULT_EXPR ::= VALUE_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(51/*RESULT_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELSE_CLAUSE ::= 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(50/*ELSE_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELSE_CLAUSE ::= ELSE RESULT_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(50/*ELSE_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SIM_WHEN_CLAUSE ::= WHEN VALUE_EXPR THEN RESULT_EXPR SIM_WHEN_CLAUSE 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(49/*SIM_WHEN_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SIM_WHEN_CLAUSE ::= WHEN VALUE_EXPR THEN RESULT_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(49/*SIM_WHEN_CLAUSE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASE_SPEC ::= WHEN SEARCH_COND THEN RESULT_EXPR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(48/*CASE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASE_SPEC ::= CASE VALUE_EXPR SIM_WHEN_CLAUSE 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(48/*CASE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASE_ABBR ::= COALESCE LPARENT VALUE_EXPR_LIST RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(47/*CASE_ABBR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASE_ABBR ::= NULLIF LPARENT VALUE_EXPR COMMA VALUE_EXPR RPARENT 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(47/*CASE_ABBR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASE_EXPR ::= CASE_SPEC 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(46/*CASE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CASE_EXPR ::= CASE_ABBR 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(46/*CASE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SET_FUN_TYPE ::= SUM 
            {
              String RESULT = null;
		 RESULT = "sum"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(114/*SET_FUN_TYPE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SET_FUN_TYPE ::= AVG 
            {
              String RESULT = null;
		 RESULT = "avg"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(114/*SET_FUN_TYPE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SET_FUN_TYPE ::= MAX 
            {
              String RESULT = null;
		 RESULT = "max"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(114/*SET_FUN_TYPE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SET_FUN_TYPE ::= MIN 
            {
              String RESULT = null;
		 RESULT = "min"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(114/*SET_FUN_TYPE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SET_FUN_SPEC ::= SET_FUN_TYPE LPARENT DISTINCT_CLAUSE VALUE_EXPR RPARENT 
            {
              String RESULT = null;
		int funleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left;
		int funright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).right;
		String fun = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).value;
		int distleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int distright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String dist = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int veleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int veright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		ValueExpr ve = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 if (ve.containsSub()) raise_Error("A subquery as part of a set_function_type ");
					RESULT = fun + "(" + dist + ve.getStrValueExpr() + ")"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(113/*SET_FUN_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SET_FUN_SPEC ::= COUNT LPARENT DISTINCT_CLAUSE VALUE_EXPR RPARENT 
            {
              String RESULT = null;
		int distleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int distright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String dist = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int veleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int veright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		ValueExpr ve = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 if (ve.containsSub()) raise_Error("A subquery as part of a set_function_type ");
					RESULT = "count(" + dist + ve.getStrValueExpr() + ")"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(113/*SET_FUN_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SET_FUN_SPEC ::= COUNT LPARENT ASTERISK RPARENT 
            {
              String RESULT = null;
		 RESULT = "count(*)"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(113/*SET_FUN_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COLUMN_REF ::= ID DOT ID DOT ID DOT ID 
            {
              String RESULT = null;
		int catalogleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).left;
		int catalogright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).right;
		String catalog = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).value;
		int schemaleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left;
		int schemaright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).right;
		String schema = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).value;
		int TableNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int TableNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String TableName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int CoNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int CoNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String CoName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("The usage of Tablenames to specify columnnames like "+catalog+"."+schema+"."+TableName+"."+CoName); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(105/*COLUMN_REF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COLUMN_REF ::= ID DOT ID DOT ID 
            {
              String RESULT = null;
		int schemaleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left;
		int schemaright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).right;
		String schema = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).value;
		int TableNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int TableNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String TableName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int CoNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int CoNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String CoName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("The usage of Tablenames to specify columnnames like "+schema+"."+TableName+"."+CoName); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(105/*COLUMN_REF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-4)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COLUMN_REF ::= ID DOT ID 
            {
              String RESULT = null;
		int TableNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int TableNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String TableName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int CoNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int CoNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String CoName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 QualifierInUse = true; RESULT = TableName + ":" + CoName; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(105/*COLUMN_REF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COLUMN_REF ::= ID 
            {
              String RESULT = null;
		int ColumnNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ColumnNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String ColumnName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = ColumnName; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(105/*COLUMN_REF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SYSTEM_INFO ::= VALUE 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(26/*SYSTEM_INFO*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SYSTEM_INFO ::= SYSTEM_USER 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(26/*SYSTEM_INFO*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SYSTEM_INFO ::= SESSION_USER 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(26/*SYSTEM_INFO*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SYSTEM_INFO ::= CURRENT_USER 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(26/*SYSTEM_INFO*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SYSTEM_INFO ::= USER 
            {
              Object RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(26/*SYSTEM_INFO*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAM_SPEC ::= PAR_VAR_NAME INDICATOR PAR_VAR_NAME 
            {
              String RESULT = null;
		int pvn1left = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int pvn1right = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String pvn1 = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int pvn2left = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int pvn2right = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String pvn2 = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = pvn1+" indicator "+pvn2; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(100/*PARAM_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAM_SPEC ::= PAR_VAR_NAME 
            {
              String RESULT = null;
		int pvnleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int pvnright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String pvn = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = pvn; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(100/*PARAM_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GEN_VALUE_SPEC ::= SYSTEM_INFO 
            {
              String RESULT = null;
		 raise_Error("The usage of System-information like USER or VALUE "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(98/*GEN_VALUE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // GEN_VALUE_SPEC ::= QUESTIONMARK 
            {
              String RESULT = null;
		 raise_Error("The usage of dynamic parameters "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(98/*GEN_VALUE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // GEN_VALUE_SPEC ::= PARAM_SPEC 
            {
              String RESULT = null;
		int paramleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int paramright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String param = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("The usage of parameters or variables: " +param); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(98/*GEN_VALUE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // GENERAL_LITERAL ::= A_STRING 
            {
              String RESULT = null;
		int a_stleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int a_stright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String a_st = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 SelectListError = true; RESULT = "\""+a_st+"\""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(102/*GENERAL_LITERAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // UNSIGNED_NUM_LITERAL ::= ANL 
            {
              String RESULT = null;
		int anlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int anlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String anl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = anl;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(101/*UNSIGNED_NUM_LITERAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // UNSIGNED_NUM_LITERAL ::= ENL 
            {
              String RESULT = null;
		int enlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int enlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String enl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = enl;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(101/*UNSIGNED_NUM_LITERAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // UNSIGNED_LITERAL ::= GENERAL_LITERAL 
            {
              String RESULT = null;
		int glleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int glright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String gl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = gl; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(97/*UNSIGNED_LITERAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // UNSIGNED_LITERAL ::= UNSIGNED_NUM_LITERAL 
            {
              String RESULT = null;
		int unlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int unlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String unl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = unl; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(97/*UNSIGNED_LITERAL*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // UNSIGNED_VALUE_SPEC ::= GEN_VALUE_SPEC 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(112/*UNSIGNED_VALUE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // UNSIGNED_VALUE_SPEC ::= UNSIGNED_LITERAL 
            {
              String RESULT = null;
		int ulleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ulright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String ul = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = ul; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(112/*UNSIGNED_VALUE_SPEC*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALUE_EXPR_PRIMARY ::= CAST_SPEC 
            {
              SimpleValue RESULT = null;
		 raise_Error("The usage of cast-specifications "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(146/*VALUE_EXPR_PRIMARY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALUE_EXPR_PRIMARY ::= SET_FUN_SPEC 
            {
              SimpleValue RESULT = null;
		int sfsleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int sfsright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String sfs = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 SimpleValue PreResult = new SimpleValue(sfs);
						PreResult.setSetFunc(); RESULT = PreResult; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(146/*VALUE_EXPR_PRIMARY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE_EXPR_PRIMARY ::= SUBQUERY 
            {
              SimpleValue RESULT = null;
		int suleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int suright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		QueryClause su = (QueryClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new SimpleValue(su); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(146/*VALUE_EXPR_PRIMARY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALUE_EXPR_PRIMARY ::= COLUMN_REF 
            {
              SimpleValue RESULT = null;
		int crleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int crright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String cr = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new SimpleValue(cr); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(146/*VALUE_EXPR_PRIMARY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALUE_EXPR_PRIMARY ::= UNSIGNED_VALUE_SPEC 
            {
              SimpleValue RESULT = null;
		int uvsleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int uvsright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String uvs = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 useAsExpr = true; RESULT = new SimpleValue(uvs); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(146/*VALUE_EXPR_PRIMARY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NUMERIC_PRIMARY ::= VALUE_EXPR_PRIMARY 
            {
              SimpleValue RESULT = null;
		int vepleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int vepright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		SimpleValue vep = (SimpleValue)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = vep; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(147/*NUMERIC_PRIMARY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= NUMERIC_PRIMARY 
            {
              SimpleValue RESULT = null;
		int npleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int npright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		SimpleValue np = (SimpleValue)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = np; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(148/*FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTOR ::= SIGN NUMERIC_PRIMARY 
            {
              SimpleValue RESULT = null;
		int sileft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int siright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String si = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int npleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int npright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		SimpleValue np = (SimpleValue)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 useAsExpr = true; if (np.containsSub() || np.containsSetFunc()) raise_GeneralError("Syntax Error: sign + subquery/Set_Function!");
					RESULT = np.setSign(si); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(148/*FACTOR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TERM ::= TERM SOLIDUS FACTOR 
            {
              ValueList RESULT = null;
		int teleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int teright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		ValueList te = (ValueList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int faleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int faright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		SimpleValue fa = (SimpleValue)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 useAsExpr = true; if (te.containsSub() || te.containsSetFunc()) raise_GeneralError("Syntax Error: subquery/Set_Function + operator!");
					RESULT = te.addElement(fa, "/"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(149/*TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TERM ::= TERM ASTERISK FACTOR 
            {
              ValueList RESULT = null;
		int teleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int teright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		ValueList te = (ValueList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int faleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int faright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		SimpleValue fa = (SimpleValue)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 useAsExpr = true; if (te.containsSub() || te.containsSetFunc()) raise_GeneralError("Syntax Error: subquery/Set_Function + operator!");
					RESULT = te.addElement(fa, "*"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(149/*TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TERM ::= FACTOR 
            {
              ValueList RESULT = null;
		int faleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int faright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		SimpleValue fa = (SimpleValue)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new ValueList(fa); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(149/*TERM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NUMERIC_VALUE_EXPR ::= NUMERIC_VALUE_EXPR MINUS TERM 
            {
              ValueExpr RESULT = null;
		int nveleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int nveright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		ValueExpr nve = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int teleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int teright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueList te = (ValueList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 useAsExpr = true; if (nve.containsSub() || nve.containsSetFunc()) raise_GeneralError("Syntax Error: subquery/Set_Function + operator!");
						RESULT = nve.addElement(te, "-"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(151/*NUMERIC_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NUMERIC_VALUE_EXPR ::= NUMERIC_VALUE_EXPR PLUS TERM 
            {
              ValueExpr RESULT = null;
		int nveleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int nveright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		ValueExpr nve = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int teleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int teright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueList te = (ValueList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 useAsExpr = true; if (nve.containsSub()|| nve.containsSetFunc()) raise_GeneralError("Syntax Error: subquery/Set_Function + operator!");
						RESULT = nve.addElement(te, "+"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(151/*NUMERIC_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NUMERIC_VALUE_EXPR ::= TERM 
            {
              ValueExpr RESULT = null;
		int teleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int teright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueList te = (ValueList)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new ValueExpr(te); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(151/*NUMERIC_VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUE_EXPR ::= BOOLEAN_VALUE_EXPR 
            {
              ValueExpr RESULT = null;
		int bveleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int bveright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String bve = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = new ValueExpr(new ValueList(new SimpleValue(bve))); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(150/*VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUE_EXPR ::= INTERVAL_VALUE_EXPR 
            {
              ValueExpr RESULT = null;
		 raise_Error("This interval_value_expression "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(150/*VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALUE_EXPR ::= DATETIME_VALUE_EXPR 
            {
              ValueExpr RESULT = null;
		int dveleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dveright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String dve = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("This datetime_value_expression "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(150/*VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALUE_EXPR ::= STRING_VALUE_EXPR 
            {
              ValueExpr RESULT = null;
		 raise_Error("This string_value_expression "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(150/*VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALUE_EXPR ::= NUMERIC_VALUE_EXPR 
            {
              ValueExpr RESULT = null;
		int nveleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int nveright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		ValueExpr nve = (ValueExpr)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = nve; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(150/*VALUE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COL_EXPR ::= ID COMMA COL_EXPR 
            {
              String RESULT = null;
		 raise_GeneralError("create index is not supported by SQL92. Secondo partly adapts the version of mySQL but creating an index on more than one column is not supported!"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(43/*COL_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COL_EXPR ::= ID 
            {
              String RESULT = null;
		int columnnameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int columnnameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String columnname = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = columnname; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(43/*COL_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CITYPE_EXPR ::= 
            {
              String RESULT = null;
		 RESULT = ""; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(44/*CITYPE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CITYPE_EXPR ::= USING HASH 
            {
              String RESULT = null;
		 RESULT = " indextype hash "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(44/*CITYPE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CITYPE_EXPR ::= USING RTREE 
            {
              String RESULT = null;
		 RESULT = " indextype rtree "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(44/*CITYPE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CITYPE_EXPR ::= USING BTREE 
            {
              String RESULT = null;
		 RESULT = " indextype btree "; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(44/*CITYPE_EXPR*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CIOPTIONS ::= 
            {
              String RESULT = null;

              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(42/*CIOPTIONS*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CIOPTIONS ::= SPATIAL 
            {
              String RESULT = null;
		 raise_GeneralError("create index is not supported by SQL92. Secondo partly adapts the version of mySQL but spatial is not supported!"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(42/*CIOPTIONS*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CIOPTIONS ::= FULLTEXT 
            {
              String RESULT = null;
		 raise_GeneralError("create index is not supported by SQL92. Secondo partly adapts the version of mySQL but fulltext is not supported!"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(42/*CIOPTIONS*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CIOPTIONS ::= UNIQUE 
            {
              String RESULT = null;
		 raise_GeneralError("create index is not supported by SQL92. Secondo partly adapts the version of mySQL but unique is not supported!"); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(42/*CIOPTIONS*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DOMAINNAME ::= ID DOT ID 
            {
              String RESULT = null;
		int id1left = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int id1right = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String id1 = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int id2left = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int id2right = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String id2 = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = id1+"."+id2; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(92/*DOMAINNAME*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DOMAINNAME ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int idright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String id = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = id; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(92/*DOMAINNAME*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DATATYPE ::= DATE 
            {
              String RESULT = null;
		 raise_Error("The datatype date "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(90/*DATATYPE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DATATYPE ::= STRING 
            {
              String RESULT = null;
		 RESULT = "string"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(90/*DATATYPE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DATATYPE ::= BOOL 
            {
              String RESULT = null;
		 RESULT = "bool"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(90/*DATATYPE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATATYPE ::= REAL 
            {
              String RESULT = null;
		 RESULT = "real"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(90/*DATATYPE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATATYPE ::= INT 
            {
              String RESULT = null;
		 RESULT = "int"; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(90/*DATATYPE*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COLUMN_NAME_LIST ::= ID COMMA COLUMN_NAME_LIST 
            {
              String RESULT = null;
		int coleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int coright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String co = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int cnlleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int cnlright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String cnl = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = co + ", " + cnl; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(93/*COLUMN_NAME_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COLUMN_NAME_LIST ::= ID 
            {
              String RESULT = null;
		int coleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int coright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String co = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = co; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(93/*COLUMN_NAME_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COLUMN_DEF ::= ID DOMAINNAME 
            {
              String RESULT = null;
		int SpNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int SpNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String SpName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int DNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int DNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String DName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("The column definition: " + SpName + " " + DName); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(91/*COLUMN_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COLUMN_DEF ::= ID DATATYPE DEFAULT_CLAUSE COL_CONSTR_EXPR_2 
            {
              String RESULT = null;
		int SpNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left;
		int SpNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).right;
		String SpName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).value;
		int DaNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int DaNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String DaName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int dcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int dcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String dc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		int cceleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int cceright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String cce = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 if (dc != "") raise_Error("A default_clause in a column definition ");
				   if (cce != "") raise_Error("Constraints in a column definition ");
				   RESULT = SpName + ":" + DaName + cce; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(91/*COLUMN_DEF*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TABLE_ELEM ::= TAB_CONSTR_DEF 
            {
              String RESULT = null;
		int tcdleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int tcdright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String tcd = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 raise_Error("Constraints in a table definition "); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(106/*TABLE_ELEM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TABLE_ELEM ::= COLUMN_DEF 
            {
              String RESULT = null;
		int coleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int coright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String co = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = co; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(106/*TABLE_ELEM*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TABLE_ELEM_LIST ::= TABLE_ELEM COMMA TABLE_ELEM_LIST 
            {
              String RESULT = null;
		int teleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left;
		int teright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).right;
		String te = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).value;
		int telleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int telright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String tel = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 inSquareBrackets = true; RESULT = te + ", " + tel; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(107/*TABLE_ELEM_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-2)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TABLE_ELEM_LIST ::= TABLE_ELEM 
            {
              String RESULT = null;
		int teleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int teright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String te = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 RESULT = te; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(107/*TABLE_ELEM_LIST*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CREATE_QUERY ::= CREATE CIOPTIONS INDEX ID CITYPE_EXPR ON ID LPARENT COL_EXPR RPARENT 
            {
              String RESULT = null;
		int indexnameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).left;
		int indexnameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).right;
		String indexname = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-6)).value;
		int indextypeleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left;
		int indextyperight = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).right;
		String indextype = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).value;
		int tablenameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left;
		int tablenameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).right;
		String tablename = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).value;
		int colleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int colright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String col = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 setNextWarning("The name of the index is automatically changed into 'tablename_columnname_indextype!"); 
				   RESULT = "create index on " + tablename + " columns " + col + indextype; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(84/*CREATE_QUERY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-9)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CREATE_QUERY ::= CREATE TABLE QUALNAME LPARENT TABLE_ELEM_LIST RPARENT 
            {
              String RESULT = null;
		int TabNameleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).left;
		int TabNameright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).right;
		String TabName = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-3)).value;
		int CoLileft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int CoLiright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		String CoLi = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		 String PreResult = CoLi; if (inSquareBrackets) {inSquareBrackets = false; 
				  PreResult = "[" + PreResult + "]";} 
				  RESULT = "create table "+TabName+" columns " + PreResult; 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(84/*CREATE_QUERY*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-5)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SOLUTION ::= ALTER_TABLE 
            {
              Object RESULT = null;
		int atleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int atright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String at = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 Translator.TrOutput = new completeAnswer(at, false); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(25/*SOLUTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SOLUTION ::= UPDATE_CLAUSE 
            {
              Object RESULT = null;
		int ucleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int ucright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String uc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 Translator.TrOutput = new completeAnswer(uc, false); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(25/*SOLUTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SOLUTION ::= DROP_CLAUSE 
            {
              Object RESULT = null;
		int drcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int drcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String drc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 Translator.TrOutput = new completeAnswer(drc, false); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(25/*SOLUTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SOLUTION ::= DELETE_CLAUSE 
            {
              Object RESULT = null;
		int dcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int dcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String dc = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 Translator.TrOutput = new completeAnswer(dc, false); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(25/*SOLUTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SOLUTION ::= INSERT_CLAUSE 
            {
              Object RESULT = null;
		int icleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int icright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String ic = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 Translator.TrOutput = new completeAnswer(ic, SubqueryInUse); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(25/*SOLUTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SOLUTION ::= QUERY_SPEC 
            {
              Object RESULT = null;
		int qcleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int qcright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		QueryClause qc = (QueryClause)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 PreResult = qc.getQueryExpression(); if (PreResult.equals("-1"))
					raise_Error("There is an error with the qualifiers. This usage of a Select-Clause ");
					Translator.TrOutput = new completeAnswer(qc.getShadowList(),PreResult,SubqueryInUse); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(25/*SOLUTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= SOLUTION EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left;
		int start_valright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).right;
		Object start_val = (Object)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).value;
		RESULT = start_val;
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(0/*$START*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-1)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParsCommand$parser.done_parsing();
          return CUP$ParsCommand$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // SOLUTION ::= CREATE_QUERY 
            {
              Object RESULT = null;
		int cqleft = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left;
		int cqright = ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right;
		String cq = (String)((java_cup10.runtime.Symbol) CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).value;
		 Translator.TrOutput = new completeAnswer(cq, false); 
              CUP$ParsCommand$result = new java_cup10.runtime.Symbol(25/*SOLUTION*/, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).left, ((java_cup10.runtime.Symbol)CUP$ParsCommand$stack.elementAt(CUP$ParsCommand$top-0)).right, RESULT);
            }
          return CUP$ParsCommand$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

