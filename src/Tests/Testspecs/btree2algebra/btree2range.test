delete database btree2test;

#setup btree2rangetest BTree2Algebra

create database btree2test;
restore database btree2test from '$(SECONDO_BUILD_DIR)/Tests/Testspecs/btree2algebra/btree2testDB';

let b1 = Staedte createbtree[Bev];
let x1 = Staedte createbtree2[Bev];
let x2 = Staedte createbtree2[Bev, 0.33, 50];
let x3 = Staedte feed addid createbtree2[Bev];
let x4 = Staedte feed addid createbtree2[Bev, 0.85, 20];
let x5 = Staedte feed createbtree2[0.77, 60, Bev, SName, multiple];
let x6 = Staedte feed createbtree2[0.77, 60, Bev, SName, uniqueKey];
let x7 = Staedte feed createbtree2[0.77, 60, Bev, SName, uniqueKeyMultiData];
let x8 = Staedte feed createbtree2[0.77, 60, SName, none, uniqueKey];
let x9 = RealNumbers feed addid createbtree2[Num, 0.80, 20];
let x10 = RealNumbers feed addid createbtree2[Positiv, 0.80, 20];
let x11 = RealNumbers feed createbtree2[0.67, 80, Num, none, uniqueKey];
let x12 = RealNumbers feed createbtree2[0.75, 20, Positiv, none, uniqueKey];
let x13 = RealNumbers feed createbtree2[0.75, 20, Positiv, Num, uniqueKeyMultiData];
let x14 = RealNumbers feed createbtree2[0.67, 80, Positiv, none, multiple];
let x15 = RealNumbers feed createbtree2[0.50, 40, Positiv, Num, multiple];


#testcase exactmatch2TypeMapError1
#yields error
query x1 exactmatch2[Staedte] consume;

#testcase exactmatch2TypeMapError2
#yields error
query b1 exactmatch2[111000] consume;

#testcase exactmatch2TypeMapError3
#yields error
query x1 exactmatch2["Essen"] consume;

#testcase exactmatch2Example1
#yields ((rel (tuple ((Key string))))(("Dortmund")))
query x8 exactmatch2["Dortmund"] consume;

#testcase exactmatch2Example2
#yields ((rel (tuple ((Key real))))((2.45)))
query x11 exactmatch2[2.45] consume;

#testcase exactmatch2Example3
#yields ((rel (tuple ((Key bool))))((TRUE)))
query x12 exactmatch2[TRUE] consume;

#testcase exactmatch2Example4
#yields ((rel (tuple ((Key real)(Data tid))))((7.52 93)(7.52 108)))
query x9 exactmatch2[7.52] consume;

#testcase exactmatch2Example5
#yields ((rel (tuple ((Key int)(Data tid))))((134000 9)(134000 8)))
query x1 exactmatch2[134000] consume;

#testcase exactmatchSTypeMapError1
#yields error
query x1 exactmatchS[Staedte] consume;

#testcase exactmatchSTypeMapError2
#yields error
query x5 exactmatchS[111000] consume;

#testcase exactmatchSTypeMapError3
#yields error
query x3 exactmatchS[Staedte] consume;

#testcase exactmatchSExample1
#yields ((rel (tuple ((SName string)(Bev int)(PLZ int)(Vorwahl string)(Kennzeichen string))))(("Aachen" 239000 5100 "0241" "AC")))
query x3 exactmatchS[239000] Staedte gettuples consume;

#testcase exactmatchSExample2
#yields ((rel (tuple ((Num real)(Positiv bool))))((-7894.14 FALSE)))
query x9 exactmatchS[-7894.14] RealNumbers gettuples consume;

#testcase exactmatchSExample3
#yields (int 52)
query x10 exactmatchS[FALSE] count;

#testcase exactmatchTypeMapError1
#yields error
query x1 Staedte exactmatch[Staedte] consume;

#testcase exactmatchTypeMapError2
#yields error
query x5 Staedte exactmatch[111000] consume;

#testcase exactmatchTypeMapError3
#yields error
query x3 Staedte exactmatch[Staedte] consume;

#testcase exactmatchTypeMapError4
#yields error
query x3 Num exactmatch[111000] consume;

#testcase exactmatchExample1
#yields ((rel (tuple ((SName string)(Bev int)(PLZ int)(Vorwahl string)(Kennzeichen string))))(("Heilbronn" 111000 7100 "07131" "HN")("Koblenz" 111000 5400 "0261" "KO")))
query x3 Staedte exactmatch[111000] consume;

#testcase exactmatchExample2
#yields ((rel (tuple ((Num real)(Positiv bool))))((6435.26 TRUE)))
query x9 RealNumbers exactmatch[6435.26] consume;

#testcase exactmatchExample3
#yields (int 60)
query x10 RealNumbers exactmatch[TRUE] count;

#testcase range2TypeMapError1
#yields error
query x1 range2[Staedte, Bev] consume;

#testcase range2TypeMapError2
#yields error
query b1 range2[100000, 200000] consume;

#testcase range2TypeMapError3
#yields error
query x1 range2[100000, "Hagen"] consume;

#testcase range2TypeMapError4
#yields error
query x1 range2["Hanau", 700000] consume;

#testcase range2TypeMapError5
#yields error
query x8 range2[100000, 500000] consume;

#testcase range2Example1
#yields (int 29)
query x1 range2[100000, 200000] count;

#testcase range2Example2
#yields (int 25)
query x6 range2[100000, 200000] count;

#testcase range2Example3
#yields (int 29)
query x7 range2[100000, 200000] count;

#testcase range2Example4
#yields ((rel (tuple ((Key string))))(("Hagen")("Hamburg")("Hamm")))
query x8 range2["Hagen","Hanau"] consume;

#testcase range2Example5
#yields (int 14)
query x11 range2[0., 10.] count;

#testcase range2Example6
#yields (int 2)
query x12 range2[FALSE, TRUE] count;

#testcase range2Example7
#yields (int 112)
query x14 range2[FALSE, TRUE] count;

#testcase range2Example8
#yields (int 0)
query x14 range2[TRUE, FALSE] count;

#testcase rangeSTypeMapError1
#yields error
query x5 rangeS[100000, 500000] consume;

#testcase rangeSTypeMapError2
#yields error
query x3 rangeS[Staedte, Bev] consume;

#testcase rangeSTypeMapError3
#yields error
query x3 rangeS[100000, "Hagen"] consume;

#testcase rangeSTypeMapError4
#yields error
query x3 rangeS["Hanau", 700000] consume;

#testcase rangeSExample1
#yields (int 29)
query x2 rangeS[100000, 200000] count;

#testcase rangeSExample2
#yields (int 3)
query x2 rangeS[300000, 400000] count;

#testcase rangeSExample3
#yields (int 112)
query x10 rangeS[FALSE, TRUE] count;

#testcase rangeSExample4
#yields ((rel (tuple ((Bev int))))((153000)(154000)(155000)(158000)))
query x3 rangeS[150000, 160000] Staedte gettuples project[Bev] consume;

#testcase rangeSExample5
#yields ((rel (tuple ((Bev int))))())
query x3 rangeS[150000, 152000] Staedte gettuples project[Bev] consume;

#testcase rangeSExample6
#yields ((rel (tuple ((Num real)(Positiv bool))))((2.05 TRUE)(2.33 TRUE)(2.43 TRUE)(2.45 TRUE)(3.48 TRUE)(4.38 TRUE)(4.95 TRUE)(5.15 TRUE)(6.75 TRUE)(7.29 TRUE)(7.4 TRUE)(7.52 TRUE)(7.52 TRUE)(8.16 TRUE)(9.95 TRUE)))
query x9 rangeS[0., 10.] RealNumbers gettuples consume;

#testcase rangeTypeMapError1
#yields error
query x1 Staedte range[Staedte, Bev] consume;

#testcase rangeTypeMapError2
#yields error
query x5 Staedte range[111000, 120000] consume;

#testcase rangeTypeMapError3
#yields error
query x3 Staedte range[Staedte, "Dortmund"] consume;

#testcase rangeTypeMapError4
#yields error
query x3 Num range[111000, 150000] consume;

#testcase rangeExample1
#yields ((rel (tuple ((SName string)(Bev int)(PLZ int)(Vorwahl string)(Kennzeichen string))))(("Heilbronn" 111000 7100 "07131" "HN")("Koblenz" 111000 5400 "0261" "KO")))
query x3 Staedte range[110001, 112000] consume;

#testcase rangeExample2
#yields ((rel (tuple ((Num real)(Positiv bool))))((6435.26 TRUE)))
query x9 RealNumbers range[6400., 6500.] consume;

#testcase rangeExample3
#yields (int 60)
query x10 RealNumbers range[TRUE, TRUE] count;

#testcase rangeExample4
#yields ((rel (tuple ((Num real)(Positiv bool))))((2.05 TRUE)(2.33 TRUE)(2.43 TRUE)(2.45 TRUE)(3.48 TRUE)(4.38 TRUE)(4.95 TRUE)))
query x9 RealNumbers range[0., 5.] consume;

#testcase leftrange2TypeMapError1
#yields error
query x1 leftrange2[Staedte] consume;

#testcase leftrange2TypeMapError2
#yields error
query b1 leftrange2[200000] consume;

#testcase leftrange2TypeMapError3
#yields error
query x1 leftrange2["Hamburg"] consume;

#testcase leftrange2TypeMapError4
#yields error
query x1 leftrange2[TRUE] consume;

#testcase leftrange2TypeMapError5
#yields error
query x8 leftrange2[500000] consume;

#testcase leftrange2Example1
#yields (int 0)
query x1 leftrange2[10000] count;

#testcase leftrange2Example2
#yields (int 8)
query x6 leftrange2[120000] count;

#testcase leftrange2Example3
#yields (int 10)
query x7 leftrange2[120000] count;

#testcase leftrange2Example4
#yields ((rel (tuple ((Key string))))(("Aachen")("Berlin")))
query x8 leftrange2["Berlin"] consume;

#testcase leftrange2Example5
#yields (int 52)
query x11 leftrange2[0.] count;

#testcase leftrange2Example6
#yields (int 1)
query x12 leftrange2[FALSE] count;

#testcase leftrange2Example7
#yields (int 112)
query x14 leftrange2[TRUE] count;

#testcase leftrange2Example8
#yields (int 52)
query x14 leftrange2[FALSE] count;

#testcase leftrangeSTypeMapError1
#yields error
query x5 leftrangeS[500000] consume;

#testcase leftrangeSTypeMapError2
#yields error
query x3 leftrangeS[Staedte] consume;

#testcase leftrangeSTypeMapError3
#yields error
query x3 leftrangeS["Hagen"] consume;

#testcase leftrangeSTypeMapError4
#yields error
query x13 leftrangeS["Hanau"] consume;

#testcase leftrangeSExample1
#yields (int 25)
query x2 leftrangeS[180000] count;

#testcase leftrangeSExample2
#yields (int 0)
query x2 leftrangeS[30000] count;

#testcase leftrangeSExample3
#yields (int 112)
query x10 leftrangeS[TRUE] count;

#testcase leftrangeSExample4
#yields ((rel (tuple ((Bev int))))((100000)(101000)(104000)(106000)(107000)(107000)(110000)(111000)(111000)(118000)))
query x3 leftrangeS[120000] Staedte gettuples project[Bev] consume;

#testcase leftrangeSExample5
#yields ((rel (tuple ((Bev int))))())
query x3 leftrangeS[75000] Staedte gettuples project[Bev] consume;

#testcase leftrangeSExample6
#yields ((rel (tuple ((Num real)(Positiv bool))))((-9920.1 FALSE)(-9707.42 FALSE)(-7894.14 FALSE)(-7849.87 FALSE)))
query x9 leftrangeS[-7500.] RealNumbers gettuples consume;

#testcase leftrangeTypeMapError1
#yields error
query x1 Staedte leftrange[Bev] consume;

#testcase leftrangeTypeMapError2
#yields error
query x5 Staedte leftrange[111000] consume;

#testcase leftrangeTypeMapError3
#yields error
query x3 Staedte leftrange["Dortmund"] consume;

#testcase leftrangeTypeMapError4
#yields error
query x3 Num leftrange[100] consume;

#testcase leftrangeExample1
#yields ((rel (tuple ((SName string)(Bev int)(PLZ int)(Vorwahl string)(Kennzeichen string))))(("Erlangen" 100000 8520 "09131" "ER")))
query x3 Staedte leftrange[100000] consume;

#testcase leftrangeExample2
#yields ((rel (tuple ((Num real)(Positiv bool))))((-9920.1 FALSE)(-9707.42 FALSE)(-7894.14 FALSE)(-7849.87 FALSE)(-7032.53 FALSE)(-6758.98 FALSE)))
query x9 RealNumbers leftrange[-6500.] consume;

#testcase leftrangeExample3
#yields (int 52)
query x10 RealNumbers leftrange[FALSE] count;

#testcase leftrangeExample4
#yields ((rel (tuple ((Num real)(Positiv bool))))())
query x9 RealNumbers leftrange[-10000.] consume;

#testcase rightrange2TypeMapError1
#yields error
query x1 rightrange2[Staedte] consume;

#testcase rightrange2TypeMapError2
#yields error
query b1 rightrange2[200000] consume;

#testcase rightrange2TypeMapError3
#yields error
query x1 rightrange2["Hamburg"] consume;

#testcase rightrange2TypeMapError4
#yields error
query x1 rightrange2[TRUE] consume;

#testcase rightrange2TypeMapError5
#yields error
query x8 rightrange2[500000] consume;

#testcase rightrange2Example1
#yields (int 0)
query x1 rightrange2[10000000] count;

#testcase rightrange2Example2
#yields (int 4)
query x6 rightrange2[800000] count;

#testcase rightrange2Example3
#yields (int 9)
query x7 rightrange2[560000] count;

#testcase rightrange2Example4
#yields ((rel (tuple ((Key string))))(("Wuppertal")))
query x8 rightrange2["Wuppertal"] consume;

#testcase rightrange2Example5
#yields (int 59)
query x11 rightrange2[0.] count;

#testcase rightrange2Example6
#yields (int 1)
query x12 rightrange2[TRUE] count;

#testcase rightrange2Example7
#yields (int 60)
query x14 rightrange2[TRUE] count;

#testcase rightrange2Example8
#yields (int 112)
query x14 rightrange2[FALSE] count;

#testcase rightrangeSTypeMapError1
#yields error
query x5 rightrangeS[500000] consume;

#testcase rightrangeSTypeMapError2
#yields error
query x3 rightrangeS[Staedte] consume;

#testcase rightrangeSTypeMapError3
#yields error
query x3 rightrangeS["Hagen"] consume;

#testcase rightrangeSTypeMapError4
#yields error
query x13 rightrangeS["Hanau"] consume;

#testcase rightrangeSExample1
#yields (int 4)
query x2 rightrangeS[750000] count;

#testcase rightrangeSExample2
#yields (int 0)
query x2 rightrangeS[3000000] count;

#testcase rightrangeSExample3
#yields (int 112)
query x10 rightrangeS[FALSE] count;

#testcase rightrangeSExample4
#yields ((rel (tuple ((Bev int))))((916000)(1267000)(1580000)(1859000)))
query x3 rightrangeS[850000] Staedte gettuples project[Bev] consume;

#testcase rightrangeSExample5
#yields ((rel (tuple ((Bev int))))())
query x3 rightrangeS[3500000] Staedte gettuples project[Bev] consume;

#testcase rightrangeSExample6
#yields ((rel (tuple ((Num real)(Positiv bool))))((8283.02 TRUE)(8680.31 TRUE)(9013.67 TRUE)(9236.93 TRUE)(9899.09 TRUE)))
query x9 rightrangeS[7500.] RealNumbers gettuples consume;

#testcase rightrangeTypeMapError1
#yields error
query x1 Staedte rightrange[Bev] consume;

#testcase rightrangeTypeMapError2
#yields error
query x5 Staedte rightrange[560000] consume;

#testcase rightrangeTypeMapError3
#yields error
query x3 Staedte rightrange["Stuttgart"] consume;

#testcase rightrangeTypeMapError4
#yields error
query x3 Num rightrange[1000000] consume;

#testcase rightrangeExample1
#yields ((rel (tuple ((SName string)(Bev int)(PLZ int)(Vorwahl string)(Kennzeichen string))))(("Muenchen" 1267000 8000 "089" "M")("Hamburg" 1580000 2000 "040" "HH")("Berlin" 1859000 1000 "030" "B")))
query x3 Staedte rightrange[1000000] consume;

#testcase rightrangeExample2
#yields (int 60)
query x9 RealNumbers rightrange[0.] count;

#testcase rightrangeExample3
#yields (int 112)
query x10 RealNumbers rightrange[FALSE] count;

#testcase rightrangeExample4
#yields ((rel (tuple ((Num real)(Positiv bool))))())
query x9 RealNumbers rightrange[9999.99] consume;


#teardown

close database;
delete database btree2test;
